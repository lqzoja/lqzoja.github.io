<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Codeforces Round #357 (Div. 2) 题解]]></title>
      <url>/2017/10/10/Codeforces-Round-357-Div-2-%E9%A2%98%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天吃着空，和同学打了一场 Codeforces。<br>然后我吃着更空，还想写一写题解。<br><del>毕竟好久没更题解了</del></p>
<h1 id="A-A-Good-Contest"><a href="#A-A-Good-Contest" class="headerlink" title="A. A Good Contest"></a>A. A Good Contest</h1><h2 id="题意概述"><a href="#题意概述" class="headerlink" title="题意概述"></a>题意概述</h2><p>给你$n$个人打某场 Codeforces 前后 Rating 的变化，问你是否有原来就是红名的 dalao 涨分了。<br>红名的 Rating 大于等于 2400 。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>小学题</p>
<a id="more"></a>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; str;</div><div class="line">		<span class="keyword">int</span> x = read(), y = read();</div><div class="line">		<span class="keyword">if</span> (x &gt;= <span class="number">2400</span> &amp;&amp; y &gt; x)</div><div class="line">			<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>)&amp;<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> n = scan.nextInt();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">			String str = scan.next();</div><div class="line">			<span class="keyword">int</span> x = scan.nextInt();</div><div class="line">			<span class="keyword">int</span> y = scan.nextInt();</div><div class="line">			<span class="keyword">if</span> (x &gt;= <span class="number">2400</span> &amp;&amp; y &gt; x) &#123;</div><div class="line">				System.out.println(<span class="string">"YES"</span>);</div><div class="line">				scan.close();</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		System.out.println(<span class="string">"NO"</span>);</div><div class="line">		scan.close();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="built_in">parseInt</span>(readline())</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		<span class="keyword">var</span> s = readline().split(<span class="string">' '</span>),</div><div class="line">			x = <span class="built_in">parseInt</span>(s[<span class="number">1</span>]),</div><div class="line">			y = <span class="built_in">parseInt</span>(s[<span class="number">2</span>]);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (x &gt;= <span class="number">2400</span> &amp;&amp; y &gt; x)</div><div class="line">			<span class="keyword">return</span> print(<span class="string">"YES"</span>);</div><div class="line">	&#125;</div><div class="line">	print(<span class="string">"NO"</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="Python-3"><a href="#Python-3" class="headerlink" title="Python 3"></a>Python 3</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">n = int(input())</div><div class="line">i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> i &lt;= n:</div><div class="line">	s, x, y = input().split(<span class="string">' '</span>)</div><div class="line">	x = int(x)</div><div class="line">	y = int(y)</div><div class="line">	<span class="keyword">if</span> (x &gt;= <span class="number">2400</span>) <span class="keyword">and</span> (y &gt; x):</div><div class="line">		print(<span class="string">'YES'</span>)</div><div class="line">		exit(<span class="number">0</span>)</div><div class="line">	i = i+<span class="number">1</span></div><div class="line">print(<span class="string">'NO'</span>)</div></pre></td></tr></table></figure>
<h3 id="速度比较"><a href="#速度比较" class="headerlink" title="速度比较"></a>速度比较</h3><p><strong>由于本人没有多次试验取平均值，所以试验结果并不可靠，不过可以凑活着比一下</strong></p>
<table>
<thead>
<tr>
<th>language</th>
<th style="text-align:right">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>C++</td>
<td style="text-align:right">31 ms</td>
</tr>
<tr>
<td>Java</td>
<td style="text-align:right">140 ms</td>
</tr>
<tr>
<td>JavaScript</td>
<td style="text-align:right">31 ms</td>
</tr>
<tr>
<td>Python 3</td>
<td style="text-align:right">62 ms</td>
</tr>
</tbody>
</table>
<p>可以看出， Java 目前是跑的最慢的。<br>JavaScript 与 C++ 平分秋色。<br>Python 3 则介于两者中间。</p>
<p>总结完毕，我们来看下一题。</p>
<h1 id="B-Economy-Game"><a href="#B-Economy-Game" class="headerlink" title="B. Economy Game"></a>B. Economy Game</h1><h2 id="题意概述-1"><a href="#题意概述-1" class="headerlink" title="题意概述"></a>题意概述</h2><p>给你一个数$n$，询问是否有一个三元组$(a, b, c)$满足$1234567*a + 123456*b + 1234*c = n$。</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>暴力枚举即可。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">	ll n = read();</div><div class="line">	<span class="keyword">for</span> (ll a = <span class="number">0</span>; a &lt;= n; a += <span class="number">1234567</span>)</div><div class="line">		<span class="keyword">for</span> (ll b = <span class="number">0</span>; b+a &lt;= n; b += <span class="number">123456</span>) &#123;</div><div class="line">			<span class="keyword">if</span> ((n-a-b) % <span class="number">1234</span> == <span class="number">0</span>)</div><div class="line">				<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>)&amp;<span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">"NO"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> n = scan.nextInt();</div><div class="line">		scan.close();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= n; a += <span class="number">1234567</span>)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; a + b &lt;= n; b += <span class="number">123456</span>)</div><div class="line">				<span class="keyword">if</span> ((n - a - b) % <span class="number">1234</span> == <span class="number">0</span>) &#123;</div><div class="line">					System.out.println(<span class="string">"YES"</span>);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">		System.out.println(<span class="string">"NO"</span>); </div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> n = <span class="number">1</span> * readline()</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>; a &lt;= n; a += <span class="number">1234567</span>)</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; a + b &lt;= n; b += <span class="number">123456</span>)</div><div class="line">			<span class="keyword">if</span> ((n - a - b) % <span class="number">1234</span> === <span class="number">0</span>)</div><div class="line">				<span class="keyword">return</span> print(<span class="string">'YES'</span>);</div><div class="line">	print(<span class="string">'NO'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h3 id="Python-3-1"><a href="#Python-3-1" class="headerlink" title="Python 3"></a>Python 3</h3><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">n = int(input())</div><div class="line">a = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> a &lt;= n:</div><div class="line">	b = <span class="number">0</span></div><div class="line">	<span class="keyword">while</span> a + b &lt;= n:</div><div class="line">		<span class="keyword">if</span> (n - a - b) % <span class="number">1234</span> == <span class="number">0</span>:</div><div class="line">			print(<span class="string">'YES'</span>)</div><div class="line">			exit(<span class="number">0</span>)</div><div class="line">		b += <span class="number">123456</span></div><div class="line">	a += <span class="number">1234567</span></div><div class="line">print(<span class="string">'NO'</span>)</div></pre></td></tr></table></figure>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>速度</p>
<table>
<thead>
<tr>
<th>Language</th>
<th style="text-align:right">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>C++</td>
<td style="text-align:right">15 ms</td>
</tr>
<tr>
<td>Java</td>
<td style="text-align:right">139 ms</td>
</tr>
<tr>
<td>JavaScript</td>
<td style="text-align:right">31 ms</td>
</tr>
<tr>
<td>Python 3</td>
<td style="text-align:right">77 ms</td>
</tr>
</tbody>
</table>
<p>C++ 的优势逐渐显现了出来。<br><del>我估计 Java 快要萎掉了</del></p>
<p>这题就这样解决了，再来看下一题。</p>
<h1 id="C-Heap-Operations"><a href="#C-Heap-Operations" class="headerlink" title="C. Heap Operations"></a>C. Heap Operations</h1><h2 id="题意概述-2"><a href="#题意概述-2" class="headerlink" title="题意概述"></a>题意概述</h2><p>有一个小根堆，给你$n$个操作，要你在中间插入几个操作，使得所有的 <code>getMin</code> 操作都正确并且所有的 <code>removeMin</code> 操作都不会出错（比如给一个空集执行 <code>removeMin</code> ）。</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>贪心。</p>
<p><code>insert x</code> 操作不需要处理。<br><code>getMin x</code> 操作需要把堆中所有小于$x$的元素弹出，如果堆是空或者最小值不是$x$需要<code>insert x</code>。<br><code>removeMin</code> 操作只需要单独判断一下堆是否为空即可。</p>
<p>手写一个堆是不存在的。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><h3 id="C-2"><a href="#C-2" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; ans;</div><div class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; q;</div><div class="line"><span class="built_in">string</span> str;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; str;</div><div class="line">		<span class="keyword">if</span> (str == <span class="string">"removeMin"</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!q.size()) &#123;</div><div class="line">				ans.push_back(make_pair(<span class="number">1</span>, <span class="number">1</span>));</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				q.pop();</div><div class="line">			&#125;</div><div class="line">			ans.push_back(make_pair(<span class="number">3</span>, <span class="number">0</span>));</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"insert"</span>) &#123;</div><div class="line">			<span class="keyword">int</span> x = read();</div><div class="line">			q.push(x);</div><div class="line">			ans.push_back(make_pair(<span class="number">1</span>, x));</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str == <span class="string">"getMin"</span>) &#123;</div><div class="line">			<span class="keyword">int</span> x = read();</div><div class="line">			<span class="keyword">while</span> (q.size() &amp;&amp; q.top() &lt; x) &#123;</div><div class="line">				q.pop();</div><div class="line">				ans.push_back(make_pair(<span class="number">3</span>, <span class="number">0</span>));</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (!q.size() || q.top() != x) &#123;</div><div class="line">				q.push(x);</div><div class="line">				ans.push_back(make_pair(<span class="number">1</span>, x));</div><div class="line">			&#125;</div><div class="line">			ans.push_back(make_pair(<span class="number">2</span>, x));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; ans.size() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) &#123;</div><div class="line">		<span class="keyword">if</span> (x.first == <span class="number">1</span>)</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"insert "</span> &lt;&lt; x.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x.first == <span class="number">2</span>)</div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"getMin "</span> &lt;&lt; x.second &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"removeMin"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h3><p>Java 光荣的 TLE 了。<br>我实在卡不了常数了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> PriorityQueue &lt;Integer&gt; que = <span class="keyword">new</span> PriorityQueue &lt;&gt; ();</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> op[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000020</span>];</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> vl[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000020</span>];</div><div class="line">	<span class="keyword">public</span> <span class="keyword">int</span> cnt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">public</span> Scanner scan;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Main</span> <span class="params">(Scanner scan)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.scan = scan;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> n = scan.nextInt();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">			String str = scan.next();</div><div class="line">			<span class="keyword">if</span> (str.equals(<span class="string">"removeMin"</span>)) &#123;</div><div class="line">				<span class="keyword">if</span> (que.size() == <span class="number">0</span>) &#123;</div><div class="line">					op[++cnt] = <span class="number">1</span>;</div><div class="line">					vl[cnt] = <span class="number">233</span>;</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					que.poll();</div><div class="line">				&#125;</div><div class="line">				op[++cnt] = <span class="number">3</span>;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">"getMin"</span>)) &#123;</div><div class="line">				<span class="keyword">int</span> x = scan.nextInt();</div><div class="line">				<span class="keyword">while</span> (que.size() &gt; <span class="number">0</span> &amp;&amp; que.peek() &lt; x) &#123;</div><div class="line">					que.poll();</div><div class="line">					op[++cnt] = <span class="number">3</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (que.size() == <span class="number">0</span> || que.peek() != x) &#123;</div><div class="line">					que.add(x);</div><div class="line">					op[++cnt] = <span class="number">1</span>;</div><div class="line">					vl[cnt] = x;</div><div class="line">				&#125;</div><div class="line">				op[++cnt] = <span class="number">2</span>;</div><div class="line">				vl[cnt] = x;</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">"insert"</span>)) &#123;</div><div class="line">				<span class="keyword">int</span> x = scan.nextInt();</div><div class="line">				que.add(x);</div><div class="line">				op[++cnt] = <span class="number">1</span>;</div><div class="line">				vl[cnt] = x;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		scan.close();</div><div class="line">		System.out.println(cnt);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (op[i] == <span class="number">1</span>)</div><div class="line">				System.out.println(<span class="string">"insert "</span> + vl[i]);</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (op[i] == <span class="number">2</span>)</div><div class="line">				System.out.println(<span class="string">"getMin "</span> + vl[i]);</div><div class="line">			<span class="keyword">else</span></div><div class="line">				System.out.println(<span class="string">"removeMin"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Main main = <span class="keyword">new</span> Main(<span class="keyword">new</span> Scanner(System.in));</div><div class="line">		main.work();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="JavaScript-2"><a href="#JavaScript-2" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript 不存在 PriorityQueue。<br>所以代码也是不存在的。</p>
<h3 id="Python-3-2"><a href="#Python-3-2" class="headerlink" title="Python 3"></a>Python 3</h3><p>我不会用 heapq 亦或者 PriorityQueue。<br>所以就放过我吧 (っTωT)っ</p>
<h3 id="比较-1"><a href="#比较-1" class="headerlink" title="比较"></a>比较</h3><table>
<thead>
<tr>
<th>Language</th>
<th style="text-align:right">Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>C++</td>
<td style="text-align:right">904 ms</td>
</tr>
<tr>
<td>Java</td>
<td style="text-align:right">1000+ ms</td>
</tr>
<tr>
<td>JavaScript</td>
<td style="text-align:right">—</td>
</tr>
<tr>
<td>Python 3</td>
<td style="text-align:right">—</td>
</tr>
</tbody>
</table>
<p>至此我们说明 C++ 是跑的最快的一门语言。</p>
<p><del>Java 开和 C++ 一样的时限是要闹怎样啊。。。</del></p>
<h1 id="D-Gifts-by-the-List"><a href="#D-Gifts-by-the-List" class="headerlink" title="D. Gifts by the List"></a>D. Gifts by the List</h1><h2 id="题意概述-3"><a href="#题意概述-3" class="headerlink" title="题意概述"></a>题意概述</h2><p>有$n$个人和$m$个父子关系，每个人都有想把礼物送给$a_i$的欲望，但是他必须把礼物送给你给出的一张名单中自上而下第一个是他的祖先的人。如果这个人不是他想送出礼物的人，他就会变得很不开心。问你有没有一个能让所有人开心的名单。没有输出 <code>-1</code> 。</p>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>先 %%% lbc dalao 给我提供了思路。</p>
<p><img src="/img/momomo.gif" alt="momomo"></p>
<p>每个人只有把礼物送给他自己或者他爸爸或者他爸爸送给的人才能保证不冲突。<br>这样连边然后拓扑排序一波就搞定了。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 400020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> to[N], head[N], nxt[N], init[N], cnt, q[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	to[++cnt] = y;</div><div class="line">	nxt[cnt] = head[x];</div><div class="line">	head[x] = cnt;</div><div class="line">	init[y]++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> fa[N], wt[N], used[N], ans;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> y = fa[x], z = wt[y];</div><div class="line">	<span class="keyword">if</span> (y) &#123;</div><div class="line">		<span class="keyword">if</span> (wt[x] != z &amp;&amp; wt[x] != y &amp;&amp; wt[x] != x)</div><div class="line">			<span class="built_in">exit</span>(<span class="built_in">puts</span>(<span class="string">"-1"</span>) &amp; <span class="number">0</span>);</div><div class="line">		<span class="keyword">if</span> (wt[x] == y)</div><div class="line">			insert(y, x);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (wt[x] == z)</div><div class="line">			insert(z, x);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (wt[x] == x)</div><div class="line">			insert(x, z);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span> (wt[x] != x)</div><div class="line">			<span class="built_in">exit</span>(<span class="built_in">puts</span>(<span class="string">"-1"</span>) &amp; <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> s : son[x])</div><div class="line">		dfs(s);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">		<span class="keyword">int</span> x = read(), y = read();</div><div class="line">		son[x].push_back(y);</div><div class="line">		fa[y] = x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</div><div class="line">		wt[i] = read();</div><div class="line">		<span class="keyword">if</span> (!used[wt[i]]) &#123;</div><div class="line">			ans ++;</div><div class="line">			used[wt[i]] = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span> (!fa[i]) dfs(i);</div><div class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span> (!init[i]) q[++r] = i;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">		<span class="keyword">int</span> x = q[++l];</div><div class="line">		<span class="keyword">if</span> (used[x])</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">			<span class="keyword">if</span> (!--init[to[i]]) q[++r] = to[i];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为代码太长了，所以 Java 、 JavaScript 和 Python 3 就不打了。<del>其实就是懒</del></p>
<p>因此代码速度的比较也是不存在的。</p>
<h1 id="E-Runaway-to-a-Shadow"><a href="#E-Runaway-to-a-Shadow" class="headerlink" title="E. Runaway to a Shadow"></a>E. Runaway to a Shadow</h1><p>计算几何？<span class="meiryo">さようなら。</span></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> python </tag>
            
            <tag> java </tag>
            
            <tag> codeforces </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo-generator-search 更好的搜索引擎]]></title>
      <url>/2017/10/08/hexo-generator-search-%E6%9B%B4%E5%A5%BD%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间发现了 github 上的一个 hexo 站内搜索插件 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a>。<br>于是我在主题中新建了一个 <code>/search</code> 页面，但在之后的测试搜索中发现了各种问题。<br>于是折腾了两个晚上终于是把搜索功能搞好了。<br>总结一下问题和方法。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li><p><strong>是否支持正则表达式不清楚</strong></p>
<p>比如说你搜索 <code>|</code> 会直接爆炸。</p>
</li>
<li><p><strong>HTML 转义字符会萎掉</strong></p>
<p>比如说你搜索 <code>&amp;</code> 会搜出 <code>&amp;lt;</code> 和 <code>&amp;gt;</code>。</p>
</li>
<li><p><strong>无法让用户选择是否忽略大小写</strong></p>
<p><del>虽然这点没卵用但是有总比没有显得逼格高一点</del></p>
</li>
</ol>
<a id="more"></a>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>针对上述的问题我们来进行魔改。</p>
<ol>
<li><p>加一个支持选择是否使用正则表达式的按钮</p>
</li>
<li><p>将输入的字符串进行一次 HTML 转义然后再匹配</p>
</li>
<li><p>同 1 加一个按钮</p>
</li>
</ol>
<p>这样我们的初步功能就写好了。</p>
<p>然而还有一些优化的地方</p>
<ol>
<li><p>搜 <code>|</code> 将会返回所有的页面。</p>
<p>用 <code>regex.test(&#39;&#39;)</code> 来进行特判。</p>
</li>
<li><p>搜 <code>&amp;??</code> 会将原文中的 <code>&amp;</code> 匹配成 <code>&amp;;</code></p>
<p>将正则表达式中所有满足 <code>/&amp;[^;]*;/g</code> 的前后各加一个括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">keywords.forEach(<span class="function">(<span class="params">s, i</span>) =&gt;</span> keywords[i] = s.replace(<span class="regexp">/&amp;[^;]*;/gi</span>, (r) =&gt; <span class="string">'('</span>+r+<span class="string">')'</span>))</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后清楚的区分 <code>string.indexOf(string)</code> 和 <code>string.match(regular)</code> 两个方法就行了。</p>
<h2 id="第一次解决代码"><a href="#第一次解决代码" class="headerlink" title="第一次解决代码"></a>第一次解决代码</h2><p><strong>代码：<a href="https://github.com/swwind/roigu/blob/fdafd29781a6a2a53f216901ba3fdd0ef6da7c99/source/js/search.js" target="_blank" rel="external">防止占版面</a></strong></p>
<p>才过去了一天不到，我又发现了问题：<br>搜 <code>amp</code> 会把所有的 <code>&amp;</code> 转换成 <code>&amp;amp;</code>. . .</p>
<p>一气之下我就<del>颓废了一个下午</del>把它修好了。</p>
<p>现在再出问题我就去吃 htr 了！<del>flag</del></p>
<h2 id="第二次解决代码"><a href="#第二次解决代码" class="headerlink" title="第二次解决代码"></a>第二次解决代码</h2><p><strong>代码：<a href="https://github.com/swwind/roigu/blob/7616e37e01b40d280ce3253b6f865ca1ebd4c396/source/js/search.js" target="_blank" rel="external">防止占版面</a></strong></p>
<p>当天晚上就又发现问题了…<br>当我尝试搜索 <code>-</code> 时就死循环了…</p>
<p>后来我发现是因为不开正则表达式的时候默认是以 <code>/[\s\-]+/g</code> 来分割关键字的。。。<br>然后分割出了一个空集。。。<br>然后我在后面 <code>while(find) replace</code> 的时候就死循环了。。。</p>
<p>Oh motherf**ker…</p>
<p>然后我又改了好久。。。</p>
<h2 id="目前最终代码"><a href="#目前最终代码" class="headerlink" title="目前最终代码"></a>目前最终代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Copy form https://github.com/PaicHyperionDev/hexo-generator-search</span></div><div class="line"><span class="comment">// I fixed lots of bugs ......</span></div><div class="line"><span class="comment">// Who can tell me who wrote this f**king code???</span></div><div class="line"><span class="comment">// Now there will not be any bugs... If you find out one, please tell me.</span></div><div class="line"><span class="comment">// it need jquery</span></div><div class="line"><span class="comment">// path       -&gt; search.xml 的位置</span></div><div class="line"><span class="comment">// search_id  -&gt; 搜索输入的 文本框 的 id</span></div><div class="line"><span class="comment">// content_id -&gt; 搜索输出的 div 的 id</span></div><div class="line"><span class="comment">// regex_id   -&gt; 是否正则表达式的 checkbox 的 id</span></div><div class="line"><span class="comment">// search_id  -&gt; 是否忽略大小写的 checkbox 的 id</span></div><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id, regex_id, case_id</span>) </span>&#123;</div><div class="line"><span class="meta">	'use strict'</span>;</div><div class="line">	<span class="built_in">document</span>.getElementById(content_id).innerHTML = <span class="string">'&lt;p class="search-failed"&gt;Preloading ...&lt;/p&gt;'</span></div><div class="line">	<span class="keyword">var</span> randomString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10000</span>)+<span class="number">545155</span>) </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">htmlEncode</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $(<span class="string">'&lt;div/&gt;'</span>).text(value).html();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">htmlDecode</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> $(<span class="string">'&lt;div/&gt;'</span>).html(value).text();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">var</span> fuck = randomString();</div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>: path,</div><div class="line">		<span class="attr">dataType</span>: <span class="string">"xml"</span>,</div><div class="line">		<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</div><div class="line">			<span class="comment">// get the contents from search data</span></div><div class="line">			<span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">return</span> &#123;</div><div class="line">					<span class="attr">title</span>: $(<span class="string">"title"</span>, <span class="keyword">this</span>).text(),</div><div class="line">					<span class="attr">content</span>: $(<span class="string">"content"</span>, <span class="keyword">this</span>).text(),</div><div class="line">					<span class="attr">url</span>: $(<span class="string">"url"</span>, <span class="keyword">this</span>).text()</div><div class="line">				&#125;;</div><div class="line">			&#125;).get();</div><div class="line">			<span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">			<span class="keyword">var</span> $regex = <span class="built_in">document</span>.getElementById(regex_id);</div><div class="line">			<span class="keyword">var</span> $<span class="keyword">case</span> = <span class="built_in">document</span>.getElementById(case_id)</div><div class="line">			<span class="keyword">if</span> (!$input || !$regex || !$<span class="keyword">case</span>) <span class="keyword">return</span>;</div><div class="line">			<span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line">			<span class="keyword">var</span> $fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				<span class="keyword">var</span> str = <span class="string">'&lt;ul class="search-result-list"&gt;'</span>;                </div><div class="line">				<span class="keyword">var</span> keywords = $regex.checked</div><div class="line">					? [$input.value.trim()]</div><div class="line">					: ($<span class="keyword">case</span>.checked</div><div class="line">						? $input.value.trim().toLowerCase()</div><div class="line">						: $input.value.trim()).split(<span class="regexp">/\s+/</span>);</div><div class="line">				<span class="keyword">if</span> ($input.value.trim().length &lt;= <span class="number">0</span>)</div><div class="line">					<span class="keyword">return</span> $resultContent.innerHTML = <span class="string">''</span>;</div><div class="line">				<span class="keyword">if</span> ($regex.checked)</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						<span class="keyword">var</span> k = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keywords[<span class="number">0</span>]);</div><div class="line">						<span class="keyword">if</span> (k.test(<span class="string">''</span>) || k.test(<span class="string">' '</span>))</div><div class="line">							<span class="keyword">return</span> $resultContent.innerHTML = <span class="string">'&lt;p class="search-failed"&gt;Everything is Matched&lt;/p&gt;'</span>;</div><div class="line">					&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">						<span class="keyword">return</span> $resultContent.innerHTML = <span class="string">'&lt;p class="search-failed"&gt;Regular Was Wrong&lt;/p&gt;'</span>;</div><div class="line">					&#125;</div><div class="line">				$resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">				<span class="keyword">var</span> flag = <span class="number">0</span>;</div><div class="line">				<span class="comment">// perform local searching</span></div><div class="line">				datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">					<span class="keyword">var</span> isMatch = <span class="literal">false</span>;</div><div class="line">					<span class="keyword">var</span> content_index = [];                                                       </div><div class="line">					<span class="keyword">if</span> (!data.title || data.title.trim() === <span class="string">''</span>) &#123;</div><div class="line">						data.title = <span class="string">"Untitled"</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">var</span> data_title = $<span class="keyword">case</span>.checked</div><div class="line">						? data.title.trim().toLowerCase()</div><div class="line">						: data.title.trim();     </div><div class="line">					<span class="keyword">var</span> data_content = $<span class="keyword">case</span>.checked</div><div class="line">						? data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase()</div><div class="line">						: data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</div><div class="line">					data_title = htmlDecode(data_title);</div><div class="line">					data_content = htmlDecode(data_content);</div><div class="line">					<span class="keyword">var</span> data_url = data.url;</div><div class="line">					<span class="keyword">var</span> index_title = <span class="number">-1</span>;</div><div class="line">					<span class="keyword">var</span> index_content = <span class="number">-1</span>;</div><div class="line">					<span class="keyword">var</span> first_occur = <span class="number">-1</span>;</div><div class="line">					<span class="comment">// only match artiles with not empty contents</span></div><div class="line">					<span class="keyword">if</span> (data_content !== <span class="string">''</span>) &#123;</div><div class="line">						keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</div><div class="line">							<span class="keyword">if</span> ($regex.checked) &#123;</div><div class="line">								<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, $<span class="keyword">case</span>.checked ? <span class="string">'i'</span> : <span class="string">''</span>);</div><div class="line">								index_title = (data_title.match(reg) || &#123;<span class="attr">index</span>:<span class="number">-1</span>&#125;).index;</div><div class="line">								index_content = (data_content.match(reg) || &#123;<span class="attr">index</span>:<span class="number">-1</span>&#125;).index;</div><div class="line">							&#125; <span class="keyword">else</span> &#123;</div><div class="line">								index_title = data_title.indexOf(keyword);</div><div class="line">								index_content = data_content.indexOf(keyword);</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">if</span> (index_title &gt; <span class="number">-1</span> || index_content &gt; <span class="number">-1</span>) &#123;</div><div class="line">								isMatch = <span class="literal">true</span>;</div><div class="line">								<span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">									index_content = <span class="number">0</span>;</div><div class="line">								&#125;</div><div class="line">								<span class="keyword">if</span> (first_occur == <span class="number">-1</span>) &#123;</div><div class="line">									first_occur = index_content;</div><div class="line">								&#125;</div><div class="line">								<span class="comment">// content_index.push(&#123;index_content:index_content, keyword_len:keyword_len&#125;);</span></div><div class="line">							&#125;</div><div class="line">						&#125;);</div><div class="line">					&#125; <span class="keyword">else</span> &#123;</div><div class="line">						isMatch = <span class="literal">false</span>;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">// show search results</span></div><div class="line">					<span class="keyword">if</span> (isMatch) &#123;</div><div class="line">						flag = <span class="number">1</span>;</div><div class="line">						str += <span class="string">'&lt;li&gt;&lt;a href="'</span> + data_url + <span class="string">'"&gt;'</span>;</div><div class="line">						<span class="keyword">var</span> content = data_content;</div><div class="line">						<span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</div><div class="line">							<span class="comment">// cut out 100 characters</span></div><div class="line">							<span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</div><div class="line">							<span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</div><div class="line">							<span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</div><div class="line">								start = <span class="number">0</span>;</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</div><div class="line">								end = <span class="number">100</span>;</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">if</span>(end &gt; content.length)&#123;</div><div class="line">								end = content.length;</div><div class="line">							&#125;</div><div class="line">							<span class="keyword">var</span> match_content = content.substr(start, end); </div><div class="line">							<span class="comment">// highlight all keywords</span></div><div class="line">							keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword</span>) </span>&#123;</div><div class="line">								<span class="keyword">while</span> (fuck.indexOf(keyword) &gt; <span class="number">0</span> || match_content.indexOf(fuck) &gt; <span class="number">0</span></div><div class="line">										|| data_title.indexOf(fuck) &gt; <span class="number">0</span>)</div><div class="line">									fuck = randomString();</div><div class="line">							&#125;)</div><div class="line">							keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>)</span>&#123;</div><div class="line">								<span class="keyword">if</span> ($regex.checked) &#123;</div><div class="line">									match_content = htmlEncode(match_content);</div><div class="line">									data_title = htmlEncode(data_title)</div><div class="line">									keyword = htmlEncode(keyword).replace(<span class="regexp">/&amp;[^;]*;/g</span>, (s) =&gt; <span class="string">'('</span>+s+<span class="string">')'</span>);</div><div class="line">									<span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, $<span class="keyword">case</span>.checked ? <span class="string">"gi"</span> : <span class="string">"g"</span>);</div><div class="line">									match_content = match_content.replace(regS,</div><div class="line">										(s) =&gt; <span class="string">'&lt;span class="search-keyword"&gt;'</span>+s+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">									data_title = data_title.replace(regS,</div><div class="line">										(s) =&gt; <span class="string">'&lt;span class="search-keyword"&gt;'</span>+s+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">								&#125; <span class="keyword">else</span> &#123;</div><div class="line">									<span class="keyword">while</span> (match_content.indexOf(keyword) &gt; <span class="number">-1</span>)</div><div class="line">										match_content = match_content.replace(keyword, fuck + i + fuck);</div><div class="line">									<span class="keyword">while</span> (data_title.indexOf(keyword) &gt; <span class="number">-1</span>)</div><div class="line">										data_title = data_title.replace(keyword, fuck + i + fuck);</div><div class="line">								&#125;</div><div class="line">							&#125;);</div><div class="line">							<span class="keyword">if</span> (!$regex.checked) &#123;</div><div class="line">								<span class="keyword">var</span> faq = <span class="keyword">new</span> <span class="built_in">RegExp</span>(fuck + <span class="string">'\\d+'</span> + fuck, <span class="string">'gi'</span>);</div><div class="line">								data_title = htmlEncode(data_title);</div><div class="line">								match_content = htmlEncode(match_content);</div><div class="line">								<span class="keyword">while</span> (match_content.indexOf(fuck) &gt; <span class="number">-1</span>)</div><div class="line">									match_content = match_content.replace(faq, (s) =&gt;</div><div class="line">										<span class="string">'&lt;span class="search-keyword"&gt;'</span>+htmlEncode(keywords[<span class="built_in">parseInt</span>(s.substr(<span class="number">1</span>, s.length<span class="number">-2</span>))])+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">								<span class="keyword">while</span> (data_title.indexOf(fuck) &gt; <span class="number">-1</span>)</div><div class="line">									data_title = data_title.replace(faq, (s) =&gt;</div><div class="line">										<span class="string">'&lt;span class="search-keyword"&gt;'</span>+htmlEncode(keywords[<span class="built_in">parseInt</span>(s.substr(<span class="number">1</span>, s.length<span class="number">-2</span>))])+<span class="string">'&lt;/span&gt;'</span>);</div><div class="line">							&#125;</div><div class="line">							str += <span class="string">'&lt;p class="search-result-title"&gt;'</span> + data_title + <span class="string">'&lt;/p&gt;'</span></div><div class="line">							str += <span class="string">'&lt;p class="search-result"&gt;'</span> + match_content + <span class="string">'...&lt;/p&gt;'</span></div><div class="line">						&#125;</div><div class="line">						str += <span class="string">"&lt;/a&gt;&lt;/li&gt;"</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line">				str += <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">				$resultContent.innerHTML = flag ? str : <span class="string">'&lt;p class="search-failed"&gt;Nothing Matched&lt;/p&gt;'</span>;</div><div class="line">			&#125;</div><div class="line">			$input.addEventListener(<span class="string">'input'</span>, $fun);</div><div class="line">			$regex.addEventListener(<span class="string">'click'</span>, $fun);</div><div class="line">			$<span class="keyword">case</span>.addEventListener(<span class="string">'click'</span>, $fun);</div><div class="line">			$resultContent.innerHTML = <span class="string">''</span>;</div><div class="line">			<span class="keyword">if</span> ($input.value) $fun();</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>贝爷保佑，永无 BUG<br><span class="meiryo">お願い。。</span></p>
]]></content>
      
        <categories>
            
            <category> 颓废 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo Roigu 主题中文使用说明]]></title>
      <url>/2017/10/04/Hexo-Roigu-%E4%B8%BB%E9%A2%98%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h1 id="预览图"><a href="#预览图" class="headerlink" title="预览图"></a>预览图</h1><p><img src="/img/roigu-theme-yulan.png" alt="预览图"></p>
<h1 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h1><p>完整的主题应该是这样子的：<a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">roigu</div><div class="line">│  .gitignore</div><div class="line">│  LICENSE</div><div class="line">│  README.md</div><div class="line">│  _config.yml</div><div class="line">│</div><div class="line">├─languages</div><div class="line">│      default.yml</div><div class="line">│      ja.yml</div><div class="line">│      zh-CN.yml</div><div class="line">│</div><div class="line">├─layout</div><div class="line">│  │  archive.ejs</div><div class="line">│  │  category.ejs</div><div class="line">│  │  index.ejs</div><div class="line">│  │  layout.ejs</div><div class="line">│  │  page.ejs</div><div class="line">│  │  post.ejs</div><div class="line">│  │  tag.ejs</div><div class="line">│  │</div><div class="line">│  ├─_partial</div><div class="line">│  │  │  after_footer.ejs</div><div class="line">│  │  │  archive.ejs</div><div class="line">│  │  │  article.ejs</div><div class="line">│  │  │  footer.ejs</div><div class="line">│  │  │  head.ejs</div><div class="line">│  │  │  header.ejs</div><div class="line">│  │  │  sidebar.ejs</div><div class="line">│  │  │  tags.ejs</div><div class="line">│  │  │  categories.ejs</div><div class="line">│  │  │</div><div class="line">│  │  └─post</div><div class="line">│  │          article.ejs</div><div class="line">│  │          catetags.ejs</div><div class="line">│  │          comment.ejs</div><div class="line">│  │</div><div class="line">│  └─_widget</div><div class="line">│          hitokoto.ejs</div><div class="line">│          links.ejs</div><div class="line">│</div><div class="line">└─source</div><div class="line">    ├─css</div><div class="line">    │  │  style.styl</div><div class="line">    │  │  vars.styl</div><div class="line">    │  │</div><div class="line">    │  └─_partial</div><div class="line">    │          fonts.styl</div><div class="line">    │          header.styl</div><div class="line">    │</div><div class="line">    ├─font</div><div class="line">    │      fontello.ttf</div><div class="line">    │</div><div class="line">    ├─img</div><div class="line">    │      author.jpg</div><div class="line">    │</div><div class="line">    └─js</div><div class="line">            jquery-2.0.3.min.js</div><div class="line">            Valine.min.js</div></pre></td></tr></table></figure>
<p>以上文件夹目录树由 Windows 自带的 tree 指令生成。（<code>tree /f</code>）</p>
<p>配置文件<code>_config.yml</code>注释都写在里边，自己看去。</p>
<h1 id="页面的开关"><a href="#页面的开关" class="headerlink" title="页面的开关"></a>页面的开关</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">layout: post|page // 必须，页面类型</div><div class="line">title: The title of the article // 必须，页面标题</div><div class="line">date: 2017-10-04 20:39:36 // 必须，发表时间</div><div class="line">tags: tag | [tag1, tag2, ..., tagx] // 可选，标签，默认为空</div><div class="line">categories: category | [category1, category2, ..., categoryx] // 可选，分类，默认为空</div><div class="line">comments: true // 可选，评论，默认为 true</div><div class="line">toc: true // 可选，文章目录，默认为 true</div><div class="line">mathjax: true // 可选，是否开启数学公式，默认为 true</div><div class="line">---</div></pre></td></tr></table></figure>
<h2 id="关于-MathJax-与-Markdown-冲突的解决办法"><a href="#关于-MathJax-与-Markdown-冲突的解决办法" class="headerlink" title="关于 MathJax 与 Markdown 冲突的解决办法"></a>关于 MathJax 与 Markdown 冲突的解决办法</h2><p>我们可以通过修改 Markdown 来实现对 MathJax 的支持。<br>具体方法如下：</p>
<ol>
<li><p>找到并打开<code>./node_modules/marked/lib/marked.js</code>。</p>
</li>
<li><p>找到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure>
<p>将其替换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">escape</span>: <span class="regexp">/^\\([`*\[\]()# +\-.!_&gt;])/</span>,</div></pre></td></tr></table></figure>
<p>这一步是取消了 Markdown 对<code>\\</code>、<code>\{</code>、<code>\}</code>的转义。</p>
</li>
<li><p>找到</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">em: <span class="regexp">/^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure>
<p>将其替换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</div></pre></td></tr></table></figure>
<p>这一步取消了对<code>_Italic_</code>的转义，若要继续使用斜体请使用<code>*Italic*</code>。</p>
</li>
</ol>
<h1 id="特殊页面"><a href="#特殊页面" class="headerlink" title="特殊页面"></a>特殊页面</h1><h2 id="tags-标签云"><a href="#tags-标签云" class="headerlink" title="tags 标签云"></a>tags 标签云</h2><p>输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo n page &quot;tags&quot;</div></pre></td></tr></table></figure>
<p>之后打开<code>/source/tags/index.md</code>，将其改为如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">layout: tags</div><div class="line">---</div></pre></td></tr></table></figure>
<p>之后就可以在<code>localhost:4000/tags/</code>看到标签云页面了。（<a href="/tags">预览</a>）</p>
<h2 id="categories-分类云"><a href="#categories-分类云" class="headerlink" title="categories 分类云"></a>categories 分类云</h2><p>输入以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo n page &quot;categories&quot;</div></pre></td></tr></table></figure>
<p>之后打开<code>/source/categories/index.md</code>，将其改为如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">layout: categories</div><div class="line">---</div></pre></td></tr></table></figure>
<p>之后就可以在<code>localhost:4000/categories/</code>看到标签云页面了。（<a href="/categories">预览</a>）</p>
<h2 id="search-站内搜索"><a href="#search-站内搜索" class="headerlink" title="search 站内搜索"></a>search 站内搜索</h2><p>如果要启用的话请先导入<code>hexo-generator-search</code>插件。<br>具体方法如下：</p>
<ol>
<li><p>在 hexo 博客的根目录下输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
</li>
<li><p>打开根目录中的 <code>_config.yml</code>，添加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">search:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></div><div class="line"><span class="attr">  field:</span> <span class="string">post|page|all</span></div></pre></td></tr></table></figure>
<p>其中的<code>field</code>表示搜索的范围，<code>post</code>为全部文章，<code>page</code>为全部页面，<code>all</code>包括了<code>post</code>和<code>page</code>。</p>
</li>
<li><p>在根目录输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo n page <span class="string">"search"</span></div></pre></td></tr></table></figure>
</li>
<li><p>打开 /source/search.md，将其改为如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">layout: search</div><div class="line"><span class="section">mathjax: false</span></div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后你就可以在<code>/search</code>页面搜索了。（<a href="/search">预览</a>）<br>具体可以参见 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">https://github.com/PaicHyperionDev/hexo-generator-search</a></p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="为什么是整个博客的色调是黑白的"><a href="#为什么是整个博客的色调是黑白的" class="headerlink" title="为什么是整个博客的色调是黑白的"></a>为什么是整个博客的色调是黑白的</h2><p><strong>答：</strong>因为我不会配色。每次配出来的页面都惨不忍睹。。。</p>
<h2 id="为什么和-Jacman-这个主题这么像"><a href="#为什么和-Jacman-这个主题这么像" class="headerlink" title="为什么和 Jacman 这个主题这么像"></a>为什么和 Jacman 这个主题这么像</h2><p><strong>答：</strong>因为我是研究 Jacman 的源码进行学习和改编的，所以有些地方有点像很正常。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[速学 Javascript]]></title>
      <url>/2017/09/22/%E9%80%9F%E5%AD%A6-Javascript/</url>
      <content type="html"><![CDATA[<h1 id="先决要求"><a href="#先决要求" class="headerlink" title="先决要求"></a>先决要求</h1><p>对以下内容有一定的了解：</p>
<ul>
<li>C/C++/Java（必须有深入的了解）</li>
<li>HTML（有点了解即可）</li>
</ul>
<h2 id="运行方法"><a href="#运行方法" class="headerlink" title="运行方法"></a>运行方法</h2><p>你可以在此页面中按<code>F12</code>打开开发者工具，切换到控制台（console），然后直接输入代码即可运行。<br>别跟我说你是 IE 内核的浏览器就行了。<br>如果你找不到控制台的话自己写个网页加个 <code>&lt;script&gt;</code> 标签即可。<br><a id="more"></a></p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="变量的定义与删除"><a href="#变量的定义与删除" class="headerlink" title="变量的定义与删除"></a>变量的定义与删除</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>使用<code>var</code>关键字进行定义。<br>重复的定义不会清空原来变量的值。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x; <span class="comment">// 定义了一个变量 x</span></div><div class="line"><span class="keyword">var</span> y = <span class="number">2</span>; <span class="comment">// 给 y 赋初值为 2</span></div><div class="line"><span class="built_in">console</span>.log(y); <span class="comment">// 此函数用来输出内容到控制台，自动换行</span></div><div class="line">z = <span class="number">6</span>; <span class="comment">// 其实有赋初值的话可以不用 var 关键字，但我不建议这么做</span></div><div class="line"><span class="keyword">var</span> k = z + y; <span class="comment">// 运算 z+y 并将值赋给 k</span></div><div class="line"><span class="built_in">console</span>.log(k) <span class="comment">// 其实每条语句后面不一定要用分号，但在一些容易出问题的地方还是加上比较好</span></div><div class="line"><span class="keyword">var</span> k</div><div class="line"><span class="built_in">console</span>.log(k) <span class="comment">// k 的值不会被改变</span></div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">2</div><div class="line">8</div><div class="line">8</div></pre></td></tr></table></figure></p>
<h3 id="关于删除变量"><a href="#关于删除变量" class="headerlink" title="关于删除变量"></a>关于删除变量</h3><p>你可以使用<code>delete</code>关键字来删除变量。<br>如果成功删除变量<code>delete</code>关键字会返回<code>true</code>，否则返回<code>false</code>。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="string">'fangbo is our red sun'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> x)</div><div class="line"><span class="built_in">console</span>.log(x)</div></pre></td></tr></table></figure></p>
<p><strong>运行输出（Firefox）：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">true</div><div class="line">undefined // undefined 的意思是变量 x 未定义</div></pre></td></tr></table></figure></p>
<p><strong>运行输出（Chrome）：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">false</div><div class="line">fangbo is our red sun</div></pre></td></tr></table></figure></p>
<p>至于为什么在不同的浏览器中有不同的结果，请参阅<a href="http://blog.sina.com.cn/s/blog_54da57aa01012z64.html" target="_blank" rel="external">青竹的博客</a>。并且尽量不要使用这个关键字（反正一般也用不到）。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>你在定义变量的时候不需要指定类型，Javascript拥有<strong>动态类型</strong>。<br>你可以使用<code>typeof</code>关键字来获取变量的类型。<br>如果你没有给一个变量赋过值，那么他的类型将会是<code>undefined</code>。<br><code>typeof</code>关键字本身的返回值类型是<code>string</code>。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> kkk</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> kkk) <span class="comment">// undefined</span></div><div class="line"></div><div class="line">kkk = <span class="string">"I love bilibili"</span> <span class="comment">// 赋值字符串，单双引号都可以，于是没有 char 这个概念</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> kkk) <span class="comment">// string</span></div><div class="line"></div><div class="line">kkk = <span class="number">3</span> <span class="comment">// 赋值数字</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> kkk) <span class="comment">// number</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> kkk) <span class="comment">// string</span></div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">undefined</div><div class="line">string</div><div class="line">number</div><div class="line">string</div></pre></td></tr></table></figure></p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Javascript 中用<code>function</code>关键字来定义函数。</p>
<h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>Javascript 中定义函数有3种方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="comment">// func 为程序名称，括号内的是参数。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> a + <span class="string">' '</span> + <span class="keyword">typeof</span> b); <span class="comment">// 使用加号连接字符串</span></div><div class="line">	<span class="built_in">console</span>.log(a + <span class="string">' '</span> + b); <span class="comment">// 只要加法的其中一项是字符串，其结果就是字符串</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 下面两种和第一种等效</span></div><div class="line"><span class="comment">// 变量也可以是函数</span></div><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> a + <span class="string">' '</span> + <span class="keyword">typeof</span> b);</div><div class="line">	<span class="built_in">console</span>.log(a + <span class="string">' '</span> + b);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这是 lambda 表达式</span></div><div class="line"><span class="keyword">var</span> func = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> a + <span class="string">' '</span> + <span class="keyword">typeof</span> b);</div><div class="line">	<span class="built_in">console</span>.log(a + <span class="string">' '</span> + b);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>在调用函数的时候不必写满所有参数，此时定义时多余的参数将会是 undefined。<br>当然也可以多写参数，多余的参数将被忽略。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">func(<span class="number">233</span>, <span class="string">'I love bilibili'</span>);</div><div class="line">func(<span class="literal">false</span>);</div><div class="line">func(<span class="number">123</span>, <span class="number">345</span>, <span class="number">567</span>);</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">number string</div><div class="line">233 I love bilibili</div><div class="line"></div><div class="line">boolean undefined</div><div class="line">false undefined</div><div class="line"></div><div class="line">number number</div><div class="line">123 345</div></pre></td></tr></table></figure></p>
<p>如果你要定义一个不定参数数量的函数，请使用<code>function_name.arguments</code>来获取所有参数组成的数组。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = print.arguments;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> args);</div><div class="line">	<span class="comment">// for 语句和 C/C++/Java 相同</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; args.length; i++)</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'args['</span> + i + <span class="string">'] = '</span> + args[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(<span class="number">2325</span>, <span class="number">35235</span>, <span class="number">23623</span>, <span class="number">6</span>, <span class="number">243</span>, <span class="number">6</span>, <span class="number">543</span>, <span class="number">6</span>);</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">object</div><div class="line">args[0] = 2325</div><div class="line">args[1] = 35235</div><div class="line">args[2] = 23623</div><div class="line">args[3] = 6</div><div class="line">args[4] = 243</div><div class="line">args[5] = 6</div><div class="line">args[6] = 543</div><div class="line">args[7] = 6</div></pre></td></tr></table></figure></p>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>使用<code>return</code>关键字返回函数返回值。<br><code>return</code>后面的参数也是可选的，如果没有返回任何东西函数的返回值将是<code>undefined</code>。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a &gt; b)</div><div class="line">		<span class="keyword">return</span> a;</div><div class="line">	<span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(func(<span class="number">56</span>, <span class="number">34</span>));</div><div class="line"><span class="built_in">console</span>.log(func(<span class="number">34</span>, <span class="number">56</span>));</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">56</div><div class="line">undefined</div></pre></td></tr></table></figure></p>
<h3 id="函数内变量的作用域"><a href="#函数内变量的作用域" class="headerlink" title="函数内变量的作用域"></a>函数内变量的作用域</h3><p>在函数里面定义的变量的作用域仅在函数内部，函数返回后当即失效。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> x = <span class="number">2</span>;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'In function: '</span> + <span class="keyword">typeof</span> x);</div><div class="line">&#125;</div><div class="line">func();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Out of function: '</span> + <span class="keyword">typeof</span> x);</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">In function: number</div><div class="line">Out of function: undefined</div></pre></td></tr></table></figure></p>
<p>函数可以调用外部的变量。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="built_in">console</span>.log(x);</div><div class="line"><span class="comment">// 可以用括号把匿名函数括起来，并在后面用小括号加参数进行调用。</span></div><div class="line"><span class="comment">// 但这样做基本上只是为了新开一个空间防止变量名冲突。</span></div><div class="line"><span class="comment">// 这样使用时注意前面必须使用分号隔开，否则将会编译错误。</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">	x = a;</div><div class="line">&#125;)(<span class="number">52</span>);</div><div class="line"><span class="built_in">console</span>.log(x);</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">0</div><div class="line">52</div></pre></td></tr></table></figure></p>
<p>至此，我们愉快地学完了基础部分。<br>你现在是不是这副表情？<br><img src="/img/rscl.jpg" alt="rscl"></p>
<h1 id="Javascript-对象"><a href="#Javascript-对象" class="headerlink" title="Javascript 对象"></a>Javascript 对象</h1><blockquote>
<p>JavaScript 中的所有事物都是对象：字符串、数字、数组、日期，等等。<br>在 JavaScript 中，对象是拥有属性和方法的数据。</p>
<p class="speaker"><a href="http://www.w3school.com.cn/js/js_obj_intro.asp" target="_blank" rel="external">w3school</a></p>

</blockquote>
<p>其实 Javascript Object 和 C/C++/Java 中的<code>Map&lt;key, value&gt;</code>很像。<br>Javascript 中的元素可以用<code>object_name.key</code>或者<code>object_name[&#39;key&#39;]</code>进行存储。<br>如果<code>object_name</code>中没有<code>key</code>这个元素，将会返回<code>undefined</code>，或者你可以将其赋值。<br>具体见如下代码。</p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> szb = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">szb.name = <span class="string">"SHENZHEBEI"</span></div><div class="line">szb.type = <span class="string">"dalao"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> szb.orz)</div><div class="line">szb.orz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'orz '</span> + <span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line">szb.orz()</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">undefined</div><div class="line">orz SHENZHEBEI</div></pre></td></tr></table></figure></p>
<p>有一种方便一点的定义方法。使用如下形式：<code>{key1:value1,key2:value2,...,keyn:valuen}</code>。<br>关于逗号的使用方法：逗号是将每个键值对分开来的符号，你只需要在每两个键值对之间加上逗号即可。<br><del>虽然在最后一项的后面加上逗号也不会出错</del></p>
<p><strong>样例代码：</strong><br><figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> szb = &#123;</div><div class="line">	<span class="attr">name</span>: <span class="string">"SHENZHEBEI"</span>,</div><div class="line">	<span class="attr">type</span>: <span class="string">"dalao"</span>,</div><div class="line">	<span class="attr">orz</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'orz '</span> + <span class="keyword">this</span>.name)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">szb.orz()</div></pre></td></tr></table></figure></p>
<p><strong>运行输出：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">orz SHENZHEBEI</div></pre></td></tr></table></figure></p>
<p>然后、、、好像没了？？？<br><img src="/img/huaji.png" alt="huaji"></p>
<p>现在你应该能看懂任意一份 Javascript 代码了吧。</p>
<p>关于类型转换、自带函数、HTML 关联、jQuery 等东西还请自行 google。<br>（其实 <a href="http://www.w3school.com.cn/" target="_blank" rel="external">w3school</a> 的确是个不错的网站）<br>じゃ、さようなら。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷 P1726 上白泽慧音]]></title>
      <url>/2017/09/18/%E6%B4%9B%E8%B0%B7-P1726-%E4%B8%8A%E7%99%BD%E6%B3%BD%E6%85%A7%E9%9F%B3/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在幻想乡，上白泽慧音是以知识渊博闻名的老师。春雪异变导致人间之里的很多道路都被大雪堵塞，使有的学生不能顺利地到达慧音所在的村庄。因此慧音决定换一个能够聚集最多人数的村庄作为新的教学地点。人间之里由N个村庄（编号为$1…N$）和$M$条道路组成，道路分为两种一种为单向通行（<del>一方通行</del>）的，一种为双向通行的，分别用$1$和$2$来标记。如果存在由村庄$A$到达村庄$B$的通路，那么我们认为可以从村庄$A$到达村庄$B$，记为$(A,B)$。当$(A,B)$和$(B,A)$同时满足时，我们认为$A$，$B$是絶対连通的，记为$&lt;A,B&gt;$。絶対连通区域是指一个村庄的集合，在这个集合中任意两个村庄$X$,$Y$都满足$&lt;X,Y&gt;$。现在你的任务是，找出最大的絶対连通区域，并将这个絶対连通区域的村庄按编号依次输出。若存在两个最大的，输出字典序最小的，比如当存在$1,3,4$和$2,5,6$这两个最大连通区域时，输出的是$1,3,4$。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第$1$行：两个正整数$N,M$<br>第$2…M+1$行：每行三个正整数$a,b,t$，$t = 1$表示存在从村庄$a$到$b$的单向道路，$t = 2$表示村庄$a,b$之间存在双向通行的道路。保证每条道路只出现一次。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>第$1$行：$1$个整数，表示最大的絶対连通区域包含的村庄个数。<br>第$2$行：若干个整数，依次输出最大的絶対连通区域所包含的村庄编号。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5 5<br>1 2 1<br>1 3 2<br>2 4 2<br>5 1 2<br>3 5 1</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>3<br>1 3 5</p>
<h1 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h1><p>对于$60\%$的数据：$N \leq 200$且$M \leq 10,000$<br>对于$100\%$的数据：$N \leq 5,000$且$M \leq 50,000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>我发誓这是我最后一次抄Tarjan的模板了。<span class="hide"><del>flag</del></span><br><del>话说上白沢慧音是谁啊</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> head[N], nxt[N&lt;&lt;<span class="number">1</span>], to[N&lt;&lt;<span class="number">1</span>], cnt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x]; head[x] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> dfn[N], low[N], tot, blo[N], bnt, que[N], qnt, sz[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	dfn[x] = low[x] = ++tot;</div><div class="line">	que[++qnt] = x;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span> (!dfn[to[i]]) tarjan(to[i]), low[x] = min(low[x], low[to[i]]);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!blo[to[i]]) low[x] = min(low[x], dfn[to[i]]);</div><div class="line">	<span class="keyword">if</span> (low[x] == dfn[x] &amp;&amp; ++bnt)</div><div class="line">		<span class="keyword">while</span> (que[qnt+<span class="number">1</span>] != x)</div><div class="line">			blo[que[qnt--]] = bnt, sz[bnt]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</div><div class="line">		<span class="keyword">int</span> x = read(), y = read(), op = read();</div><div class="line">		<span class="keyword">if</span> (op == <span class="number">2</span>) ins(x, y), ins(y, x);</div><div class="line">		<span class="keyword">else</span> ins(x, y);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span> (!dfn[i]) tarjan(i);</div><div class="line">	<span class="keyword">int</span> mx = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span> (sz[blo[i]] &gt; sz[mx]) mx = blo[i];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz[mx]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span> (blo[i] == mx) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tarjan </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[王强路的模拟赛T2 haiku]]></title>
      <url>/2017/09/16/%E7%8E%8B%E5%BC%BA%E8%B7%AF%E7%9A%84%E6%A8%A1%E6%8B%9F%E8%B5%9BT2-haiku/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给定一个长度为$N$的序列$a$，序列中的每个数都可以是$1\sim10$中的某一个，总共有$10^N$种序列，现在给出$N,X,Y,Z$，问有多少个长度为$N$的序列满足其有四个下标$x,y,z,w$使得$a[x]+a[x+1]+…+a[y-1]=X$，$a[y]+a[y+1]+…+a[z-1]=Y$，$a[z]+a[z+1]+…+a[w]=Z$。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3 5 7 5</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1</p>
<h1 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h1><p>在这组样例中，只存在一组合法的序列，即$a[] = [5,7,5]$。<br><a id="more"></a></p>
<h1 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h1><p>$3 \le N \le 40$。<br>$1 \le X \le 5$，$1 \le Y \le 7$，$1 \le Z \le 5$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>神题。。首先膜拜<a href="http://blog.csdn.net/zhouyuyang233/" target="_blank" rel="external">zyy大佬</a>用AC自动机水了此题。<br><img src="/img/momomo.gif" alt="momomo"><br><del>P.S.王强路应该不会说什么的对吧</del><br>直接说正解吧。。<br>很容易想到的方法枚举所有成立的序列$a[x],a[x+1],a[x+2],…,a[z-1],a[z]$，然后计算其余位数随便取的方案数就行了。<br>但这样会有重复的出现。<br>注意到$n$、$x$、$y$、$z$都很小，于是我们可以从第一位开始dfs枚举每一位取什么。<br>如果以当前位为$z$，前面有符合条件的$x$和$y$的话，就可以直接加上后面几位随便取的方案数并返回。<br>这样就不会有重复计算的了。<br>那么问题就在于如何快速地算出有没有符合条件的$x$、$y$、$z$了。<br>标算提供了一种状压的思路。<br>我们可以用<code>&quot;1&quot;</code>来代替1，<code>&quot;10&quot;</code>来代替2，<code>&quot;100&quot;</code>来代替3，以此类推。<br>拿样例$x=5,y=7,z=5$来说，<br>这样替换一个符合条件的数组<code>[2, 3, 2, 5, 1, 4]</code>即为<code>&quot;10100101000011000&quot;</code>。<br>而$xyz$组成的数组替换后即为<code>&quot;10000100000010000&quot;</code>。<br>可以注意到，两个$01$串的<code>&amp;</code>值即为$xyz$组成的$01$串。<br>$$<br>\begin{array}<br>{}&amp;{10100101000011000}\\<br>{\&amp;}&amp;{10000100000010000}\\<br>\hline<br>{}&amp;{10000100000010000}<br>\end{array}<br>$$<br>这样就可以愉快地在$O(1)$的时间里判断是否满足条件啦。<br>具体可以看我程序。<br><img src="/img/huaji.png" alt="huaji"><br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bits/stdc++.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">0</span>)||(ch=getchar());</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> f?x:-x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> f[<span class="number">41</span>][<span class="number">1</span>&lt;&lt;<span class="number">17</span>], p[<span class="number">41</span>];</div><div class="line"><span class="keyword">int</span> n, z, y, x, end_state;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (i == n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (~f[i][j]) <span class="keyword">return</span> f[i][j];</div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">10</span>; k++) &#123;</div><div class="line">		<span class="keyword">int</span> next_state = (j &lt;&lt; k) | (<span class="number">1</span> &lt;&lt; k<span class="number">-1</span>);</div><div class="line">		res += ((next_state &amp; end_state) == end_state)</div><div class="line">			? p[n-i<span class="number">-1</span>] : dfs(i+<span class="number">1</span>, next_state &amp; ((<span class="number">1</span> &lt;&lt; x+y+z) - <span class="number">1</span>));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> f[i][j] = res%mod;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</div><div class="line">	freopen(<span class="string">"haiku.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"haiku.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</div><div class="line">	<span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*<span class="number">5373952</span>);</div><div class="line">	n = read(); x = read(); y = read(); z = read(); p[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">40</span>; i++) p[i] = p[i<span class="number">-1</span>]*<span class="number">10l</span>l%mod;</div><div class="line">	end_state = (<span class="number">1</span> &lt;&lt; x+y+z<span class="number">-1</span>) | (<span class="number">1</span> &lt;&lt; y+z<span class="number">-1</span>) | (<span class="number">1</span> &lt;&lt; z<span class="number">-1</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(<span class="number">0</span>, <span class="number">0</span>));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 状态压缩 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4884: [Lydsy2017年5月月赛]太空猫]]></title>
      <url>/2017/06/22/BZOJ-4884-Lydsy2017%E5%B9%B45%E6%9C%88%E6%9C%88%E8%B5%9B-%E5%A4%AA%E7%A9%BA%E7%8C%AB/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>太空猫(SpaceCat)是一款画面精致、玩法有趣的休闲游戏，你需要控制一只坐在迷你飞碟上的猫咪在太空里不断探索，让大家看看你能飞得多远。游戏地图可以看成一个二维的网格图，上下是两段障碍物。在游戏的一开始，太空猫位于地图最左边的下边界之上，且重力方向向下。<br>在每个时刻，你可以用手指点击屏幕，翻转重力的方向，或者通过遥感控制太空猫往左或往右移动。每次翻转重力方向时，你需要消耗的能量值等于上下底边之间的高度差。在左右移动的时候，太空猫可以下降到对应重力方向更低的位置，但不能往上爬。当然，太空猫也不能穿墙而过。在重力翻转的过程中，直到碰到地面之前，你都不能操控太空猫左右移动。太空猫的终点位于地图的最右端的下底边之上，请计算为了让太空猫到达终点，需要消耗能量的最小值。<br><img src="http://www.lydsy.com/JudgeOnline/upload/201705/vv1.jpg" alt="啦啦啦"></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含一个正整数$n(1\leq n\leq 100000)$，即地图的宽度。<br>第二行包含$n$个正整数$c_1,c_2,…,c_n(2\leq c_i\leq 10^9)$，分别表示每个横坐标对应的上边界的高度。<br>第三行包含$n$个正整数$f_1,f_2,…,f_n(1\leq f_i\lt c_i)$，分别表示每个横坐标对应的下边界的高度。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行一个整数，即最少的能量，若无法到达终点，请输出”-1”。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4<br>3 4 3 2<br>1 2 1 1</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>4</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p> “在左右移动的时候，太空猫【可以】下降到对应重力方向更低的位置”<br>应改为 “太空猫【会】下降到对应重力方向更低的位置”<br>就是说，太空猫在能往下掉的时候不能选择直接飞过去</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>很简单的dp。<br>f[i][0/1]表示彩虹猫在第i个位置停留在上方/下方时的最优解。。<br>先判断一下无解的情况，然后直接转移就行了。<br>40+ms WA就说明你inf设小了。。<del>（别问我怎么知道的）</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;ch==<span class="string">'-'</span>&amp;&amp;(f=<span class="number">1</span>);ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line">ll a[N], b[N];</div><div class="line">ll f[N][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) b[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span>(b[i<span class="number">-1</span>] &gt;= a[i] || a[i<span class="number">-1</span>] &lt;= b[i] || a[i] &lt; a[i<span class="number">-1</span>] &amp;&amp; b[i] &gt; b[i<span class="number">-1</span>])</div><div class="line">			<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>)&amp;<span class="number">0</span>;</div><div class="line">	f[<span class="number">1</span>][<span class="number">0</span>] = a[<span class="number">1</span>]-b[<span class="number">1</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(b[i<span class="number">-1</span>] &gt;= b[i]) f[i][<span class="number">1</span>] = min(f[i<span class="number">-1</span>][<span class="number">1</span>], f[i<span class="number">-1</span>][<span class="number">0</span>]+a[i<span class="number">-1</span>]-b[i<span class="number">-1</span>]);</div><div class="line">		<span class="keyword">else</span> f[i][<span class="number">1</span>] = <span class="number">1e16</span>;</div><div class="line">		<span class="keyword">if</span>(a[i<span class="number">-1</span>] &lt;= a[i]) f[i][<span class="number">0</span>] = min(f[i<span class="number">-1</span>][<span class="number">0</span>], f[i<span class="number">-1</span>][<span class="number">1</span>]+a[i<span class="number">-1</span>]-b[i<span class="number">-1</span>]);</div><div class="line">		<span class="keyword">else</span> f[i][<span class="number">0</span>] = <span class="number">1e16</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, min(f[n][<span class="number">1</span>], f[n][<span class="number">0</span>]+a[n]-b[n]));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[zyy的模拟赛 森破]]></title>
      <url>/2017/06/20/zyy%E7%9A%84%E6%A8%A1%E6%8B%9F%E8%B5%9B-simple/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>大头会求$f[n]\pmod{1e9+7}$，<br>其中$f[0]=1,f[1]=1,f[i]=f[i-1]+f[i-2]$<br>大头觉得这题实在是图样图森破。<br>他想了想，让他们求$\sum_{i=0}^nf[i]\pmod{1e9+7}$，<br>可是大头觉得这题实在还是图样图森破。<br>大头想到这么一道$H_2O$题:<br>求$\sum_{i=0}^nf[i]C_n^i\pmod{1e9+7}$的值<br>大头现在不觉得这道题图样图森破了，于是他把题目交给了你。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行1个数n，含义如题所示 </p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一行一个数，表示答案。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>12</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>75025</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>模拟赛做到了这题，觉得比较巧妙，于是放出来和大家分享一下。<br><del>我想zyy应该不会说什么。。</del><br>首先你如果打表的话就会发现答案其实就是$f[2n]$<br>来证明一下。<br>显然这题要用到二项式定理。<br>$$(a+b)^n = \sum_{i=0}^nC^i_na^{n-i}b^i$$<br>关于二项式定理的证明可以看<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86" target="_blank" rel="external">wiki</a>上的证明，这里就不赘述了。<br>这个式子是不是和要求的式子很像？<br>我们再来看看求斐波那契第i项的做法：<br>设$A=\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}$<br>$$f[i]=A^i[0][0]$$<br>于是我们可以得出以下结论<br>$$\begin{align}原式&amp;=\sum_{i=0}^nC_n^iA^i\\&amp;=(A+1)^n\end{align}$$<br>$1$用单位矩阵$\begin{bmatrix}1&amp;0\\0&amp;1\end{bmatrix}$代替，那么答案就是<br>$$\begin{bmatrix}2&amp;1\\1&amp;1\end{bmatrix}^n$$<br>注意到$A^2$就是$\begin{bmatrix}2&amp;1\\1&amp;1\end{bmatrix}$，所以答案就是<br>$$A^{2n}=f[2n]$$<br>代码就不用了吧。。</p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 矩阵乘法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1177: [Apio2009]Oil]]></title>
      <url>/2017/06/16/BZOJ-1177-Apio2009-Oil/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>采油区域 Siruseri政府决定将石油资源丰富的Navalur省的土地拍卖给私人承包商以建立油井。被拍卖的整块土地为一个矩形区域，被划分为M×N个小块。 Siruseri地质调查局有关于Navalur土地石油储量的估测数据。这些数据表示为M×N个非负整数，即对每一小块土地石油储量的估计值。 为了避免出现垄断，政府规定每一个承包商只能承包一个由K×K块相连的土地构成的正方形区域。 AoE石油联合公司由三个承包商组成，他们想选择三块互不相交的K×K的区域使得总的收益最大。 例如，假设石油储量的估计值如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">1 1 1 1 1 1 1 1 1</div><div class="line">1 1 1 1 1 1 1 1 1</div><div class="line">1 8 8 8 8 8 1 1 1</div><div class="line">1 8 8 8 8 8 1 1 1</div><div class="line">1 8 8 8 8 8 1 1 1</div><div class="line">1 1 1 1 8 8 8 1 1</div><div class="line">1 1 1 1 1 1 8 8 8</div><div class="line">1 1 1 1 1 1 9 9 9</div><div class="line">1 1 1 1 1 1 9 9 9</div></pre></td></tr></table></figure>
<p>如果K = 2, AoE公司可以承包的区域的石油储量总和为100, 如果K = 3, AoE公司可以承包的区域的石油储量总和为208。 AoE公司雇佣你来写一个程序，帮助计算出他们可以承包的区域的石油储量之和的最大值。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入第一行包含三个整数M, N, K，其中M和N是矩形区域的行数和列数，K是每一个承包商承包的正方形的大小（边长的块数）。接下来M行，每行有N个非负整数表示这一行每一小块土地的石油储量的估计值</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出只包含一个整数，表示AoE公司可以承包的区域的石油储量之和的最大值。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>9 9 3<br>1 1 1 1 1 1 1 1 1<br>1 1 1 1 1 1 1 1 1<br>1 8 8 8 8 8 1 1 1<br>1 8 8 8 8 8 1 1 1<br>1 8 8 8 8 8 1 1 1<br>1 1 1 1 8 8 8 1 1<br>1 1 1 1 1 1 8 8 8<br>1 1 1 1 1 1 9 9 9<br>1 1 1 1 1 1 9 9 9</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>208</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>很裸的dp。<br>预先处理好以(i,j)为左上角、右上角、左下角、右下角时整块区域中k*k的最大值以及每行每列的最大值。<br>接着分为六种情况暴力枚举就好了。<br>强迫症的我愣是把他们画了出来。^ω^<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+---+---+---+  +-----------+  +---+-------+</div><div class="line">|   |   |   |  |           |  |   |       |</div><div class="line">|   |   |   |  +-----------+  |   |       |</div><div class="line">|   |   |   |  |           |  |   +-------+</div><div class="line">|   |   |   |  +-----------+  |   |       |</div><div class="line">|   |   |   |  |           |  |   |       |</div><div class="line">+---+---+---+  +-----------+  +---+-------+</div><div class="line"></div><div class="line">+-------+---+  +-----+-----+  +-----------+</div><div class="line">|       |   |  |     |     |  |           |</div><div class="line">|       |   |  |     |     |  +-----+-----+</div><div class="line">+-------+   |  |     |     |  |     |     |</div><div class="line">|       |   |  +-----+-----+  |     |     |</div><div class="line">|       |   |  |           |  |     |     |</div><div class="line">+-------+---+  +-----------+  +-----+-----+</div></pre></td></tr></table></figure></p>
<p><strong>这题读入优化会RE！读入优化会RE！读入优化会RE！</strong><br><del>垃圾题目降我AC率</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1505</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); <span class="keyword">return</span> x;</div><div class="line">	<span class="comment">// int x=0,f=0;char ch=getchar();</span></div><div class="line">	<span class="comment">// while(ch&gt;'9'||ch&lt;'0')&#123;if(ch=='-')f=1;ch=getchar();&#125;</span></div><div class="line">	<span class="comment">// while(ch&lt;='9'&amp;&amp;ch&gt;='0')&#123;x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();&#125;</span></div><div class="line">	<span class="comment">// return f?-x:x;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> sum[N][N], tr[N][N], a[N][N], b[N][N], c[N][N], d[N][N], h[N], l[N], ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>&#123;<span class="keyword">return</span> max(max(a, b), c);&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read(), k = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</div><div class="line">			sum[i][j] = read()+sum[i][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &lt;= m; j++)&#123;</div><div class="line">			tr[i][j] = sum[i][j]-sum[i][j-k]-sum[i-k][j]+sum[i-k][j-k];</div><div class="line">			h[i] = max(h[i], tr[i][j]); l[j] = max(l[j], tr[i][j]);</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &lt;= m; j++)</div><div class="line">			a[i][j] = max(a[i<span class="number">-1</span>][j], a[i][j<span class="number">-1</span>], tr[i][j]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = m-k+<span class="number">1</span>; j; j--)</div><div class="line">			b[i][j] = max(b[i<span class="number">-1</span>][j], b[i][j+<span class="number">1</span>], tr[i][j+k<span class="number">-1</span>]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n-k+<span class="number">1</span>; i; i--)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &lt;= m; j++)</div><div class="line">			c[i][j] = max(c[i+<span class="number">1</span>][j], c[i][j<span class="number">-1</span>], tr[i+k<span class="number">-1</span>][j]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n-k+<span class="number">1</span>; i; i--)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = m-k+<span class="number">1</span>; j; j--)</div><div class="line">			d[i][j] = max(d[i+<span class="number">1</span>][j], d[i][j+<span class="number">1</span>], tr[i+k<span class="number">-1</span>][j+k<span class="number">-1</span>]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n-k; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &lt;= m-k; j++)&#123;</div><div class="line">			ans = max(ans, a[i][m]+c[i+<span class="number">1</span>][j]+d[i+<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line">			ans = max(ans, c[i+<span class="number">1</span>][m]+b[i][j+<span class="number">1</span>]+a[i][j]);</div><div class="line">			ans = max(ans, a[n][j]+b[i][j+<span class="number">1</span>]+d[i+<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line">			ans = max(ans, b[n][j+<span class="number">1</span>]+a[i][j]+c[i+<span class="number">1</span>][j]);</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= n-k*<span class="number">2</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i+k; j &lt;= n-k; j++)</div><div class="line">			ans = max(ans, b[i][<span class="number">1</span>]+h[j]+d[j+<span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt;= m-k*<span class="number">2</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i+k; j &lt;= m-k; j++)</div><div class="line">			ans = max(ans, c[<span class="number">1</span>][i]+l[j]+d[<span class="number">1</span>][j+<span class="number">1</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2561: 最小生成树]]></title>
      <url>/2017/06/15/BZOJ-2561-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给定一个边带正权的连通无向图G=(V,E)，其中N=|V|，M=|E|，N个点从1到N依次编号，给定三个正整数u，v，和L (u≠v)，假设现在加入一条边权为L的边(u,v)，那么需要删掉最少多少条边，才能够使得这条边既可能出现在最小生成树上，也可能出现在最大生成树上？</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含用空格隔开的两个整数，分别为N和M；<br>接下来M行，每行包含三个正整数u，v和w表示图G存在一条边权为w的边(u,v)。<br>最后一行包含用空格隔开的三个整数，分别为u，v，和 L；<br>数据保证图中没有自环。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行一个整数表示最少需要删掉的边的数量。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3 2<br>3 2 1<br>1 2 3<br>1 2 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>对于20%的数据满足$N\leq 10，M\leq 20，L\leq 20$；<br>对于50%的数据满足$N\leq 300，M\leq 3000，L\leq 200$；<br>对于100%的数据满足$N\leq 20000，M\leq 200000，L\leq 20000$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>若要使边出现在最小生成树上，那么必须保证边权比他小的边无法将u与v连通。<br>因此把所有边权小于L的边加入网络流中，然后跑一边最小割就好了。<br>最大生成树同理。<br><del>模板打错WA了两发</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> to[N], nxt[N], head[N], val[N], dep[N], cnt = <span class="number">1</span>, st, ed, q[N], ans;</div><div class="line"><span class="keyword">int</span> x[N], y[N], z[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x]; val[cnt] = z; head[x] = cnt;</div><div class="line">	to[++cnt] = x; nxt[cnt] = head[y]; val[cnt] = z; head[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span> dep);</div><div class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1</span>; q[<span class="number">1</span>] = st; dep[st] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">		<span class="keyword">int</span> x = q[++l];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">			<span class="keyword">if</span>(val[i] &amp;&amp; !dep[to[i]])&#123;</div><div class="line">				q[++r] = to[i];</div><div class="line">				dep[to[i]] = dep[x]+<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dep[ed];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x == ed) <span class="keyword">return</span> f;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])&#123;</div><div class="line">		<span class="keyword">if</span>(val[i] &amp;&amp; dep[to[i]] == dep[x]+<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> w = dfs(to[i], min(f-sum, val[i]));</div><div class="line">			val[i] -= w; val[i^<span class="number">1</span>] += w;</div><div class="line">			sum += w; <span class="keyword">if</span>(sum == f) <span class="keyword">return</span> f;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(!sum) dep[x] = <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read(), ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">		x[i] = read(), y[i] = read(), z[i] = read();</div><div class="line">	st = read(); ed = read(); <span class="keyword">int</span> c = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">		<span class="keyword">if</span>(z[i] &lt; c) ins(x[i], y[i], <span class="number">1</span>);</div><div class="line">	<span class="keyword">while</span>(bfs())ans+=dfs(st, <span class="number">1</span>&lt;&lt;<span class="number">30</span>);</div><div class="line">	cnt = <span class="number">1</span>; <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">		<span class="keyword">if</span>(z[i] &gt; c) ins(x[i], y[i], <span class="number">1</span>);</div><div class="line">	<span class="keyword">while</span>(bfs())ans+=dfs(st, <span class="number">1</span>&lt;&lt;<span class="number">30</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2822: [AHOI2012]树屋阶梯]]></title>
      <url>/2017/06/05/BZOJ-2822-AHOI2012-%E6%A0%91%E5%B1%8B%E9%98%B6%E6%A2%AF/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>暑假期间，小龙报名了一个模拟野外生存作战训练班来锻炼体魄，训练的第一个晚上，教官就给他们出了个难题。由于地上露营湿气重，必须选择在高处的树屋露营。小龙分配的树屋建立在一颗高度为N+1尺（N为正整数）的大树上，正当他发愁怎么爬上去的时候，发现旁边堆满了一些空心四方钢材（如图1.1），经过观察和测量，这些钢材截面的宽和高大小不一，但都是1尺的整数倍，教官命令队员们每人选取N个空心钢材来搭建一个总高度为N尺的阶梯来进入树屋，该阶梯每一步台阶的高度为1尺，宽度也为1尺。如果这些钢材有各种尺寸，且每种尺寸数量充足，那么小龙可以有多少种搭建方法？（注：为了避免夜里踏空，钢材空心的一面绝对不可以向上。）<br><img src="http://www.lydsy.com/JudgeOnline/upload/201305/1(6).jpg"><br>以树屋高度为4尺、阶梯高度N=3尺为例，小龙一共有如图1.2所示的5种<br>搭建方法：<br><img src="http://www.lydsy.com/JudgeOnline/upload/201305/2(1).jpg"><br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>一个正整数 $N(1≤N≤500)$，表示阶梯的高度</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一个正整数，表示搭建方法的个数。（注：搭建方法个数可能很大。）</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>5</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>ans[3]=5。。。是不是想到了什么。。。</p>
<p>给个证明吧。。<br>首先比如这么一张图<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">*</div><div class="line">+*</div><div class="line">++*</div><div class="line">#++*</div></pre></td></tr></table></figure></p>
<p>我们注意到每个切割出来的矩形都必需包括一块标示为*的小正方形，那么我们此时枚举每个*与#标示的两角作为矩形，剩下的两个小阶梯就是我们的两个更小的子问题了，于是我们的注意到这里的式子<br>$$C_4=C_0*C_3+C_1*C_2+C_2*C_1+C_3*C_0$$<br>这就是卡特兰数的递推公式。。。<br>然后我毫不要脸的用了python。<br>233333</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">n = int(raw_input())</div><div class="line">f = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(n+<span class="number">1</span>)]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(x)</span>:</span></div><div class="line">	<span class="keyword">if</span> f[x]:</div><div class="line">		<span class="keyword">return</span> f[x]</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(x):</div><div class="line">		f[x] += get(x<span class="number">-1</span>-i)*get(i)</div><div class="line">	<span class="keyword">return</span> f[x]</div><div class="line"></div><div class="line">f[<span class="number">1</span>] = f[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">print(get(n))</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 卡特兰数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1095: [ZJOI2007]Hide 捉迷藏]]></title>
      <url>/2017/06/05/BZOJ-1095-ZJOI2007-Hide-%E6%8D%89%E8%BF%B7%E8%97%8F/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>捉迷藏 Jiajia和Wind是一对恩爱的夫妻，并且他们有很多孩子。某天，Jiajia、Wind和孩子们决定在家里玩捉迷藏游戏。他们的家很大且构造很奇特，由N个屋子和N-1条双向走廊组成，这N-1条走廊的分布使得任意两个屋子都互相可达。游戏是这样进行的，孩子们负责躲藏，Jiajia负责找，而Wind负责操纵这N个屋子的灯。在起初的时候，所有的灯都没有被打开。每一次，孩子们只会躲藏在没有开灯的房间中，但是为了增加刺激性，孩子们会要求打开某个房间的电灯或者关闭某个房间的电灯。为了评估某一次游戏的复杂性，Jiajia希望知道可能的最远的两个孩子的距离（即最远的两个关灯房间的距离）。 我们将以如下形式定义每一种操作： C(hange) i 改变第i个房间的照明状态，若原来打开，则关闭；若原来关闭，则打开。 G(ame) 开始一次游戏，查询最远的两个关灯房间的距离。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含一个整数N，表示房间的个数，房间将被编号为1,2,3…N的整数。接下来N-1行每行两个整数a, b，表示房间a与房间b之间有一条走廊相连。接下来一行包含一个整数Q，表示操作次数。接着Q行，每行一个操作，如上文所示。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每一个操作Game，输出一个非负整数到hide.out，表示最远的两个关灯房间的距离。若只有一个房间是关着灯的，输出0；若所有房间的灯都开着，输出-1。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>8<br>1 2<br>2 3<br>3 4<br>3 5<br>3 6<br>6 7<br>6 8<br>7<br>G<br>C 1<br>G<br>C 2<br>G<br>C 1<br>G</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>4<br>3<br>3<br>4</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>对于100%的数据，$N\leq 100000,M\leq 500000$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>居然还可以把树的直径用线段树来求。。。涨姿势了。</p>
<blockquote>
<p>大家一起膜拜<a href="http://www.shuizilong.com/house/archives/bzoj-1095-zjoi2007hide-%E6%8D%89%E8%BF%B7%E8%97%8F/" target="_blank" rel="external">岛娘</a>吧 - hzwer</p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> maxs(a,b,c) max(max(a,b),c)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ST -6</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ED -9</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">0</span>; <span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> v[N*<span class="number">3</span>], c[N], pos[N], tot, cnt, ccnt;</div><div class="line"><span class="keyword">int</span> head[N], to[N&lt;&lt;<span class="number">1</span>], nxt[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x]; head[x] = cnt;</div><div class="line">	to[++cnt] = x; nxt[cnt] = head[y]; head[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">	v[++tot] = ST; v[++tot] = x;</div><div class="line">	pos[x] = tot;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(to[i] != fa) dfs(to[i], x);</div><div class="line">	v[++tot] = ED;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> c1, c2, l1, l2, r1, r2, l, r, dis;</div><div class="line">	<span class="keyword">friend</span> node <span class="keyword">operator</span> + (<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b) &#123;</div><div class="line">		node c;</div><div class="line">		c.l = a.l; c.r = b.r;</div><div class="line">		c.dis = max(a.dis, b.dis);</div><div class="line">		c.dis = maxs(c.dis, a.r1+b.l2, a.r2+b.l1);</div><div class="line">		<span class="keyword">if</span>(a.c2 &lt; b.c1) c.c1 = a.c1-a.c2+b.c1, c.c2 = b.c2;</div><div class="line">		<span class="keyword">else</span> c.c1 = a.c1, c.c2 = a.c2-b.c1+b.c2;</div><div class="line">		c.r1 = maxs(b.r1, a.r1-b.c1+b.c2, a.r2+b.c1+b.c2);</div><div class="line">		c.r2 = max(b.r2, a.r2+b.c1-b.c2);</div><div class="line">		c.l1 = maxs(a.l1, b.l1-a.c2+a.c1, b.l2+a.c2+a.c1);</div><div class="line">		c.l2 = max(a.l2, b.l2+a.c2-a.c1);</div><div class="line">		<span class="keyword">return</span> c;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">		l = r = x;</div><div class="line">		dis = -inf;</div><div class="line">		c1 = c2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(v[x] == ST) c2 = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(v[x] == ED) c1 = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(v[x] &gt; <span class="number">0</span> &amp;&amp; c[v[x]]) l1 = l2 = r1 = r2 = <span class="number">0</span>;</div><div class="line">		<span class="keyword">else</span> l1 = l2 = r1 = r2 = -inf;</div><div class="line">	&#125;</div><div class="line">&#125;t[N*<span class="number">12</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(t[x].l == t[x].r) <span class="keyword">return</span> t[x].init(t[x].l);</div><div class="line">	<span class="keyword">int</span> mid = t[x].l + t[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(k &lt;= mid) update(x&lt;&lt;<span class="number">1</span>, k);</div><div class="line">	<span class="keyword">else</span> update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, k);</div><div class="line">	t[x] = t[x&lt;&lt;<span class="number">1</span>]+t[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l == r) <span class="keyword">return</span> t[x].init(l);</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>, l, mid); build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">	t[x] = t[x&lt;&lt;<span class="number">1</span>]+t[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(); ccnt = n;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) c[i] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) ins(read(), read());</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>); build(<span class="number">1</span>, <span class="number">1</span>, tot);</div><div class="line">	<span class="keyword">int</span> m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(getchar() == <span class="string">'C'</span>)&#123;</div><div class="line">			<span class="keyword">int</span> x = read();</div><div class="line">			<span class="keyword">if</span>(c[x]) ccnt--;</div><div class="line">			<span class="keyword">else</span> ccnt++;</div><div class="line">			c[x] ^= <span class="number">1</span>;</div><div class="line">			update(<span class="number">1</span>, pos[x]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123; getchar();</div><div class="line">			<span class="keyword">if</span>(!ccnt) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ccnt == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t[<span class="number">1</span>].dis);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2654: tree]]></title>
      <url>/2017/06/02/BZOJ-2654-tree/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给你一个无向带权连通图，每条边是黑色或白色。让你求一棵最小权的恰好有need条白色边的生成树。<br>题目保证有解。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行V,E,need分别表示点数，边数和需要的白色边数。<br>接下来E行,每行s,t,c,col表示这边的端点(点从0开始标号)，边权，颜色(0白色1黑色)。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一行表示所求生成树的边权和。<br>$V\leq 50000,E\leq 100000$,所有数据边权为[1,100]中的正整数。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2 2 1<br>0 1 1 1<br>0 1 2 0</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>先说一个错误的贪心。。<br>按c把边从小到大排序<br>然后先把need条白边取了<br>然后在剩下的里面取n-1-need条边就行了<br>代码如下<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y, c, t;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b)&#123;</div><div class="line">		<span class="keyword">return</span> a.c &lt; b.c;</div><div class="line">	&#125;</div><div class="line">&#125;a[<span class="number">100020</span>];</div><div class="line"><span class="keyword">int</span> vis[<span class="number">100020</span>], fa[<span class="number">50020</span>], ans, tot;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read(), need = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		a[i].x = read(); a[i].y = read();</div><div class="line">		a[i].c = read(); a[i].t = read();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</div><div class="line">	sort(a+<span class="number">1</span>, a+m+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(a[i].t) <span class="keyword">continue</span>; vis[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> x = find(a[i].x), y = find(a[i].y);</div><div class="line">		<span class="keyword">if</span>(x == y) <span class="keyword">continue</span>; fa[x] = y;</div><div class="line">		ans += a[i].c; tot++;</div><div class="line">		<span class="keyword">if</span>(!--need) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)<span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">		<span class="keyword">int</span> x = find(a[i].x), y = find(a[i].y);</div><div class="line">		<span class="keyword">if</span>(x == y) <span class="keyword">continue</span>; fa[x] = y;</div><div class="line">		ans += a[i].c; <span class="keyword">if</span>(++tot == n<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后这题就能过了。。但是评论中有人Hack掉了。。那么我们就改一下。。<br><del>算了，我懒癌犯了</del></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 瞎搞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1004: [HNOI2008]Cards]]></title>
      <url>/2017/06/02/BZOJ-1004-HNOI2008-Cards/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>小春现在很清闲，面对书桌上的N张牌，他决定给每张染色，目前小春只有3种颜色：红色，蓝色，绿色。他询问Sun有多少种染色方案，Sun很快就给出了答案。进一步，小春要求染出Sr张红色，Sb张蓝色，Sg张绝色。他又询问有多少种方案，Sun想了一下，又给出了正确答案。最后小春发明了M种不同的洗牌法，这里他又问Sun有多少种不同的染色方案。两种染色方法相同当且仅当其中一种可以通过任意的洗牌法(即可以使用多种洗牌法，而每种方法可以使用多次)洗成另一种。Sun发现这个问题有点难度，决定交给你，答案可能很大，只要求出答案除以P的余数(P为质数)。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行输入 5 个整数：$S_r,S_b,S_g,m,p(m\leq 60,m+1\lt p\lt 100),n=S_r+S_b+S_g$。接下来 m 行，每行描述一种洗牌法，每行有 n 个用空格隔开的整数 X1 X2 … Xn，恰为 1 到 n 的一个排列，表示使用这种洗牌法，第 i 位变为原来的 Xi 位的牌。输入数据保证任意多次洗牌都可用这 m 种洗牌法中的一种代替，且对每种洗牌法，都存在一种洗牌法使得能回到原状态。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>不同染法除以P的余数</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>1 1 1 2 7<br>2 3 1<br>3 1 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>有2 种本质上不同的染色法RGB 和RBG，使用洗牌法231 一次可得GBR 和BGR，使用洗牌法312 一次 可得BRG和GRB。<br>100%数据满足$Max\{Sr,Sb,Sg\}\leq 20$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>$$<br>ans=\frac{n!}{Sr!*Sb!*Sg!*(m+1)}\pmod p<br>$$<br>似乎和后面的东西没多大关系。。<br><del>别问我怎么知道的</del><br>0ms完美AC</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> frav[<span class="number">202</span>], p;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = p<span class="number">-2</span>)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> c = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(;b;b/=<span class="number">2</span>,a=a*a%p)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)c=c*a%p;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> r = read(), b = read(), g = read(), m = read(); p = read();</div><div class="line">	frav[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; i++) frav[i] = frav[i<span class="number">-1</span>]*i%p;</div><div class="line">	<span class="keyword">int</span> n = r+b+g;</div><div class="line">	<span class="keyword">int</span> ans = frav[n]*inv(frav[r])*inv(frav[b])*inv(frav[g])*inv(m+<span class="number">1</span>)%p;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 瞎搞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4419: [Shoi2013]发微博]]></title>
      <url>/2017/05/31/BZOJ-4419-Shoi2013-%E5%8F%91%E5%BE%AE%E5%8D%9A/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>刚开通的SH微博共有n个用户（1..n标号），在短短一个月的时间内，用户们活动频繁，共有m条按时间顺序的记录：</p>
<ul>
<li><code>! x</code> 表示用户x发了一条微博；</li>
<li><code>+ x y</code> 表示用户x和用户y成为了好友</li>
<li><code>- x y</code> 表示用户x和用户y解除了好友关系</li>
</ul>
<p>当一个用户发微博的时候，所有他的好友（直接关系）都会看到他的消息。<br>假设最开始所有人之间都不是好友关系，记录也都是合法的（即+ x y时x和y一定不是好友，而- x y时x和y一定是好友）。<br>问这m条记录发生之后，每个用户分别看到了多少条消息。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第1行2个整数n,m。<br>接下来m行，按时间顺序读入m条记录，每条记录的格式如题目所述，用空格隔开。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行n个用空格隔开的数（行末无空格），第i个数表示用户i最后看到了几条消息。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2 8<br>! 1<br>! 2<br>+ 1 2<br>! 1<br>! 2<br>- 1 2<br>! 1<br>! 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1 1</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>只有第4和第5条记录对应的消息被看到过。其他消息发送时，1和2不是好友。<br>对100%的数据，$N\leq 200000,M\leq 500000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>暴力即可。。。代码奇短无比。。<br>注意PE，行末不能有空格和回车</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 500007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> x[M], y[M], a[N], b[N], op[M];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		op[i] = getchar(); x[i] = read();</div><div class="line">		<span class="keyword">if</span>(op[i] != <span class="string">'!'</span>) y[i] = read();</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = m; i; i--)</div><div class="line">		<span class="keyword">if</span>(op[i] == <span class="string">'!'</span>) b[x[i]]++;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(op[i] == <span class="string">'+'</span>) a[x[i]] += b[y[i]], a[y[i]] += b[x[i]];</div><div class="line">		<span class="keyword">else</span> a[x[i]] -= b[y[i]], a[y[i]] -= b[x[i]];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, a[<span class="number">1</span>]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">" %d"</span>, a[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4562: [Haoi2016]食物链]]></title>
      <url>/2017/05/26/BZOJ-4562-Haoi2016-%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>如图所示为某生态系统的食物网示意图，据图回答第1小题<br>现在给你n个物种和m条能量流动关系，求其中的食物链条数。<br>物种的名称为从1到n编号<br>M条能量流动关系形如<br>a1 b1<br>a2 b2<br>a3 b3<br>……<br>am-1 bm-1<br>am bm<br>其中ai bi表示能量从物种ai流向物种bi,注意单独的一种孤立生物不算一条食物链<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行两个整数n和m,接下来m行每行两个整数ai bi描述m条能量流动关系。<br>（数据保证输入数据符号生物学特点，且不会有重复的能量流动关系出现）<br>$1\leq N\leq 100000,0\leq m\leq 200000$<br>题目保证答案不会爆 int</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一个整数即食物网中的食物链条数</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>10 16<br>1 2<br>1 4<br>1 10<br>2 3<br>2 5<br>4 3<br>4 5<br>4 8<br>6 5<br>7 6<br>7 9<br>8 5<br>9 8<br>10 6<br>10 7<br>10 9</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>9</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>拓扑傻逼题<br>不过HAOI是什么？？</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> head[N], to[N&lt;&lt;<span class="number">1</span>], nxt[N&lt;&lt;<span class="number">1</span>], cnt, ans, dp[N], in[N], a[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x];</div><div class="line">	head[x] = cnt; in[y]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])&#123;</div><div class="line">		dp[to[i]] += dp[x];</div><div class="line">		<span class="keyword">if</span>(!--in[to[i]]) dfs(to[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)&#123;</div><div class="line">		x = read(); y = read();</div><div class="line">		add(x, y);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span>(!in[i]&amp;&amp;head[i])</div><div class="line">			a[++a[<span class="number">0</span>]] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>]; i++)</div><div class="line">			dp[a[i]] = <span class="number">1</span>, dfs(a[i]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">if</span>(!head[i]) ans += dp[i];</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拓扑 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2743: [HEOI2012]采花]]></title>
      <url>/2017/05/25/BZOJ-2743-HEOI2012-%E9%87%87%E8%8A%B1/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>萧芸斓是Z国的公主，平时的一大爱好是采花。<br>今天天气晴朗，阳光明媚，公主清晨便去了皇宫中新建的花园采花。花园足够大，容纳了n朵花，花有c种颜色（用整数1-c表示），且花是排成一排的，以便于公主采花。公主每次采花后会统计采到的花的颜色数，颜色数越多她会越高兴！同时，她有一癖好，她不允许最后自己采到的花中，某一颜色的花只有一朵。为此，公主每采一朵花，要么此前已采到此颜色的花，要么有相当正确的直觉告诉她，她必能再次采到此颜色的花。由于时间关系，公主只能走过花园连续的一段进行采花，便让女仆福涵洁安排行程。福涵洁综合各种因素拟定了m个行程，然后一一向你询问公主能采到多少朵花（她知道你是编程高手，定能快速给出答案！），最后会选择令公主最高兴的行程（为了拿到更多奖金！）。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行四个空格隔开的整数n、c以及m。接下来一行n个空格隔开的整数，每个数在[1, c]间，第i个数表示第i朵花的颜色。接下来m行每行两个空格隔开的整数l和r（l ≤ r），表示女仆安排的行程为公主经过第l到第r朵花进行采花。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>共m行，每行一个整数，第i个数表示公主在女仆的第i个行程中能采到的花的颜色数。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5 3 5<br>1 2 2 3 1<br>1 5<br>1 2<br>2 2<br>2 3<br>3 5</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2<br>0 0 1 0</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>【样例说明】</p>
<ul>
<li>询问[1, 5]：公主采颜色为1和2的花，由于颜色3的花只有一朵，公主不采；</li>
<li>询问[1, 2]：颜色1和颜色2的花均只有一朵，公主不采；</li>
<li>询问[2, 2]：颜色2的花只有一朵，公主不采；</li>
<li>询问[2, 3]：由于颜色2的花有两朵，公主采颜色2的花；</li>
<li>询问[3, 5]：颜色1、2、3的花各一朵，公主不采。</li>
</ul>
<p>【数据范围】<br>对于$100\%$的数据，$1\leq n\leq 10^6,c\leq n,m\leq 10^6$。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>出题卡莫队我*****<br>那么只能换一种方法了。<br>预处理一下每朵花下一个相同颜色出现的位置。<br>然后把询问按左边界排序，用树状数组搞一波就好了。<br><del>垃圾题目降我AC率</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> a[N], ans[N], c[N], pos[N], nxt[N], vis[N];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> l, r, id;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> l &lt; b.l;</div><div class="line">	&#125;</div><div class="line">&#125;asks[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">for</span>(;x&lt;N;x+=x&amp;-x)c[x]+=v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(;x;x^=x&amp;-x)ans+=c[x];</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), c = read(), m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; i--) nxt[i] = pos[a[i]], pos[a[i]] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(!vis[a[i]]) add(nxt[i], vis[a[i]]=<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		asks[i].id = i;</div><div class="line">		asks[i].l = read();</div><div class="line">		asks[i].r = read();</div><div class="line">	&#125;</div><div class="line">	sort(asks+<span class="number">1</span>, asks+m+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, now = <span class="number">0</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">while</span>(now &lt; asks[i].l)&#123;</div><div class="line">			<span class="keyword">if</span>(nxt[now])&#123;</div><div class="line">				add(nxt[now], <span class="number">-1</span>);</div><div class="line">				add(nxt[nxt[now]], <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">			now++;</div><div class="line">		&#125;</div><div class="line">		ans[asks[i].id] = ask(asks[i].r);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1055: [HAOI2008]玩具取名]]></title>
      <url>/2017/05/25/BZOJ-1055-HAOI2008-%E7%8E%A9%E5%85%B7%E5%8F%96%E5%90%8D/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>某人有一套玩具，并想法给玩具命名。首先他选择WING四个字母中的任意一个字母作为玩具的基本名字。然后<br>他会根据自己的喜好，将名字中任意一个字母用“WING”中任意两个字母代替，使得自己的名字能够扩充得很长。<br>现在，他想请你猜猜某一个很长的名字，最初可能是由哪几个字母变形过来的。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行四个整数W、I、N、G。表示每一个字母能由几种两个字母所替代。接下来W行，每行两个字母,表示W可<br>以用这两个字母替代。接下来I行，每行两个字母,表示I可以用这两个字母替代。接下来N行，每行两个字母,表示N<br>可以用这两个字母替代。接下来G行，每行两个字母,表示G可以用这两个字母替代。最后一行一个长度不超过Len的<br>字符串。表示这个玩具的名字。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一行字符串，该名字可能由哪些字母变形而得到。（按照WING的顺序输出）如果给的名字不能由任何一个字母<br>变形而得到则输出“The name is wrong!”</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>1 1 1 1<br>II<br>WW<br>WW<br>IG<br>IIII</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>IN</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>W可以变成II所以IIII可以缩成WW<br>IN均能变成WW所以WW又可以缩成I或者N<br>所以最终答案应该按照“WING”的顺序输出IN<br>【数据范围】<br>100%数据满足Len&leq;200，W、I、N、G&leq;16</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>区间dp入门题。<br>似乎还要加上记忆化。<br>f[i][j][k]表示区间[i-j]能否用k代替。<br>每次询问的时候枚举一下中间点就好了。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 205</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> f[N][N][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> a[N], t[<span class="number">4</span>], len, flag;</div><div class="line"><span class="keyword">char</span> str[N], ch[<span class="number">4</span>][<span class="number">20</span>][<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(ch == <span class="string">'W'</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(ch == <span class="string">'I'</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(ch == <span class="string">'N'</span>) <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">	<span class="keyword">if</span>(ch == <span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">revcalc</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'W'</span>;</div><div class="line">	<span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span> <span class="string">'I'</span>;</div><div class="line">	<span class="keyword">if</span>(x == <span class="number">2</span>) <span class="keyword">return</span> <span class="string">'N'</span>;</div><div class="line">	<span class="keyword">if</span>(x == <span class="number">3</span>) <span class="keyword">return</span> <span class="string">'G'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l == r) <span class="keyword">return</span> a[l] == k;</div><div class="line">	<span class="keyword">int</span> &amp;ans = f[l][r][k];</div><div class="line">	<span class="keyword">if</span>(ans != <span class="number">-1</span>) <span class="keyword">return</span> ans;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t[k]; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = l; j &lt; r; j++)</div><div class="line">			<span class="keyword">if</span>(dfs(l, j, calc(ch[k][i][<span class="number">0</span>])) &amp;&amp; dfs(j+<span class="number">1</span>, r, calc(ch[k][i][<span class="number">1</span>])))</div><div class="line">				<span class="keyword">return</span> ans = <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> ans = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) t[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= t[i]; j++)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch[i][j]);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str+<span class="number">1</span>); len = <span class="built_in">strlen</span>(str+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) a[i] = calc(str[i]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">		<span class="keyword">if</span>(dfs(<span class="number">1</span>, len, i))</div><div class="line">			flag = <span class="built_in">putchar</span>(revcalc(i));</div><div class="line">	<span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"The name is wrong!"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3275: Number]]></title>
      <url>/2017/05/22/BZOJ-3275-Number/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>有$N$个正整数，需要从中选出一些数，使这些数的和最大。<br>若两个数$a,b$同时满足以下条件，则a,b不能同时被选</p>
<ol>
<li>存在正整数$C$，使$a^2+b^2=c^2$</li>
<li>$gcd(a,b)=1$</li>
</ol>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个正整数$n$，表示数的个数。<br>第二行$n$个正整数$a1,a2,…,an$。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>最大的和。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5<br>3 4 5 6 7</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>22</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>$n\leq 3000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>首先证明两个定理。</p>
<blockquote>
<p>定理1：两个奇数的平方和不可能是平方数。<br>证明：<br>首先我们知道以下定理<br>对于任意一个奇数$a$，$a^2=1\pmod 4$<br>对于任意一个偶数$b$，$b^2=0\pmod 4$<br>所以两个奇数的平方和$a_1^2+a_2^2=2\pmod 4$<br>这既不是奇数的平方也不是偶数的平方。<br>从而可以证明。</p>
<p>定理2：两个偶数gcd不可能是1<br>证明：<br>这不是废话吗。。。</p>
</blockquote>
<p>所以奇数对和偶数对均不能满足要求。<br>因此，可以将读入的数按奇偶分为两类。<br>之后跑二分图最大点权独立集即可。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 3010</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> to[M], nxt[M], head[M], cnt = <span class="number">1</span>, q[M];</div><div class="line"><span class="keyword">int</span> sum, n, od[N], ev[N], val[M], dis[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b,a%b):a;&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;<span class="keyword">return</span> a*a;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	to[++cnt] = y;</div><div class="line">	nxt[cnt] = head[x];</div><div class="line">	val[cnt] = v;</div><div class="line">	head[x] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span> dis);</div><div class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">1</span>; dis[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(l &lt; r) <span class="keyword">for</span>(<span class="keyword">int</span> i = head[q[++l]]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(!dis[to[i]] &amp;&amp; val[i])&#123;</div><div class="line">			dis[to[i]] = dis[q[l]]+<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(to[i] == n+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">			q[++r] = to[i];</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mn)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x == n+<span class="number">1</span>) <span class="keyword">return</span> mn; <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(dis[to[i]] == dis[x]+<span class="number">1</span> &amp;&amp; val[i])&#123;</div><div class="line">			<span class="keyword">int</span> k = dfs(to[i], min(mn-sum, val[i]));</div><div class="line">			<span class="keyword">if</span>(!k) dis[to[i]] = <span class="number">0</span>;</div><div class="line">			val[i] -= k; val[i^<span class="number">1</span>] += k; sum += k;</div><div class="line">			<span class="keyword">if</span>(sum == mn) <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">int</span> x = read(); sum += x;</div><div class="line">		<span class="keyword">if</span>(x&amp;<span class="number">1</span>) od[++od[<span class="number">0</span>]] = x;</div><div class="line">		<span class="keyword">else</span> ev[++ev[<span class="number">0</span>]] = x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= od[<span class="number">0</span>]; i++)</div><div class="line">		add(<span class="number">0</span>, i, od[i]), add(i, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= ev[<span class="number">0</span>]; i++)</div><div class="line">		add(i+od[<span class="number">0</span>], n+<span class="number">1</span>, ev[i]), add(n+<span class="number">1</span>, i+od[<span class="number">0</span>], <span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= od[<span class="number">0</span>]; i++) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= ev[<span class="number">0</span>]; j++)</div><div class="line">		<span class="keyword">if</span>(gcd(od[i], ev[j]) == <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> k = od[i]*od[i]+ev[j]*ev[j];</div><div class="line">			<span class="keyword">if</span>(sqr(<span class="built_in">sqrt</span>(k)+<span class="number">1e-9</span>) != k) <span class="keyword">continue</span>;</div><div class="line">			add(i, od[<span class="number">0</span>]+j, <span class="number">1</span>&lt;&lt;<span class="number">30</span>);</div><div class="line">			add(od[<span class="number">0</span>]+j, i, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(bfs())ans+=dfs(<span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">30</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum-ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2843: 极地旅行社]]></title>
      <url>/2017/05/19/BZOJ-2843-%E6%9E%81%E5%9C%B0%E6%97%85%E8%A1%8C%E7%A4%BE/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>不久之前，Mirko建立了一个旅行社，名叫“极地之梦”。这家旅行社在北极附近购买了N座冰岛，并且提供观光服务。当地最受欢迎的当然是帝企鹅了，这些小家伙经常成群结队的游走在各个冰岛之间。Mirko的旅行社遭受一次重大打击，以至于观光游轮已经不划算了。旅行社将在冰岛之间建造大桥，并用观光巴士来运载游客。Mirko希望开发一个电脑程序来管理这些大桥的建造过程，以免有不可预料的错误发生。这些冰岛从1到N标号。一开始时这些岛屿没有大桥连接，并且所有岛上的帝企鹅数量都是知道的。每座岛上的企鹅数量虽然会有所改变，但是始终在[0, 1000]之间。你的程序需要处理以下三种命令：</p>
<ol>
<li><code>bridge A B</code>——在A与B之间建立一座大桥（A与B是不同的岛屿）。由于经费限制，这项命令被接受，当且仅当<br>A与B不联通。若这项命令被接受，你的程序需要输出”yes”，之<br>后会建造这座大桥。否则，你的程序需要输出”no”。</li>
<li><code>penguins A X</code>——根据可靠消息，岛屿A此时的帝企鹅数量变为X。这项命令只是用来提供信息的，你的程序不<br>需要回应。</li>
<li><code>excursion A B</code>——一个旅行团希望从A出发到B。若A与B连通，你的程序需要输出这个旅行团一路上所能看到的<br>帝企鹅数量（包括起点A与终点B），若不联通，你的程序需要输出”impossible”。<a id="more"></a>
</li>
</ol>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个正整数N，表示冰岛的数量。<br>第二行N个范围[0, 1000]的整数，为每座岛屿初始的帝企鹅数量。<br>第三行一个正整数M，表示命令的数量。接下来M行即命令，为题目描述所示。<br>$1\leq N\leq 30000,1\leq M\leq 100000$</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个bridge命令与excursion命令，输出一行，为题目描述所示。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5<br>4 2 4 5 6<br>10<br>excursion 1 1<br>excursion 1 2<br>bridge 1 2<br>excursion 1 2<br>bridge 3 4<br>bridge 3 5<br>excursion 4 5<br>bridge 1 3<br>excursion 2 4<br>excursion 2 5</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>4<br>impossible<br>yes<br>6<br>yes<br>yes<br>15<br>yes<br>15<br>16</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>LCT稳稳的1656ms</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 30010</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> c[N][<span class="number">2</span>], fa[N], rev[N], st[N], sum[N], val[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> c[fa[x]][<span class="number">0</span>] != x &amp;&amp; c[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	sum[x] = sum[c[x][<span class="number">0</span>]]+sum[c[x][<span class="number">1</span>]]+val[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!rev[x])<span class="keyword">return</span>;</div><div class="line">	rev[x] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</div><div class="line">	swap(c[x][<span class="number">0</span>], c[x][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">	<span class="keyword">int</span> r = c[y][<span class="number">0</span>] == x, l = r^<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(!isroot(y)) c[z][c[z][<span class="number">0</span>]!=y] = x;</div><div class="line">	fa[x] = z; fa[y] = x; fa[c[x][r]] = y;</div><div class="line">	c[y][l] = c[x][r]; c[x][r] = y;</div><div class="line">	push_up(y); push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> top = <span class="number">0</span>; st[++top]=x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = x; !isroot(i); i=fa[i])</div><div class="line">		st[++top] = fa[i];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = top; i; i--)</div><div class="line">		push_down(st[i]);</div><div class="line">	<span class="keyword">while</span>(!isroot(x))&#123;</div><div class="line">		<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">		<span class="keyword">if</span>(!isroot(y))<span class="keyword">if</span>(c[y][<span class="number">0</span>]==x^c[z][<span class="number">0</span>]==y)rotate(x);</div><div class="line">		<span class="keyword">else</span> rotate(y);</div><div class="line">		rotate(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(x)&#123;</div><div class="line">		splay(x);</div><div class="line">		c[x][<span class="number">1</span>] = t;</div><div class="line">		push_up(x);</div><div class="line">		t = x; x = fa[x];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x); splay(x);</div><div class="line">	rev[x]^=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x);</div><div class="line">	fa[x] = y;</div><div class="line">	splay(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x); access(y); splay(y);</div><div class="line">	c[y][<span class="number">0</span>] = fa[x] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x); access(y); splay(y);</div><div class="line">	<span class="keyword">return</span> sum[y];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	rever(x);</div><div class="line">	val[x] = v;</div><div class="line">	push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x); splay(x);</div><div class="line">	<span class="keyword">while</span>(c[x][<span class="number">0</span>]) x = c[x][<span class="number">0</span>];</div><div class="line">	<span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		val[i] = sum[i] = read();</div><div class="line">	<span class="keyword">int</span> m = read(); <span class="keyword">char</span> ch[<span class="number">40</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, op, x, y; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch); x = read(); y = read();</div><div class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'b'</span>)</div><div class="line">			<span class="keyword">if</span>(find(x) == find(y)) <span class="built_in">puts</span>(<span class="string">"no"</span>);</div><div class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"yes"</span>), link(x, y);</div><div class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'p'</span>)</div><div class="line">			change(x, y);</div><div class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'e'</span>)</div><div class="line">			<span class="keyword">if</span>(find(x) != find(y)) <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</div><div class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ask(x, y));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2819: Nim]]></title>
      <url>/2017/05/17/BZOJ-2819-Nim/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>著名游戏设计师vfleaking，最近迷上了Nim。普通的Nim游戏为：两个人进行游戏，N堆石子，每回合可以取其中某一堆的任意多个，可以取完，但不可以不取。谁不能取谁输。这个游戏是有必胜策略的。于是vfleaking决定写一个玩Nim游戏的平台来坑玩家。<br>为了设计漂亮一点的初始局面，vfleaking用以下方式来找灵感：拿出很多石子，把它们聚成一堆一堆的，对每一堆编号1,2,3,4,…n,在堆与堆间连边，没有自环与重边，从任意堆到任意堆都只有唯一一条路径可到达。然后他不停地进行如下操作：</p>
<ol>
<li>随机选两个堆v,u，询问若在v到u间的路径上的石子堆中玩Nim游戏，是否有必胜策略，如果有，vfleaking将会考虑将这些石子堆作为初始局面之一，用来坑玩家。</li>
<li>把堆v中的石子数变为k。</li>
</ol>
<p>由于vfleaking太懒了，他懒得自己动手了。请写个程序帮帮他吧。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个数n，表示有多少堆石子。<br>接下来的一行，第i个数表示第i堆里有多少石子。<br>接下来n-1行，每行两个数v,u，代表v,u间有一条边直接相连。<br>接下来一个数q，代表操作的个数。<br>接下来q行，每行开始有一个字符：<br>如果是Q，那么后面有两个数v,u，询问若在v到u间的路径上的石子堆中玩Nim游戏，是否有必胜策略。<br>如果是C，那么后面有两个数v,k，代表把堆v中的石子数变为k。</p>
<p>对于100%的数据：<br>$1\leq N\leq 500000, 1\leq Q\leq 500000, 0\leq 任何时候每堆石子的个数\leq 32767$<br>其中有30%的数据：<br>石子堆组成了一条链，这3个点会导致你DFS时爆栈（也许你不用DFS？）。其它的数据DFS目测不会爆。</p>
<p>注意：石子数的范围是0到INT_MAX</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个Q，输出一行Yes或No，代表对询问的回答。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5<br>1 3 5 2 5<br>1 5<br>3 5<br>2 5<br>1 4<br>6<br>Q 1 2<br>Q 3 5<br>C 3 7<br>Q 1 2<br>Q 2 4<br>Q 5 3</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>Yes<br>No<br>Yes<br>Yes<br>Yes</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>LCA+树状数组<br>我还是照样用倍增求LCA、、</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> to[N&lt;&lt;<span class="number">1</span>], nxt[N&lt;&lt;<span class="number">1</span>], head[N], cnt, ls[N];</div><div class="line"><span class="keyword">int</span> tot, fa[N][M], c[N], dep[N], a[N], rs[N];</div><div class="line"><span class="keyword">char</span> ch[<span class="number">5</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(;x&lt;N;x+=x&amp;-x)c[x]^=v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(;x;x^=x&amp;-x)ans^=c[x];</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x]; head[x] = cnt;</div><div class="line">	to[++cnt] = x; nxt[cnt] = head[y]; head[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">	ls[x] = ++tot;</div><div class="line">	dep[x] = dep[f]+<span class="number">1</span>;</div><div class="line">	fa[x][<span class="number">0</span>] = f;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(to[i] != f) dfs(to[i], x);</div><div class="line">	rs[x] = tot;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(dep[x] &lt; dep[y]) swap(x, y);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = M<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">		<span class="keyword">if</span>(dep[fa[x][i]] &gt;= dep[y])</div><div class="line">			x = fa[x][i];</div><div class="line">	<span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = M<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">		<span class="keyword">if</span>(fa[x][i] != fa[y][i])</div><div class="line">			x = fa[x][i], y = fa[y][i];</div><div class="line">	<span class="keyword">return</span> fa[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) ins(read(), read());</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; j++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">if</span>(fa[i][j<span class="number">-1</span>]) fa[i][j] = fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</div><div class="line">	<span class="keyword">int</span> m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		add(ls[i], a[i]), add(rs[i]+<span class="number">1</span>, a[i]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);<span class="keyword">int</span> x = read(), y = read();</div><div class="line">		<span class="keyword">if</span>(ch[<span class="number">0</span>] == <span class="string">'Q'</span>)</div><div class="line">			<span class="built_in">puts</span>(ask(ls[x])^ask(ls[y])^a[lca(x, y)] ? <span class="string">"Yes"</span>:<span class="string">"No"</span>);</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			add(ls[x], a[x]), add(rs[x]+<span class="number">1</span>, a[x]);</div><div class="line">			a[x] = y;</div><div class="line">			add(ls[x], a[x]), add(rs[x]+<span class="number">1</span>, a[x]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> LCA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3631: [JLOI2014]松鼠的新家]]></title>
      <url>/2017/05/16/BZOJ-3631-JLOI2014-%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>松鼠的新家是一棵树，前几天刚刚装修了新家，新家有n个房间，并且有n-1根树枝连接，每个房间都可以相互到达，且俩个房间之间的路线都是唯一的。天哪，他居然真的住在“树”上。松鼠想邀请小熊维尼前来参观，并且还指定一份参观指南，他希望维尼能够按照他的指南顺序，先去a1，再去a2，……，最后到an，去参观新家。<br>可是这样会导致维尼重复走很多房间，懒惰的维尼不听地推辞。可是松鼠告诉他，每走到一个房间，他就可以从房间拿一块糖果吃。维尼是个馋家伙，立马就答应了。<br>现在松鼠希望知道为了保证维尼有糖果吃，他需要在每一个房间各放至少多少个糖果。因为松鼠参观指南上的最后一个房间an是餐厅，餐厅里他准备了丰盛的大餐，所以当维尼在参观的最后到达餐厅时就不需要再拿糖果吃了。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个整数n，表示房间个数<br>第二行n个整数，依次描述a1-an<br>接下来n-1行，每行两个整数x，y，表示标号x和y的两个房间之间有树枝相连。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一共n行，第i行输出标号为i的房间至少需要放多少个糖果，才能让维尼有糖果吃。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5<br>1 4 5 3 2<br>1 2<br>2 4<br>2 3<br>4 5</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1<br>2<br>1<br>2<br>1</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>$2\leq n\leq 300000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>感谢<a href="http://www.cnblogs.com/lcf-2000/p/6063211.html" target="_blank" rel="external">lcf2000</a>提供的思路。<br>用b数组表示每个点的糖果数。<br>对于每条路径$(u,v)$，只需要改变4个值：<br>$b[u]+1,b[fa[v]]+1,b[lca(u,v)]-1,b[fa[lca(u,v)]]-1$<br>然后$ans[i]=b[i]+\sum ans[son[i]]$。<br>P.S.我用倍增求LCA。<br>1A。开心~~</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 20</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> to[N&lt;&lt;<span class="number">1</span>], nxt[N&lt;&lt;<span class="number">1</span>], head[N], cnt, fa[N][M], dep[N], b[N], a[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	to[++cnt] = y; nxt[cnt] = head[x]; head[x] = cnt;</div><div class="line">	to[++cnt] = x; nxt[cnt] = head[y]; head[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">	fa[x][<span class="number">0</span>] = f;</div><div class="line">	dep[x] = dep[f]+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(to[i] != f) dfs(to[i], x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = nxt[i])</div><div class="line">		<span class="keyword">if</span>(to[i] != fa[x][<span class="number">0</span>]) dfs(to[i]), b[x] += b[to[i]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(dep[a] &lt; dep[b]) swap(a, b);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = M; i; i--)</div><div class="line">		<span class="keyword">if</span>(dep[fa[a][i<span class="number">-1</span>]] &gt;= dep[b])</div><div class="line">			a = fa[a][i<span class="number">-1</span>];</div><div class="line">	<span class="keyword">if</span>(a == b) <span class="keyword">return</span> a;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = M; i; i--)</div><div class="line">		<span class="keyword">if</span>(fa[a][i<span class="number">-1</span>] != fa[b][i<span class="number">-1</span>])</div><div class="line">			a = fa[a][i<span class="number">-1</span>], b = fa[b][i<span class="number">-1</span>];</div><div class="line">	<span class="keyword">return</span> fa[a][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) ins(read(), read());</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; M; j++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">if</span>(fa[i][j<span class="number">-1</span>]) fa[i][j] = fa[fa[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">		<span class="keyword">int</span> lc = lca(a[i], a[i+<span class="number">1</span>]);</div><div class="line">		b[a[i]]++; b[fa[a[i+<span class="number">1</span>]][<span class="number">0</span>]]++;</div><div class="line">		b[lc]--; b[fa[lc][<span class="number">0</span>]]--;</div><div class="line">	&#125;</div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b[i]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4152: [AMPPZ2014]The Captain]]></title>
      <url>/2017/05/11/BZOJ-4152-AMPPZ2014-The-Captain/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给定平面上的$n$个点，定义$(x1,y1)$到$(x2,y2)$的费用为$min(|x1-x2|,|y1-y2|)$，求从$1$号点走到$n$号点的最小费用。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含一个正整数$n(2\leq n\leq 200000)$，表示点数。<br>接下来$n$行，每行包含两个整数$x[i],y[i](0\leq x[i],y[i]\leq 10^9)$，依次表示每个点的坐标。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一个整数，即最小费用。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5<br>2 2<br>1 1<br>4 5<br>7 1<br>6 7</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这题有毒，<del>我Dijkstra写炸了调了一个钟头。</del><br>先按x轴坐标排序，然后把相邻的点连边（如果x轴的绝对值小于等于y轴的绝对值）。y轴同理。<br>然后跑dijkstra就好了</p>
<p><span class="meiryo"><br>その足を止めないでよ<br>その両手で羽ばたけるから<br></span></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	ll x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y, id;</div><div class="line">&#125;a[N];</div><div class="line"><span class="keyword">struct</span> edge&#123;</div><div class="line">	<span class="keyword">int</span> to, nxt;</div><div class="line">	ll val;</div><div class="line">&#125;e[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">struct</span> qq&#123;</div><div class="line">	<span class="keyword">int</span> to;</div><div class="line">	ll val;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> qq &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> val &gt; b.val;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line">priority_queue&lt;qq&gt; q;</div><div class="line"><span class="keyword">int</span> head[N], cnt;</div><div class="line">ll dis[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node a, node b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.x &lt; b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(node a, node b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.y &lt; b.y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, ll z)</span></span>&#123;</div><div class="line">	e[++cnt] = (edge)&#123;y, head[x], z&#125;; head[x] = cnt;</div><div class="line">	e[++cnt] = (edge)&#123;x, head[y], z&#125;; head[y] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		a[i].x = read(); a[i].y = read();</div><div class="line">		a[i].id = i;</div><div class="line">	&#125;</div><div class="line">	sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>, cmp1);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">if</span>(a[i+<span class="number">1</span>].x-a[i].x &lt;= <span class="built_in">abs</span>(a[i].y-a[i+<span class="number">1</span>].y))</div><div class="line">		ins(a[i].id, a[i+<span class="number">1</span>].id, a[i+<span class="number">1</span>].x-a[i].x);</div><div class="line">	sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>, cmp2);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="keyword">if</span>(a[i+<span class="number">1</span>].y-a[i].y &lt;= <span class="built_in">abs</span>(a[i].x-a[i+<span class="number">1</span>].x))</div><div class="line">		ins(a[i].id, a[i+<span class="number">1</span>].id, a[i+<span class="number">1</span>].y-a[i].y);</div><div class="line">	<span class="built_in">memset</span>(dis, <span class="number">127</span>/<span class="number">3</span>, <span class="keyword">sizeof</span> dis);</div><div class="line">	dis[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">	q.push((qq)&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</div><div class="line">	<span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">		qq tmp = q.top(); q.pop();</div><div class="line">		<span class="keyword">if</span>(dis[tmp.to] != tmp.val) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[tmp.to]; i; i = e[i].nxt)&#123;</div><div class="line">			<span class="keyword">if</span>(dis[e[i].to] &gt; dis[tmp.to]+e[i].val)&#123;</div><div class="line">				dis[e[i].to] = dis[tmp.to]+e[i].val;</div><div class="line">				q.push((qq)&#123;e[i].to, dis[e[i].to]&#125;);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dis[n]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在命令行预览文件的小程序]]></title>
      <url>/2017/05/09/%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%A2%84%E8%A7%88%E6%96%87%E4%BB%B6%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>你有没有遇到过这种情况？</p>
<blockquote>
<p>我只想查看一个文件的第一行，但是它太大了，打开它太慢了。</p>
</blockquote>
<p>这时候就是本程序大展身手的好时机了。</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><div class="line">LOOK [-L] [-N num] <span class="built_in">path</span> 或者 LOOK -?</div></pre></td></tr></table></figure>
<ul>
<li>[-L] - 是否显示行号（可选）</li>
<li>[-N num] - 要显示的行数（默认999999）（可选）</li>
<li>path - 文件路径（必须）</li>
</ul>
<p>把编译过的代码放到某个path路径里就可以用cmd玩了。<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> lin = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(argc &gt; <span class="number">1</span>)</div><div class="line">	<span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'-'</span> || argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>)</div><div class="line">		<span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] == <span class="string">'?'</span>)</div><div class="line">			argc = <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(argc == <span class="number">1</span>)&#123;</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"Check a file."</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"LOOK [-L] [-N num] [path]"</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"  -L         Show line-numbers or not."</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"  -N [num]   Lines that you want to see."</span>);</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"  path       The path of the file that you want to see."</span>);</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'-'</span> || argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>)</div><div class="line">		<span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] == <span class="string">'l'</span> || argv[<span class="number">1</span>][<span class="number">1</span>] == <span class="string">'L'</span>)</div><div class="line">			lin = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> maxline = <span class="number">999999</span>, fl = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(argv[lin+<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'-'</span> || argv[lin+<span class="number">1</span>][<span class="number">0</span>] == <span class="string">'/'</span>)</div><div class="line">		<span class="keyword">if</span>(argv[lin+<span class="number">1</span>][<span class="number">1</span>] == <span class="string">'n'</span> || argv[lin+<span class="number">1</span>][<span class="number">1</span>] == <span class="string">'N'</span>)&#123;</div><div class="line">			fl = <span class="number">2</span>;</div><div class="line">			<span class="keyword">int</span> len = <span class="built_in">strlen</span>(argv[lin+<span class="number">2</span>]), x = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">				x = x*<span class="number">10</span>+argv[lin+<span class="number">2</span>][i]-<span class="string">'0'</span>;</div><div class="line">			maxline = x;</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">string</span> str;</div><div class="line">	ifstream is;</div><div class="line">	is.open(argv[lin+fl+<span class="number">1</span>]);</div><div class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(getline(is, str) &amp;&amp; ++a &lt;= maxline)&#123;</div><div class="line">		<span class="keyword">if</span>(lin) <span class="built_in">printf</span>(<span class="string">"%6d: "</span>, a);</div><div class="line">		<span class="built_in">puts</span>(str.c_str());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(a &gt; maxline) <span class="built_in">puts</span>(<span class="string">"..."</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 颓废 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作品发布 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4195: [Noi2015]程序自动分析]]></title>
      <url>/2017/05/09/BZOJ-4195-Noi2015-%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在实现程序自动分析的过程中,常常需要判定一些约束条件是否能被同时满足。<br>考虑一个约束满足问题的简化版本：假设$x1,x2,x3,…$代表程序中出现的变量，给定$n$个形如$xi=xj$或$xi≠xj$的变量相等/不等的约束条件，请判定是否可以分别为每一个变量赋予恰当的值，使得上述所有约束条件同时被满足。例如，一个问题中的约束条件为：$x1=x2,x2=x3,x3=x4,x1≠x4$，这些约束条件显然是不可能同时被满足的，因此这个问题应判定为不可被满足。<br>现在给出一些约束满足问题，请分别对它们进行判定。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入文件的第1行包含1个正整数t，表示需要判定的问题个数。注意这些问题之间是相互独立的。<br>对于每个问题，包含若干行：<br>第1行包含1个正整数n，表示该问题中需要被满足的约束条件个数。<br>接下来n行，每行包括3个整数i,j,e，描述1个相等/不等的约束条件，相邻整数之间用单个空格隔开。若e=1，则该约束条件为xi=xj；若e=0，则该约束条件为xi≠xj。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出文件包括t行。<br>输出文件的第k行输出一个字符串“YES”或者“NO”（不包含引号，字母全部大写），“YES”表示输入中的第k个问题判定为可以被满足，“NO”表示不可被满足。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2<br>2<br>1 2 1<br>1 2 0<br>2<br>1 2 1<br>2 1 1</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>NO<br>YES</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>在第一个问题中，约束条件为：$x1=x2,x1≠x2$。这两个约束条件互相矛盾，因此不可被同时满足。<br>在第二个问题中，约束条件为：$x1=x2,x2=x1$。这两个约束条件是等价的，可以被同时满足。<br>$1\leq n\leq 1000000$<br>$1\leq i,j\leq 1000000000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>一眼看觉得是并查集水题。<br>发现i和j的范围有点大，那就再来个离散化好了。<br>哎，过了。。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y, type;</div><div class="line">&#125;ask[N];</div><div class="line"><span class="keyword">int</span> a[N&lt;&lt;<span class="number">1</span>], b[N&lt;&lt;<span class="number">1</span>], fa[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">0</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> f?-x:x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> xx = find(x), yy = find(y);</div><div class="line">	<span class="keyword">if</span>(xx == yy) <span class="keyword">return</span>;</div><div class="line">	fa[xx] = yy;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> T = read();</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		<span class="keyword">int</span> n = read(); b[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x, y, z; i &lt;= n; i++)&#123;</div><div class="line">			x = read(); y = read(); z = read();</div><div class="line">			a[(i&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>] = x; a[i&lt;&lt;<span class="number">1</span>] = y; ask[i] = (node)&#123;x, y, z&#125;;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> n2 = n &lt;&lt; <span class="number">1</span>;</div><div class="line">		sort(a+<span class="number">1</span>, a+n2+<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n2; i++)</div><div class="line">			<span class="keyword">if</span>(a[i] != a[i<span class="number">-1</span>]) b[++b[<span class="number">0</span>]] = a[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">			ask[i].x = lower_bound(b+<span class="number">1</span>, b+b[<span class="number">0</span>]+<span class="number">1</span>, ask[i].x)-b;</div><div class="line">			ask[i].y = lower_bound(b+<span class="number">1</span>, b+b[<span class="number">0</span>]+<span class="number">1</span>, ask[i].y)-b;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++) fa[i] = i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">if</span>(ask[i].type) merge(ask[i].x, ask[i].y);</div><div class="line">		<span class="keyword">bool</span> flag = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">if</span>(!ask[i].type) <span class="keyword">if</span>(find(ask[i].x) == find(ask[i].y))&#123;</div><div class="line">				flag = <span class="number">1</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="built_in">puts</span>(flag?<span class="string">"NO"</span>:<span class="string">"YES"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1196: [HNOI2006]公路修建问题]]></title>
      <url>/2017/05/05/BZOJ-1196-HNOI2006-%E5%85%AC%E8%B7%AF%E4%BF%AE%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>OI island是一个非常漂亮的岛屿,自开发以来,到这儿来旅游的人很多。然而，由于该岛屿刚刚开发不久，所以那里的交通情况还是很糟糕。所以，OIER Association组织成立了，旨在建立OI island的交通系统。 OI island有$n$个旅游景点，不妨将它们从$1$到$n$标号。现在，OIER Association需要修公路将这些景点连接起来。一条公路连接两个景点。公路有，不妨称它们为一级公路和二级公路。一级公路上的车速快，但是修路的花费要大一些。 OIER Association打算修$n-1$条公路将这些景点连接起来（使得任意两个景点之间都会有一条路径）。为了保证公路系统的效率, OIER Association希望在这$n-1$条公路之中,至少有$k$条$(0≤k≤n-1)$一级公路。OIER Association也不希望为一条公路花费的钱。所以，他们希望在满足上述条件的情况下，花费最多的一条公路的花费尽可能的少。而你的任务就是，在给定一些可能修建的公路的情况下，选择$n-1$条公路，满足上面的条件。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行有三个数$n(1≤n≤10000),k(0≤k≤n-1),m(n-1≤m≤20000)$，这些数之间用空格分开。 $n$和$k$如前所述，$m$表示有$m$对景点之间可以修公路。以下的$m-1$行，每一行有4个正整数$a,b,c1,c2 (1≤a,b≤n,a≠b,1≤c2≤c1≤30000)$表示在景点$a$与$b$ 之间可以修公路,如果修一级公路,则需要$c1$的花费,如果修二级公路,则需要$c2$的花费。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一个数据，表示花费最大的公路的花费。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>10 4 20<br>3 9 6 3<br>1 3 4 1<br>5 3 10 2<br>8 9 8 7<br>6 8 8 3<br>7 1 3 2<br>4 9 9 5<br>10 8 9 1<br>2 6 9 1<br>6 7 9 8<br>2 6 2 1<br>3 8 9 5<br>3 2 9 6<br>1 6 10 3<br>5 6 3 1<br>2 7 6 1<br>7 8 6 2<br>10 9 2 1<br>7 1 10 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>5</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>二分一下答案。<br>判断的话就先把$c1\leq mid$的边全部拿出来，看看有没有到达$k$条。<br>然后再把$c2\leq mid$的边全部加上去，看看能不能形成一棵树。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>,ch=getchar();</div><div class="line">	<span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y, c1, c2;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">		x = ::read(); y = ::read();</div><div class="line">		c1 = ::read(); c2 = ::read();</div><div class="line">	&#125;</div><div class="line">&#125;e[N];</div><div class="line"><span class="keyword">int</span> fa[N], n, k, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> xs)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y; i &lt; m; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(e[i].c1 &gt; xs) <span class="keyword">continue</span>;</div><div class="line">		x = find(e[i].x); y = find(e[i].y);</div><div class="line">		<span class="keyword">if</span>(x == y) <span class="keyword">continue</span>;</div><div class="line">		fa[x] = y; ans++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(ans &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; m; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(e[i].c2 &gt; xs) <span class="keyword">continue</span>;</div><div class="line">		x = find(e[i].x); y = find(e[i].y);</div><div class="line">		<span class="keyword">if</span>(x == y) <span class="keyword">continue</span>;</div><div class="line">		fa[x] = y; ans++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans == n<span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = read(); k = read(); m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) e[i].read();</div><div class="line">	<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">30000</span>, mid;</div><div class="line">	<span class="keyword">while</span>(l &lt; r)&#123;</div><div class="line">		mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(check(mid)) r = mid;</div><div class="line">		<span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1143: [CTSC2008]祭祀river]]></title>
      <url>/2017/05/04/BZOJ-1143-CTSC2008-%E7%A5%AD%E7%A5%80river/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在遥远的东方，有一个神秘的民族，自称Y族。他们世代居住在水面上，奉龙王为神。每逢重大庆典， Y族都<br>会在水面上举办盛大的祭祀活动。我们可以把Y族居住地水系看成一个由岔口和河道组成的网络。每条河道连接着<br>两个岔口，并且水在河道内按照一个固定的方向流动。显然，水系中不会有环流（下图描述一个环流的例子）。<br><img src="http://www.lydsy.com/JudgeOnline/images/1143.jpg" alt=""><br>由于人数众多的原因，Y族的祭祀活动会在多个岔口上同时举行。出于对龙王的尊重，这些祭祀地点的选择必<br>须非常慎重。准确地说，Y族人认为，如果水流可以从一个祭祀点流到另外一个祭祀点，那么祭祀就会失去它神圣<br>的意义。族长希望在保持祭祀神圣性的基础上，选择尽可能多的祭祀的地点。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含两个用空格隔开的整数N、M，分别表示岔口和河道的数目，岔口从1到N编号。接下来M行，每行包<br>含两个用空格隔开的整数u、v，描述一条连接岔口u和岔口v的河道，水流方向为自u向v。 N ≤ 100 M ≤ 1 000</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>第一行包含一个整数K，表示最多能选取的祭祀点的个数。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4 4<br>1 2<br>3 4<br>3 2<br>4 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>蒙特卡罗淡定水过。<br>二分图什么的都弱爆了<br><img src="/img/huaji.png" alt=""></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">bool</span> mp[<span class="number">120</span>][<span class="number">120</span>];</div><div class="line"><span class="keyword">int</span> fa[<span class="number">120</span>], q[<span class="number">120</span>],n,m, cnt, ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">r</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">		swap(fa[i], fa[rand()%i+<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	srand(<span class="number">23333</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">		mp[x][y] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">				mp[i][j] = mp[i][j] || mp[i][k]&amp;&amp;mp[k][j];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++)&#123;</div><div class="line">		r(); cnt = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)&#123;</div><div class="line">			<span class="keyword">bool</span> flag = <span class="number">1</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= cnt&amp;&amp;flag; k++)</div><div class="line">				<span class="keyword">if</span>(mp[q[k]][fa[j]] || mp[fa[j]][q[k]])</div><div class="line">					flag = <span class="number">0</span>;</div><div class="line">			<span class="keyword">if</span>(flag) q[++cnt] = fa[j];</div><div class="line">		&#125;</div><div class="line">		ans = max(ans, cnt);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蒙特卡罗 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1033 骨牌覆盖 V2]]></title>
      <url>/2017/05/03/51nod-1033-%E9%AA%A8%E7%89%8C%E8%A6%86%E7%9B%96-V2/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在m*n的一个长方形方格中，用一个1*2的骨牌排满方格。问有多少种不同的排列方法。（$n\leq 5$）<br>例如：3*2的方格，共有3种不同的排法。（由于方案的数量巨大，只输出 Mod 10^9 + 7 的结果）<br><img src="http://img.51nod.com/upload/000fb99c/08cfb32da97093cc00000644.jpeg" alt=""></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>2个数M N，中间用空格分隔（2 &lt;= m &lt;= 10^9，2 &lt;= n &lt;= 5）</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出数量 Mod 10^9 + 7</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2 3<br><a id="more"></a></p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>3</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>状压的思想来构造矩阵。<br>mp.num[i][j]表示上一列由i状态可以转成j状态。<br>这个用dfs求。最后自乘$m+1$次就是答案了</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, n2;</div><div class="line"><span class="keyword">struct</span> mat&#123;</div><div class="line">	ll num[<span class="number">33</span>][<span class="number">33</span>];</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;<span class="built_in">memset</span>(num, <span class="number">0</span>, <span class="keyword">sizeof</span> num);&#125;</div><div class="line">	mat()&#123;clear();&#125;</div><div class="line">	mat(<span class="keyword">bool</span> flag)&#123;clear();<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++)num[i][i]=<span class="number">1</span>;&#125;</div><div class="line">&#125;mp;</div><div class="line">mat <span class="keyword">operator</span> *(<span class="keyword">const</span> mat &amp;a, <span class="keyword">const</span> mat &amp;b)&#123;</div><div class="line">	mat c;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n2; k++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++) <span class="keyword">if</span>(a.num[i][k])</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2; j++) <span class="keyword">if</span>(b.num[k][j])</div><div class="line">				c.num[i][j] = (c.num[i][j]+a.num[i][k]*b.num[k][j])%mod;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line">mat <span class="keyword">operator</span> ^(mat a, <span class="keyword">int</span> b)&#123;</div><div class="line">	<span class="function">mat <span class="title">c</span><span class="params">(<span class="literal">true</span>)</span></span>;</div><div class="line">	<span class="keyword">for</span>(;b;b/=<span class="number">2</span>,a=a*a)<span class="keyword">if</span>(b&amp;<span class="number">1</span>)c=c*a;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">int</span> pre, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(dep &gt; n) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(dep == n)&#123;</div><div class="line">		mp.num[pre][now]++;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	dfs(dep+<span class="number">1</span>, pre&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, now&lt;&lt;<span class="number">1</span>);</div><div class="line">	dfs(dep+<span class="number">1</span>, pre&lt;&lt;<span class="number">1</span>, now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">	dfs(dep+<span class="number">2</span>, pre&lt;&lt;<span class="number">2</span>, now&lt;&lt;<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</div><div class="line">	n2 = <span class="number">1</span> &lt;&lt; n;</div><div class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	mp = mp^(m+<span class="number">1</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, mp.num[<span class="number">0</span>][n2<span class="number">-1</span>]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 矩阵乘法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4809: 皇后]]></title>
      <url>/2017/04/24/BZOJ-4809-%E7%9A%87%E5%90%8E/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>众所不知，rly现在不会玩国际象棋。但是，作为一个OIer，rly当然做过八皇后问题。这里再啰嗦几句，皇后可以攻击到同行同列同对角线，在n*n的方格中摆n个皇后使其互不攻击到，求不同的解的数量，这就是经典的n皇后问题。现在问题推广到n皇后问题，这个问题对于你而言实在是小菜一叠。但因为上一次rly把棋盘弄破了，又拿不出新的，所以rly打算难一点点，问题就是破棋盘上的n皇后问题。他想知道……（你们懂的）。<br>棋子都是相同的。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>一行，一个正整数N。<br>接下来N行，每行N个数，要么为0，表示没坏，要么1，表示坏了。<br>N&lt;=16<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>一行，输出不同的解的数量。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4<br>1 0 1 1<br>1 1 1 0<br>0 1 1 1<br>1 1 0 1</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>暴。。暴力过了。。。<br>还是这题本来就是暴力。。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> mp[N][N], ans, n;</div><div class="line"><span class="keyword">bool</span> x[N&lt;&lt;<span class="number">1</span>], y[N&lt;&lt;<span class="number">1</span>], r[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(k == n+<span class="number">1</span>)&#123;ans++;<span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(mp[k][i]||r[i]||x[k-i+n]||y[k+i]) <span class="keyword">continue</span>;</div><div class="line">		r[i] = x[k-i+n] = y[k+i] = <span class="number">1</span>;</div><div class="line">		dfs(k+<span class="number">1</span>);</div><div class="line">		r[i] = x[k-i+n] = y[k+i] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mp[i][j]);</div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2716: [Violet 3]天使玩偶]]></title>
      <url>/2017/04/24/BZOJ-2716-Violet-3-%E5%A4%A9%E4%BD%BF%E7%8E%A9%E5%81%B6/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>Ayu在七年前曾经收到过一个天使玩偶，当时她把它当做时间囊埋在了地下。儿七年后的今天，Ayu却忘了她把天使玩偶埋在了哪里，所以她决定仅凭借一点模糊的记忆来寻找它。<br>我们把Ayu生活的小镇看做一个二维平面，而Ayu会不定时的记起可能在某个点$(x,y)$埋下了天使玩偶：或者Ayu会询问你，假如他在$(x,y)$，那么她离最近的天使玩偶可能埋下的地方有多远。<br>因为Ayu只会沿着平行坐标轴的方向来行动，所以在这个问题里我们定义两个点之间的距离为$dist(A,B)=|A_x-B_x|+|A_y-B_y|$。其中$A_x$表示点$A$的横坐标，其余类似。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含两个整数$n$和$m$，在刚开始时，Ayu已经知道有$n$个点可能埋着天使玩偶，接下来Ayu要进行$m$次操作<br>接下来$n$行，每行两个非负整数$x_i,y_i$，表示初始$n$个点的坐标。<br>再接下来$m$行，每行三个非负整数$t,x_i,y_i$。<br>如果$t=1$，则表示Ayu又回忆起了一个可能埋着玩偶的点$(x_i,y_i)$。<br>如果$t=2$，则表示Ayu询问如果她在点$(x_i,y_i)$，那么在已经回忆出来的点里，离她最近的那个点有多远<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个$t=2$的询问，在单独的一行内输出该询问的结果。</p>
<h1 id="Sample-Input-amp-Output"><a href="#Sample-Input-amp-Output" class="headerlink" title="Sample Input &amp; Output"></a>Sample Input &amp; Output</h1><p>样例太长<br><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2716" target="_blank" rel="external">题目链接</a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>可以用k-d树做<br>好像k-d树就是用来做这个的吧。。</p>
<p>P.S. Ayu（<a href="http://baike.baidu.com/link?url=54_Ga1VP9e9NfeA3Viovt-7yiUl58Ngd3kEgEMdmbzVs3iqbmgC5g-V1GpCPwkybT0jAS4ZMW1k5rvwLhZPfFdaJADQtbGV7WJMY_9vLRRdrAeKnH0DGRpqkDwEIl50J" target="_blank" rel="external">月宫亚由</a>）出自《Kanon（雪之少女）》、、推荐补番、、</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> szb, n, m;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> d[<span class="number">2</span>], mn[<span class="number">2</span>], mx[<span class="number">2</span>], l, r;</div><div class="line">	<span class="keyword">int</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> b)&#123;</div><div class="line">		<span class="keyword">return</span> d[b];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a, node b)&#123;</div><div class="line">		<span class="keyword">return</span> a[szb] &lt; b[szb];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(node a, node b)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]-b[<span class="number">0</span>])+<span class="built_in">abs</span>(a[<span class="number">1</span>]-b[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;p[N];</div><div class="line"><span class="keyword">struct</span> kdtree&#123;</div><div class="line">	node t[N], Q;</div><div class="line">	<span class="keyword">int</span> ans, rt;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> l = t[x].l, r = t[x].r;</div><div class="line">		<span class="keyword">if</span>(l)&#123;</div><div class="line">			t[x].mn[<span class="number">0</span>] = min(t[x].mn[<span class="number">0</span>], t[l].mn[<span class="number">0</span>]);</div><div class="line">			t[x].mn[<span class="number">1</span>] = min(t[x].mn[<span class="number">1</span>], t[l].mn[<span class="number">1</span>]);</div><div class="line">			t[x].mx[<span class="number">0</span>] = max(t[x].mx[<span class="number">0</span>], t[l].mx[<span class="number">0</span>]);</div><div class="line">			t[x].mx[<span class="number">1</span>] = max(t[x].mx[<span class="number">1</span>], t[l].mx[<span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(r)&#123;</div><div class="line">			t[x].mn[<span class="number">0</span>] = min(t[x].mn[<span class="number">0</span>], t[r].mn[<span class="number">0</span>]);</div><div class="line">			t[x].mn[<span class="number">1</span>] = min(t[x].mn[<span class="number">1</span>], t[r].mn[<span class="number">1</span>]);</div><div class="line">			t[x].mx[<span class="number">0</span>] = max(t[x].mx[<span class="number">0</span>], t[r].mx[<span class="number">0</span>]);</div><div class="line">			t[x].mx[<span class="number">1</span>] = max(t[x].mx[<span class="number">1</span>], t[r].mx[<span class="number">1</span>]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">		szb = now;</div><div class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">		nth_element(p+l, p+mid, p+r+<span class="number">1</span>);</div><div class="line">		t[mid] = p[mid];</div><div class="line">		t[mid].mn[<span class="number">0</span>] = t[mid].mx[<span class="number">0</span>] = t[mid][<span class="number">0</span>];</div><div class="line">		t[mid].mn[<span class="number">1</span>] = t[mid].mx[<span class="number">1</span>] = t[mid][<span class="number">1</span>];</div><div class="line">		<span class="keyword">if</span>(l &lt; mid) t[mid].l = build(l, mid<span class="number">-1</span>, now^<span class="number">1</span>);</div><div class="line">		<span class="keyword">if</span>(mid &lt; r) t[mid].r = build(mid+<span class="number">1</span>, r, now^<span class="number">1</span>);</div><div class="line">		update(mid); <span class="keyword">return</span> mid;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getmn</span><span class="params">(node a)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span></div><div class="line">			max(Q[<span class="number">0</span>]-a.mx[<span class="number">0</span>], <span class="number">0</span>)+max(a.mn[<span class="number">0</span>]-Q[<span class="number">0</span>], <span class="number">0</span>)+</div><div class="line">			max(Q[<span class="number">1</span>]-a.mx[<span class="number">1</span>], <span class="number">0</span>)+max(a.mn[<span class="number">1</span>]-Q[<span class="number">1</span>], <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">askmn</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">		ans = min(ans, dis(t[x], Q));</div><div class="line">		<span class="keyword">int</span> l = t[x].l, r = t[x].r;</div><div class="line">		<span class="keyword">int</span> dl = l ? getmn(t[l]) : inf;</div><div class="line">		<span class="keyword">int</span> dr = r ? getmn(t[r]) : inf;</div><div class="line">		<span class="keyword">if</span>(dl &lt; dr)&#123;</div><div class="line">			<span class="keyword">if</span>(dl &lt; ans) askmn(l);</div><div class="line">			<span class="keyword">if</span>(dr &lt; ans) askmn(r);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">if</span>(dr &lt; ans) askmn(r);</div><div class="line">			<span class="keyword">if</span>(dl &lt; ans) askmn(l);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">		Q[<span class="number">0</span>] = x; Q[<span class="number">1</span>] = y; ans = inf;</div><div class="line">		askmn(rt); <span class="keyword">return</span> ans;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> now)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(Q[now] &gt; t[x][now])</div><div class="line">			<span class="keyword">if</span>(t[x].r) ins(t[x].r, now^<span class="number">1</span>);</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				t[x].r = ++n; t[n] = Q;</div><div class="line">				t[n].mn[<span class="number">0</span>] = t[n].mx[<span class="number">0</span>] = t[n][<span class="number">0</span>];</div><div class="line">				t[n].mn[<span class="number">1</span>] = t[n].mx[<span class="number">1</span>] = t[n][<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">if</span>(t[x].l) ins(t[x].l, now^<span class="number">1</span>);</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				t[x].l = ++n; t[n] = Q;</div><div class="line">				t[n].mn[<span class="number">0</span>] = t[n].mx[<span class="number">0</span>] = t[n][<span class="number">0</span>];</div><div class="line">				t[n].mn[<span class="number">1</span>] = t[n].mx[<span class="number">1</span>] = t[n][<span class="number">1</span>];</div><div class="line">			&#125;</div><div class="line">		update(x);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">		Q[<span class="number">0</span>] = x; Q[<span class="number">1</span>] = y;</div><div class="line">		ins(rt, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">&#125;kd;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = read(); m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		p[i][<span class="number">0</span>] = read(), p[i][<span class="number">1</span>] = read();</div><div class="line">	kd.rt = kd.build(<span class="number">1</span>, n, <span class="number">0</span>);</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="keyword">int</span> op = read(), x = read(), y = read();</div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>) kd.add(x, y);</div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, kd.ask(x, y));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kdtree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4553: [Tjoi2016&Heoi2016]序列]]></title>
      <url>/2017/04/21/BZOJ-4553-Tjoi2016-Heoi2016-%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>佳媛姐姐过生日的时候，她的小伙伴从某宝上买了一个有趣的玩具送给他。玩具上有一个数列，数列中某些项的值可能会变化，但同一个时刻最多只有一个值发生变化。现在佳媛姐姐已经研究出了所有变化的可能性，她想请教你，能否选出一个子序列，使得在任意一种变化中，这个子序列都是不降的？请你告诉她这个子序列的最长长度即可。注意：每种变化最多只有一个值发生变化。在样例输入1中，所有的变化是：<br>1 2 3<br>2 2 3<br>1 3 3<br>1 1 3<br>1 2 4<br>选择子序列为原序列，即在任意一种变化中均为不降子序列在样例输入2中，所有的变化是：<br>3 3 3<br>3 2 3<br>选择子序列为第一个元素和第三个元素，或者第二个元素和第三个元素，均可满足要求<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入的第一行有两个正整数n, m，分别表示序列的长度和变化的个数。接下来一行有n个数，表示这个数列原始的状态。接下来m行，每行有2个数x, y，表示数列的第x项可以变化成y这个值。1 &lt;= x &lt;= n。所有数字均为正整数，且小于等于100,000。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一个整数，表示对应的答案</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>3 4<br>1 2 3<br>1 2<br>2 3<br>2 1<br>3 4</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>3</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>CDQ分治就是一个递归解决问题的方法<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(l, r)</span>:</span></div><div class="line">	solve(l, mid)</div><div class="line">	work...</div><div class="line">	solve(mid+<span class="number">1</span>, r)</div></pre></td></tr></table></figure></p>
<p>用$f[i]$表示到以第$i$个数结尾的最长的不降子序列长度<br>先统计一下每个数的最小能取到的值$mn[i]$和最大能取到的值$mx[i]$<br>然后把$(mn[i], val[i])$和$(val[i], mx[i])$看成两个点<br>每次转移相当于在一个矩形中找到一个最大值的点<br>然后就可以用CDQ分治+树状数组做了<br>（注意：用memset清理树状数组的话会TLE！）</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m, f[N], c[N], mn[N], mx[N], a[N];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y, id;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> x == b.x ? (y == b.y ? id &lt; b.id : y &lt; b.y) : x &lt; b.x;</div><div class="line">	&#125;</div><div class="line">&#125;p[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(;x&lt;N;x+=x&amp;-x) c[x]=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(;x&lt;N;x+=x&amp;-x) c[x]=max(c[x],v);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(;x;x-=x&amp;-x) ans=max(ans, c[x]);</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l == r)&#123;</div><div class="line">		f[l] = max(f[l], <span class="number">1</span>);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	solve(l, mid);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(i &lt;= mid) p[i].x = a[i], p[i].y = mx[i];</div><div class="line">		<span class="keyword">else</span> p[i].x = mn[i], p[i].y = a[i];</div><div class="line">		p[i].id = i;</div><div class="line">	&#125;</div><div class="line">	sort(p+l, p+r+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</div><div class="line">		<span class="keyword">if</span>(p[i].id &lt;= mid) add(p[i].y, f[p[i].id]);</div><div class="line">		<span class="keyword">else</span> f[p[i].id] = max(f[p[i].id], ask(p[i].y)+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</div><div class="line">		<span class="keyword">if</span>(p[i].id &lt;= mid) clean(p[i].y);</div><div class="line">	solve(mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = read(); m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		mx[i] = mn[i] = a[i] = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt;= m; i++)&#123;</div><div class="line">		x = read(); y = read();</div><div class="line">		mx[x] = max(mx[x], y);</div><div class="line">		mn[x] = min(mn[x], y);</div><div class="line">	&#125;</div><div class="line">	solve(<span class="number">1</span>, n); <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		ans = max(ans, f[i]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2242: [SDOI2011]计算器]]></title>
      <url>/2017/04/20/BZOJ-2242-SDOI2011-%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>你被要求设计一个计算器完成以下三项任务：</p>
<ol>
<li>给定y,z,p，计算$y^zmod\ p$的值；</li>
<li>给定y,z,p，计算满足$xy\equiv z\pmod p$的最小非负整数；</li>
<li>给定y,z,p，计算满足$y^x\equiv z\pmod p$的最小非负整数。</li>
</ol>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入包含多组数据。<br>第一行包含两个正整数T,K分别表示数据组数和询问类型（对于一个测试点内的所有数据，询问类型相同）。<br>以下行每行包含三个正整数y,z,p，描述一个询问。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个询问，输出一行答案。对于询问类型2和3，如果不存在满足条件的，则输出“Orz, I cannot find x!”，注意逗号与“I”之间有一个空格。<br><a id="more"></a></p>
<h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h1><p>3 1<br>2 1 3<br>2 2 3<br>2 3 3</p>
<h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h1><p>2<br>1<br>2</p>
<h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input #2"></a>Sample Input #2</h1><p>3 2<br>2 1 3<br>2 2 3<br>2 3 3</p>
<h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output #2"></a>Sample Output #2</h1><p>2<br>1<br>0</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>对于100%的数据，1&lt;=y,z,p&lt;=10^9，为质数，1&lt;=T&lt;=10。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>第一问就不说了<br>第二问就是exgcd<br>第三问就是BSGS<br>BSGS就是求$a^x\equiv b\pmod p$的最小非负数解用的<br>基本思路是这样的：<br>如果$p$是质数，或者说$p$与$a$互质，那么：任意取一自然数$m(m\leq p)$。可令$x=km-r$，其中$(m&gt;r\geq0)$。代入方程：$a^{km}=ba^r\pmod p$。将$r$从$0$循环到$m-1$，计算出所有$ba^r\pmod p$，然后把每一个取值所对应的$r$存在一个哈希表里。如果$p$比较大就开$map$，如果$p$比较小就直接用数组把。并且这个取值和$r$不是一一对应的，但是这并无大碍。然后计算$a^m$，并且将$k$从$1$循环到$p/m$，对于每一个$k$计算出$a^{km}$，然后在哈希表中寻找有没有对应的$r$存在。如果存在那么就找到了一个解$x=km-r$。如果用$map$做哈希表：效率$\Theta((m+n/m)logm)$。在$m=[\sqrt n]$时效率最高。<br>简单来说，步骤为：</p>
<ol>
<li>令$m=\lceil\sqrt p\rceil(向上取整)$</li>
<li>枚举$a^0,a^1,…,a^{m-1}$，将这些数插入哈希表</li>
<li>令$d=a^m$枚举$d^0,d^1,…,d^m$</li>
<li>对于枚举到的每一个$d^i$，利用EXGCD求出$d^i*x≡b\pmod p$的唯一非负整数解，去Hash表中寻找$x$是否出现过。</li>
<li>如果找到$x=a^j$，那么答案为$i*m+j$</li>
<li>如果枚举结束仍未找到$x$，则无解。</li>
</ol>
<p><a href="http://lbn187.is-programmer.com/posts/103186.html" target="_blank" rel="external">我哪里抄来的重要吗</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 我tm全开long long才过</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">ll <span class="title">power</span><span class="params">(ll x, ll y, ll p)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">1</span>;x%=p;</div><div class="line">	<span class="keyword">while</span>(y)&#123;</div><div class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans = ans*x%p;</div><div class="line">		x = x*x%p;</div><div class="line">		y &gt;&gt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">work1</span><span class="params">(ll x, ll y, ll p)</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, power(x, y, p));</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span>&#123;<span class="keyword">return</span> b?gcd(b, a%b):a;&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!b)&#123; x = <span class="number">1</span>, y = <span class="number">0</span>; <span class="keyword">return</span>;&#125;</div><div class="line">	exgcd(b, a%b, x, y);</div><div class="line">	ll t = x; x = y; y = t-a/b*y;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">work2</span><span class="params">(ll y, ll z, ll p)</span></span>&#123;</div><div class="line">	ll t = gcd(y, -p);</div><div class="line">	<span class="keyword">if</span>(z%t) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</div><div class="line">	y /= t, z /= t, p = -p/t;</div><div class="line">	ll a, b; exgcd(y, p, a, b);</div><div class="line">	a = a*z%p;</div><div class="line">	<span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += p;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a);</div><div class="line">&#125;</div><div class="line"><span class="built_in">map</span>&lt;ll, ll&gt; mp;</div><div class="line"><span class="function">ll <span class="title">work3</span><span class="params">(ll y, ll z, ll p)</span></span>&#123;</div><div class="line">	mp.clear(); y %= p;</div><div class="line">	<span class="keyword">if</span>(!y&amp;&amp;!z)<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</div><div class="line">	<span class="keyword">if</span>(!y)<span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</div><div class="line">	ll m = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)), t = <span class="number">1</span>;</div><div class="line">	mp[<span class="number">1</span>] = m+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt; m; i++)&#123;</div><div class="line">		t = t*y%p;</div><div class="line">		<span class="keyword">if</span>(!mp[t])mp[t]=i;</div><div class="line">	&#125;</div><div class="line">	ll tmp = power(y, p-m<span class="number">-1</span>, p), ine = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(ll k = <span class="number">0</span>; k &lt; m; k++)&#123;</div><div class="line">		ll i = mp[z*ine%p];</div><div class="line">		<span class="keyword">if</span>(i)&#123;</div><div class="line">			<span class="keyword">if</span>(i == m+<span class="number">1</span>) i=<span class="number">0</span>;</div><div class="line">			<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, k*m+i);</div><div class="line">		&#125;</div><div class="line">		ine = ine*tmp%p;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	ll T, k, x, y, z;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;T, &amp;k);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">		<span class="keyword">switch</span>(k)&#123;</div><div class="line">			<span class="keyword">case</span> <span class="number">1</span>: work1(x, y, z); <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">2</span>: work2(x, y, z); <span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> <span class="number">3</span>: work3(x, y, z); <span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1085: [SCOI2005]骑士精神]]></title>
      <url>/2017/04/20/BZOJ-1085-SCOI2005-%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在一个5×5的棋盘上有12个白色的骑士和12个黑色的骑士， 且有一个空位。在任何时候一个骑士都能按照骑士的走法（它可以走到和它横坐标相差为1，纵坐标相差为2或者横坐标相差为2，纵坐标相差为1的格子）移动到空位上。 给定一个初始的棋盘，怎样才能经过移动变成如下目标棋盘： 为了体现出骑士精神，他们必须以最少的步数完成任务。<br><img src="http://www.lydsy.com/JudgeOnline/upload/201303/aa.jpg" alt=""></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行有一个正整数T(T&lt;=10)，表示一共有N组数据。接下来有T个5×5的矩阵，0表示白色骑士，1表示黑色骑士，*表示空位。两组数据之间没有空行。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每组数据都输出一行。如果能在15步以内（包括15步）到达目标状态，则输出步数，否则输出－1。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2<br>10110<br>01*11<br>10111<br>01001<br>00000<br>01011<br>110*1<br>01110<br>01010<br>00100</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>7<br>-1</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>爆搜肯定妥妥的TLE<br>所以就用IDA*好了<br>预计的步数就是现在与目标状态互不相同的个数<br>然后再用迭代深搜</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> read(a) scanf(<span class="meta-string">"%d"</span>, &amp;a)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> write(a) printf(<span class="meta-string">"%d\n"</span>, a);</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ans[<span class="number">6</span>][<span class="number">6</span>] = &#123;</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</div><div class="line">	&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</div><div class="line"><span class="keyword">int</span> mp[<span class="number">6</span>][<span class="number">6</span>], k;</div><div class="line"><span class="keyword">int</span> sx[<span class="number">8</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">2</span>, <span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</div><div class="line"><span class="keyword">int</span> sy[<span class="number">8</span>] = &#123;<span class="number">2</span>,<span class="number">-2</span>, <span class="number">2</span>,<span class="number">-2</span>, <span class="number">1</span>,<span class="number">-1</span>, <span class="number">1</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)</div><div class="line">	<span class="keyword">if</span>(ans[i][j] != mp[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)</div><div class="line">	sum += ans[i][j] != mp[i][j];</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(step == k) <span class="keyword">return</span> ok();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">		<span class="keyword">int</span> xx = x+sx[i], yy = y+sy[i];</div><div class="line">		<span class="keyword">if</span>(xx&gt;<span class="number">5</span>||xx&lt;<span class="number">1</span>||yy&gt;<span class="number">5</span>||yy&lt;<span class="number">1</span>)<span class="keyword">continue</span>;</div><div class="line">		swap(mp[xx][yy], mp[x][y]);</div><div class="line">		<span class="keyword">if</span>(get()+step &lt;= k)<span class="keyword">if</span>(dfs(step+<span class="number">1</span>, xx, yy))<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		swap(mp[xx][yy], mp[x][y]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> T, x, y; read(T);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		<span class="keyword">char</span> ch;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</div><div class="line">			ch=getchar();</div><div class="line">			<span class="keyword">while</span>(ch!=<span class="string">'0'</span>&amp;&amp;ch!=<span class="string">'1'</span>&amp;&amp;ch!=<span class="string">'*'</span>)ch=getchar();</div><div class="line">			<span class="keyword">if</span>(ch == <span class="string">'*'</span>) mp[x=i][y=j] = <span class="number">2</span>;</div><div class="line">			<span class="keyword">else</span> mp[i][j] = ch-<span class="string">'0'</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(k = <span class="number">1</span>; k &lt;= <span class="number">15</span>; k++)</div><div class="line">			<span class="keyword">if</span>(dfs(<span class="number">0</span>, x, y))&#123;</div><div class="line">				write(k);</div><div class="line">				flag = <span class="number">1</span>;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">if</span>(!flag) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 启发式搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4491: 我也不知道题目名字是什么]]></title>
      <url>/2017/04/17/BZOJ-4491-%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E9%A2%98%E7%9B%AE%E5%90%8D%E5%AD%97%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>给定一个序列A[i]，每次询问l,r，求[l,r]内最长子串，使得该子串为不上升子串或不下降子串</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行$n$，表示$A$数组有多少元素<br>接下来一行为$n$个整数$A_i$<br>接下来一个整数$Q$，表示询问数量<br>接下来$Q$行，每行2个整数$l$，$r$</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个询问，求[l,r]内最长子串，使得该子串为不上升子串或不下降子串<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>9<br>1 2 3 4 5 6 5 4 3<br>5<br>1 6<br>1 7<br>2 7<br>1 9<br>5 9</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>6<br>6<br>5<br>6<br>4</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>【样例解释】<br>五个询问分别对应<br>[1,6][1,6][2,6][1,6][6,9]</p>
<p>$N,Q\leq 50000$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>线段树。。<br>一颗维护上升序列，一颗维护下降序列。。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> tree&#123;</div><div class="line">	<span class="keyword">int</span> val[<span class="number">50020</span>];</div><div class="line">	<span class="keyword">struct</span> node&#123;</div><div class="line">		<span class="keyword">int</span> lx, rx, l, r, mx;</div><div class="line">	&#125;tr[N&lt;&lt;<span class="number">2</span>];</div><div class="line">	<span class="function">node <span class="title">merge</span><span class="params">(<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b)</span></span>&#123;</div><div class="line">		node c; c.l = a.l, c.r = b.r;</div><div class="line">		c.lx = a.lx, c.rx = b.rx; c.mx = max(a.mx, b.mx);</div><div class="line">		<span class="keyword">if</span>(c.lx == a.r-a.l+<span class="number">1</span> &amp;&amp; val[a.r] &lt;= val[a.r+<span class="number">1</span>]) c.lx += b.lx;</div><div class="line">		<span class="keyword">if</span>(c.rx == b.r-b.l+<span class="number">1</span> &amp;&amp; val[a.r] &lt;= val[a.r+<span class="number">1</span>]) c.rx += a.rx;</div><div class="line">		<span class="keyword">if</span>(val[a.r] &lt;= val[a.r+<span class="number">1</span>]) c.mx = max(c.mx, a.rx+b.lx);</div><div class="line">		<span class="keyword">return</span> c;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(l == r)&#123;</div><div class="line">			tr[x].l = l, tr[x].r = r;</div><div class="line">			tr[x].mx = tr[x].lx = tr[x].rx = <span class="number">1</span>;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">		build(x&lt;&lt;<span class="number">1</span>, l, mid); build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">		tr[x] = merge(tr[x&lt;&lt;<span class="number">1</span>], tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">	<span class="function">node <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">		<span class="keyword">if</span>(tr[x].l == l &amp;&amp; tr[x].r == r) <span class="keyword">return</span> tr[x];</div><div class="line">		<span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> merge(ask(x&lt;&lt;<span class="number">1</span>, l, mid), ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r));</div><div class="line">	&#125;</div><div class="line">&#125;up,down;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) down.val[i]=-(up.val[i]=read());</div><div class="line">	down.build(<span class="number">1</span>, <span class="number">1</span>, n), up.build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">	<span class="keyword">int</span> m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, l, r; i &lt;= m; i++)&#123;</div><div class="line">		l = read(); r = read();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(down.ask(<span class="number">1</span>, l, r).mx, up.ask(<span class="number">1</span>, l, r).mx));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4551: [Tjoi2016&Heoi2016]树]]></title>
      <url>/2017/04/17/BZOJ-4551-Tjoi2016-Heoi2016-%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>在2016年，佳媛姐姐刚刚学习了树，非常开心。现在他想解决这样一个问题：给定一颗有根树（根为1），有以下两种操作：</p>
<ol>
<li>标记操作：对某个结点打上标记（在最开始，只有结点1有标记，其他结点均无标记，而且对于某个结点，可以打多次标记。）</li>
<li>询问操作：询问某个结点最近的一个打了标记的祖先（这个结点本身也算自己的祖先）你能帮帮他吗?</li>
</ol>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入第一行两个正整数N和Q分别表示节点个数和操作次数接下来N-1行，每行两个正整数u,v(1≤u,v≤n)表示u到v<br>有一条有向边接下来Q行，形如“opernum”oper为“C”时表示这是一个标记操作,oper为“Q”时表示这是一个询<br>问操作对于每次询问操作，1 ≤ N, Q ≤ 100000。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一个正整数，表示结果</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5 5<br>1 2<br>1 3<br>2 4<br>2 5<br>Q 2<br>C 2<br>Q 2<br>Q 5<br>Q 3</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1<br>2<br>2<br>1</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>第一眼树剖<br>然后因为懒得打，百度了一下题解，发现有并查集的做法<br>就是离线倒着求解，一开始把所有的点都连向他的父亲，把所有打过标记的点都连向他自身<br>然后就可以用并查集啦，遇到C操作，就把flag[x]–，如果flag[x]==0就把他连向他的父亲<br><del>眼瞎导致两遍才过</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> fa[N], fl[N], ans[N], _fa[N], cnt;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">struct</span> ask&#123;</div><div class="line">	<span class="keyword">char</span> type;</div><div class="line">	<span class="keyword">int</span> val;</div><div class="line">&#125;qus[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=find(fa[x]);&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n=read(); m=read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; i++)&#123;</div><div class="line">		x=read(); y=read();</div><div class="line">		fa[y] = _fa[y] = x;</div><div class="line">	&#125;fa[<span class="number">1</span>]=<span class="number">1</span>; fl[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">char</span> ch=getchar();</div><div class="line">		<span class="keyword">while</span>(ch!=<span class="string">'C'</span>&amp;&amp;ch!=<span class="string">'Q'</span>)ch=getchar(); x=read();</div><div class="line">		qus[i].type = ch; qus[i].val = x;</div><div class="line">		<span class="keyword">if</span>(ch==<span class="string">'C'</span>)fl[x]++, fa[x]=x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = m; i; i--)</div><div class="line">		<span class="keyword">if</span>(qus[i].type==<span class="string">'C'</span>)&#123;</div><div class="line">			fl[qus[i].val]--;</div><div class="line">			<span class="keyword">if</span>(!fl[qus[i].val])fa[qus[i].val]=_fa[qus[i].val];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> ans[i] = find(qus[i].val);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</div><div class="line">	<span class="keyword">if</span>(ans[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2049: [Sdoi2008]Cave 洞穴勘测]]></title>
      <url>/2017/04/14/BZOJ-2049-Sdoi2008-Cave-%E6%B4%9E%E7%A9%B4%E5%8B%98%E6%B5%8B/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>辉辉热衷于洞穴勘测。某天，他按照地图来到了一片被标记为JSZX的洞穴群地区。经过初步勘测，辉辉发现这片区域由n个洞穴（分别编号为1到n）以及若干通道组成，并且每条通道连接了恰好两个洞穴。假如两个洞穴可以通过一条或者多条通道按一定顺序连接起来，那么这两个洞穴就是连通的，按顺序连接在一起的这些通道则被称之为这两个洞穴之间的一条路径。洞穴都十分坚固无法破坏，然而通道不太稳定，时常因为外界影响而发生改变，比如，根据有关仪器的监测结果，123号洞穴和127号洞穴之间有时会出现一条通道，有时这条通道又会因为某种稀奇古怪的原因被毁。辉辉有一台监测仪器可以实时将通道的每一次改变状况在辉辉手边的终端机上显示：如果监测到洞穴u和洞穴v之间出现了一条通道，终端机上会显示一条指令 Connect u v 如果监测到洞穴u和洞穴v之间的通道被毁，终端机上会显示一条指令 Destroy u v 经过长期的艰苦卓绝的手工推算，辉辉发现一个奇怪的现象：无论通道怎么改变，任意时刻任意两个洞穴之间至多只有一条路径。因而，辉辉坚信这是由于某种本质规律的支配导致的。因而，辉辉更加夜以继日地坚守在终端机之前，试图通过通道的改变情况来研究这条本质规律。然而，终于有一天，辉辉在堆积成山的演算纸中崩溃了……他把终端机往地面一砸（终端机也足够坚固无法破坏），转而求助于你，说道：“你老兄把这程序写写吧”。辉辉希望能随时通过终端机发出指令 Query u v，向监测仪询问此时洞穴u和洞穴v是否连通。现在你要为他编写程序回答每一次询问。已知在第一条指令显示之前，JSZX洞穴群中没有任何通道存在。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行为两个正整数n和m，分别表示洞穴的个数和终端机上出现过的指令的个数。以下m行，依次表示终端机上出现的各条指令。每行开头是一个表示指令种类的字符串s（”Connect”、”Destroy”或者”Query”，区分大小写），之后有两个整数u和v (1≤u, v≤n且u≠v) 分别表示两个洞穴的编号。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对每个Query指令，输出洞穴u和洞穴v是否互相连通：是输出”Yes”，否则输出”No”。（不含双引号）</p>
<h1 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input #1"></a>Sample Input #1</h1><p>200 5<br>Query 123 127<br>Connect 123 127<br>Query 123 127<br>Destroy 127 123<br>Query 123 127</p>
<h1 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output #1"></a>Sample Output #1</h1><p>No<br>Yes<br>No</p>
<h1 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input #2"></a>Sample Input #2</h1><p>3 5<br>Connect 1 2<br>Connect 3 1<br>Query 2 3<br>Destroy 1 3<br>Query 2 3</p>
<h1 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output #2"></a>Sample Output #2</h1><p>Yes<br>No</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>数据说明</p>
<ul>
<li>10%的数据满足n≤1000，m≤20000</li>
<li>20%的数据满足n≤2000，m≤40000</li>
<li>30%的数据满足n≤3000，m≤60000</li>
<li>40%的数据满足n≤4000，m≤80000</li>
<li>50%的数据满足n≤5000，m≤100000</li>
<li>60%的数据满足n≤6000，m≤120000</li>
<li>70%的数据满足n≤7000，m≤140000</li>
<li>80%的数据满足n≤8000，m≤160000</li>
<li>90%的数据满足n≤9000，m≤180000</li>
<li>100%的数据满足n≤10000，m≤200000</li>
</ul>
<p>保证所有Destroy指令将摧毁的是一条存在的通道<br>本题输入、输出规模比较大，建议c\c++选手使用scanf和printf进行I\O操作以免超时<br><del>（说得好像cin cout可以用一样的）</del></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>就是LCT模板题。。<br>这玩意和纯Splay区别还是蛮大的</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> c[N][<span class="number">2</span>], fa[N], rev[N], st[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> c[fa[x]][<span class="number">0</span>] != x &amp;&amp; c[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!rev[x])<span class="keyword">return</span>;</div><div class="line">	rev[x] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</div><div class="line">	swap(c[x][<span class="number">0</span>], c[x][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">	<span class="keyword">int</span> r = c[y][<span class="number">0</span>] == x, l = r^<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(!isroot(y)) c[z][c[z][<span class="number">0</span>]!=y] = x;</div><div class="line">	fa[x] = z; fa[y] = x; fa[c[x][r]] = y;</div><div class="line">	c[y][l] = c[x][r]; c[x][r] = y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> top = <span class="number">0</span>; st[++top]=x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = x; !isroot(i); i=fa[i])</div><div class="line">		st[++top] = fa[i];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = top; i; i--)</div><div class="line">		push_down(st[i]);</div><div class="line">	<span class="keyword">while</span>(!isroot(x))&#123;</div><div class="line">		<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">		<span class="keyword">if</span>(!isroot(y))<span class="keyword">if</span>(c[y][<span class="number">0</span>]==x^c[z][<span class="number">0</span>]==y)rotate(x);</div><div class="line">		<span class="keyword">else</span> rotate(y);</div><div class="line">		rotate(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(x)&#123;</div><div class="line">		splay(x);</div><div class="line">		c[x][<span class="number">1</span>] = t;</div><div class="line">		t = x; x = fa[x];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x); splay(x);</div><div class="line">	rev[x]^=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x);</div><div class="line">	fa[x] = y;</div><div class="line">	splay(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x); access(y); splay(y);</div><div class="line">	c[y][<span class="number">0</span>] = fa[x] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x); splay(x);</div><div class="line">	<span class="keyword">int</span> y = x;</div><div class="line">	<span class="keyword">while</span>(c[y][<span class="number">0</span>])y=c[y][<span class="number">0</span>];</div><div class="line">	<span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read(), m = read();</div><div class="line">	<span class="keyword">char</span> str[<span class="number">50</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">		x=read(); y=read();</div><div class="line">		<span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'D'</span>)cut(x, y);</div><div class="line">		<span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'C'</span>)link(x, y);</div><div class="line">		<span class="keyword">if</span>(str[<span class="number">0</span>] == <span class="string">'Q'</span>)<span class="built_in">puts</span>(find(x)==find(y)?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4238: 电压]]></title>
      <url>/2017/04/14/BZOJ-4238-%E7%94%B5%E5%8E%8B/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>你知道Just Odd Inventions社吗？这个公司的业务是“只不过是奇妙的发明(Just Odd Inventions)”。这里简称为JOI社。<br>JOI社的某个实验室中有着复杂的电路。电路由$n$个节点和$m$根细长的电阻组成。节点被标号为$1~N$<br>每个节点有一个可设定的状态【高电压】或者【低电压】。每个电阻连接两个节点，只有一端是高电压，另一端是低电压的电阻才会有电流流过。两端都是高电压或者低电压的电阻不会有电流流过。<br>某天，JOI社为了维护电路，选择了一根电阻，为了能让【只有这根电阻上的电流停止流动，其他$M-1$根电阻中都有电流流过】，需要调节各节点的电压。为了满足这个条件，能选择的电阻共有多少根？<br>对了，JOI社这个奇妙的电路是用在什么样的发明上的呢？这是公司内的最高机密，除了社长以外谁都不知道哦~<br>现在给出电路的信息，请你输出电路维护时可以选择使其不流的电阻的个数。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行两个空格分隔的正整数$N$和$M$，表示电路中有$N$个节点和$M$根电阻。<br>接下来$M$行，第$i$行有两个空格分隔的正整数$A_i$和$B_i$($1\leq A_i\leq N,1\leq B_i\leq N,A_i≠B_i$)，表示第$i$个电阻连接节点$A_i$和节点$B_i$。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行一个整数，代表电路维护时可选择的使其不流的电阻个数。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4 4<br>1 2<br>2 3<br>3 2<br>4 3</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>可以选择第一根电阻或第四根电阻。<br><img src="http://www.lydsy.com/JudgeOnline/upload/201508/bb.jpg" alt="img"><br>$2\leq N\leq 10^5$<br>$1\leq M\leq 2*10^5$<br>不保证图是连通的，不保证没有重边</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>还以为是跟摸你赛一样的难度。。<br>其实可以用dfs过<br>注意到只有奇环才有答案<br>所以dfs一波，记录一下深度，当遇到访问过的点时用深度来判断是不是奇环<br><del>然后就照抄了，别问我c数组是干啥的，我也不知道</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> nxt, to;</div><div class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], n, m, cnt=<span class="number">1</span>, d[N], fa[N], c[N][<span class="number">2</span>], cnt1, cnt0;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	e[++cnt] = (node)&#123;head[x], y&#125;;</div><div class="line">	head[x] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x],y=e[i].to; i; y=e[i=e[i].nxt].to)&#123;</div><div class="line">		<span class="keyword">if</span>((i^<span class="number">1</span>)==p)<span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">if</span>(!d[y])&#123;</div><div class="line">			d[y] = d[fa[y]=x]+<span class="number">1</span>;</div><div class="line">			dfs(y, i);</div><div class="line">			c[x][<span class="number">0</span>] += c[y][<span class="number">0</span>];</div><div class="line">			c[x][<span class="number">1</span>] += c[y][<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(d[y]&lt;=d[x])</div><div class="line">			<span class="keyword">if</span>(d[x]&amp;<span class="number">1</span>^d[y]&amp;<span class="number">1</span>) <span class="comment">// (d[x]-d[y])&amp;1</span></div><div class="line">				c[x][<span class="number">0</span>]++, c[y][<span class="number">0</span>]--, cnt0++;</div><div class="line">			<span class="keyword">else</span></div><div class="line">				c[x][<span class="number">1</span>]++, c[y][<span class="number">1</span>]--, cnt1++;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">		ins(x, y); ins(y, x);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(!d[i])</div><div class="line">		d[i] = <span class="number">1</span>, dfs(i, <span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> ans = cnt1==<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		ans += (fa[i]&amp;&amp;c[i][<span class="number">1</span>]==cnt1&amp;&amp;!c[i][<span class="number">0</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Dirichlet卷积]]></title>
      <url>/2017/04/13/Dirichlet%E5%8D%B7%E7%A7%AF/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>两个数论函数$f$,$g$的Dirichlet卷积为：<br>$$<br>(f*g)(n)=\sum_{d|n}{f(d)g(\frac nd)}<br>$$</p>
<h1 id="Dirichlet卷积的一些性质："><a href="#Dirichlet卷积的一些性质：" class="headerlink" title="Dirichlet卷积的一些性质："></a>Dirichlet卷积的一些性质：</h1><ul>
<li>交换律$f*g=g*f$</li>
<li>结合律$(f*g)*h=f*(g*h)$</li>
<li>分配律$f*(g+h)=f*g+f*h$</li>
<li>单位元$\varepsilon*f=f$<a id="more"></a>
</li>
</ul>
<h1 id="常见的Dirichlet卷积"><a href="#常见的Dirichlet卷积" class="headerlink" title="常见的Dirichlet卷积"></a>常见的Dirichlet卷积</h1><p>首先你要知道下面这些东西</p>
<ul>
<li>$\sigma_k(n)$表示$n$的所有正因子的k次幂的和</li>
<li>$d(n)=\sigma_0(n)$表示$n$的正因子个数</li>
<li>$\sigma(n)=\sigma_1(n)$表示$n$的所有正因子的和</li>
<li>$ld_k(n)=n^k$</li>
<li>$l(n)=lk_0(n)=1$</li>
<li>$ld(n)=ld_1(n)=n$（记住这个就好）</li>
<li>$\varepsilon(n)=\begin{cases}1,&amp;n=1\\0,&amp;n&gt;1\end{cases}$</li>
</ul>
<p>然后试图理解下面的</p>
<ul>
<li>$d(n)=\sum_{d|n}l\Leftrightarrow l*l$</li>
<li>$\sigma(n)=\sum_{d|n}d\Leftrightarrow l*ld$</li>
<li>$\varepsilon(n)=\sum_{d|n}\mu(d)\Leftrightarrow \varepsilon=l*\mu$</li>
<li>$\varphi(n)=\sum_{d|n}\mu(d)\frac nd\Leftrightarrow \varphi=\mu*ld$</li>
<li>$n=\sum_{d|n}\varphi(d)\Leftrightarrow ld=l*\varphi$</li>
</ul>
<p>此外还有</p>
<ul>
<li>$\varepsilon(n)=\sum_{d|n}\mu(d)$</li>
<li>$\varphi(n)=\sum_{d|n}\mu(d)\frac nd\Leftrightarrow n=\sum_{d|n}\varphi(d)$</li>
</ul>
<p>在整数集$D$里还有</p>
<ul>
<li>$f(d)=\sum_{x|d,d\in D}g(d)\Leftrightarrow g(x)=\sum_{x|d,d\in D}\mu(d)f(\frac dx)$</li>
</ul>
<p>看懂了吗<del>（我也没有</del><br>GL&amp;HF</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2820: YY的GCD & 51nod 1192 Gcd表中的质数]]></title>
      <url>/2017/04/13/BZOJ-2820-YY%E7%9A%84GCD-51nod-1192-Gcd%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%B4%A8%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>求<br>$$<br>\sum_{i=1}^{a}{\sum_{j=1}^{b}{isprime(gcd(i,j))}}<br>$$</p>
<h1 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h1><p>2<br>10 10<br>100 100</p>
<h1 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h1><p>30<br>2791<br><a id="more"></a></p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>当然还是枚举质数p<br>式子是从51nod的讨论里抄来的<br>$$<br>\begin{align}<br>ans(m,n) &amp;=\sum_p\sum_{i=1}^{\left\lfloor \frac np\right\rfloor}\sum_{j=1}^{\left\lfloor \frac mp\right\rfloor}[(i,j)=1][p] \\<br>&amp;=\sum_p\sum_{i=1}^{\left\lfloor \frac np\right\rfloor}\sum_{j=1}^{\left\lfloor \frac mp\right\rfloor}\sum_{k=1}\mu(k)[k|i,k|j][p] \\<br>&amp;=\sum_p\sum_{k=1}^{\left\lfloor \frac np\right\rfloor}\sum_{i=1}^{\left\lfloor \frac n{kp}\right\rfloor}\sum_{j=1}^{\left\lfloor \frac m{kp}\right\rfloor}\mu(k)[p] \\<br>&amp;=\sum_{k=1}^n\sum_{p=1}^{\left\lfloor \frac n{k}\right\rfloor}{\left\lfloor \frac n{kp}\right\rfloor}{\left\lfloor \frac m{kp}\right\rfloor}\mu(k)[p] \\<br>&amp;=\sum_{k=1}^n\sum_{p|k}{\left\lfloor \frac n{k}\right\rfloor}{\left\lfloor \frac m{k}\right\rfloor}\mu(\frac kp)[p] \\<br>&amp;=\sum_{k=1}^n{\left\lfloor \frac n{k}\right\rfloor}{\left\lfloor \frac m{k}\right\rfloor}\sum_{p|k}\mu(\frac kp)[p] \\<br>&amp;=\sum_{k=1}^n{\left\lfloor \frac n{k}\right\rfloor}{\left\lfloor \frac m{k}\right\rfloor}f(k)<br>\end{align}<br>$$</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> pri[<span class="number">670000</span>], mu[N], cnt, f[N];</div><div class="line"><span class="keyword">bool</span> mark[N];</div><div class="line">ll n, m, ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(!mark[i])pri[++cnt]=i,mu[i]=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j]*i &lt; N; j++)&#123;</div><div class="line">			mark[pri[j]*i] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(i%pri[j])mu[pri[j]*i] = -mu[i];</div><div class="line">			<span class="keyword">else</span>&#123;mu[pri[j]*i] = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j*pri[i] &lt; N; j++)</div><div class="line">			f[pri[i]*j] += mu[j];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</div><div class="line">		f[i] += f[i<span class="number">-1</span>];</div><div class="line">	<span class="keyword">int</span> T = read();</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		n = read(), m = read(), ans = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(n &gt; m) swap(n, m);</div><div class="line">		<span class="keyword">for</span>(ll i = <span class="number">1</span>, last; i &lt;= n; i = last+<span class="number">1</span>)&#123;</div><div class="line">			last = min(n/(n/i), m/(m/i));</div><div class="line">			ans += (n/i)*(m/i)*(f[last]-f[i<span class="number">-1</span>]);</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3309: DZY Loves Math]]></title>
      <url>/2017/04/13/BZOJ-3309-DZY-Loves-Math/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>对于正整数$n$，定义$f(n)$为$n$所含质因子的最大幂指数。例如$f(1960)=f(2^3*5^1*7^2)=3$，$f(10007)=1$，$f(1)=0$。<br>给定正整数a、b，求$\sum_{i=1}^{a}{\sum_{j=1}^{b}{f(gcd(i,j))}}$</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个数$T$，表示询问数。<br>接下来$T$行，每行两个数$a,b$，表示一个询问。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每一个询问，输出一行一个非负整数作为回答。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4<br>7558588 9653114<br>6514903 4451211<br>7425644 1189442<br>6335198 4957</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>35793453939901<br>14225956593420<br>4332838845846<br>15400094813</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>【数据规模】<br>T&lt;=10000<br>1&lt;=a,b&lt;=10^7</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>一眼就能看出来：<br>先枚举gcd<br>然后、、然后就又不会了<br>看题解吧。。<br>看到题解又跪了。。<a href="http://blog.csdn.net/popoqqq/article/details/42122413" target="_blank" rel="external">orz PoPoQQQ</a><br>$$<br>\begin{align}<br>ans<br>&amp;=\sum_{i=1}^{a}{\sum_{j=1}^{b}{f(gcd(i,j))}} \\<br>&amp;=\sum_{d=1}^{min(a,b)}{f(d)\sum_{k=1}^{min(\left\lfloor \frac{a}{d} \right\rfloor,\left\lfloor\frac{b}{d}\right\rfloor)}{\mu(k)\left\lfloor\frac{a}{kd}\right\rfloor\left\lfloor\frac{b}{kd}\right\rfloor}} \\<br>&amp;=\sum_{T=1}^{min(a,b)}{\left\lfloor\frac{a}{T}\right\rfloor\left\lfloor\frac{b}{T}\right\rfloor\sum_{d|T}{f(d)\mu(\frac{T}{d})}}<br>\end{align}<br>$$<br>现在我们只需要知道$\sum_{d|T}{f(d)\mu(\frac{T}{d})}$的前缀和就行了 设这个函数为$g(x)$<br>观察这个函数 由于含平方因子数的$\mu$值都为零，因此我们只考虑$\mu(\frac{T}{d})\neq0$的数<br>令$T=p_1^{a_1}p_2^{a_2}…p_k^{a_k}$，$d=p_1^{b_1}p_2^{b_2}…p_k^{b_k}$那么$0\le(ai-bi)\le1$<br>如果存在$a_i\neq a_j(i\neq j)$，那么我们可以将所有的$a$分为两部分：最大的$a$的集合$A$和非最大$a$的集合$B$<br>很显然$f$值由$A$中的选取方案决定<br>对于$A$中的每种选取方案，$\mu$值决定于总选择的数量的奇偶性<br>在集合$B$中选取奇数个元素和偶数个元素的方案数是相等的，故对于$A$中的每种选取方案，得到的和都是$0$<br>故如果存在$a_i\neq a_j(i\neq j)$，则$g(T)=0$<br>反之，如果所有的$a$值都相等，我们假设对于任意选取方案，$f$值都不变<br>那么由于选取奇数个元素和偶数个元素的方案数相等，和仍然为$0$<br>但是有一种选取方案的$f$值$=a-1$ 因此我们要将这个$1$减掉<br>考虑到$\mu$的符号之后，最终结果为$(-1)^{k+1}$<br>故如果不存在$a_i\neq a_j$，则$g(T)=(-1)^{k+1}$<br>不知道说明白了没有。。。（显然没有）<br>求出$g$函数的方法是线性筛 对于每个值记录$g$值和最小质因数的次数 具体细节见代码<br>别忘了开long long</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll _a[N], _p[N], _g[N];</div><div class="line"><span class="keyword">int</span> pri[N], cnt;</div><div class="line"><span class="keyword">bool</span> mark[N];</div><div class="line"><span class="function">ll <span class="title">calc</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(a &gt; b) swap(a, b);</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, last; i &lt;= a; i = last+<span class="number">1</span>)&#123;</div><div class="line">		last = min(a/(a/i), b/(b/i));</div><div class="line">		ans += (a/i)*(b/i)*(_g[last]-_g[i<span class="number">-1</span>]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(!mark[i])&#123;pri[++cnt] = _p[i] = i; _a[i] = _g[i] = <span class="number">1</span>;&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; pri[j]*i &lt; N; j++)&#123;</div><div class="line">			mark[pri[j]*i] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>)&#123;</div><div class="line">				_a[pri[j]*i] = _a[i]+<span class="number">1</span>;</div><div class="line">				_p[pri[j]*i] = _p[i]*pri[j];</div><div class="line">				ll tmp = i/_p[i];</div><div class="line">				<span class="keyword">if</span>(tmp == <span class="number">1</span>) _g[pri[j]*i] = <span class="number">1</span>;</div><div class="line">				<span class="keyword">else</span> _g[pri[j]*i] = (_a[tmp]==_a[pri[j]*i]?-_g[tmp]:<span class="number">0</span>);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			_a[pri[j]*i] = <span class="number">1</span>;</div><div class="line">			_p[pri[j]*i] = pri[j];</div><div class="line">			_g[pri[j]*i] = (_a[i]==<span class="number">1</span>?-_g[i]:<span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</div><div class="line">		_g[i] += _g[i<span class="number">-1</span>];</div><div class="line">	<span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		ll a, b;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, calc(a, b));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4239: 巴士走读]]></title>
      <url>/2017/04/13/BZOJ-4239-%E5%B7%B4%E5%A3%AB%E8%B5%B0%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>大学生的JOI君每天乘坐巴士走读。<br>JOI君的家和学校都在IOI市内。IOI市内共有N个巴士停靠点，编号为$1~N$，离JOI家最近的停靠点为$1$号停靠点，离大学最近的停靠点为$N$号停靠点。<br>IOI市内共有M辆巴士，每辆巴士一天只跑一次，从某一时刻某一停靠点出发，在某一时刻到达另一个站点。运行途中不可以下车。<br>JOI君每天要乘坐一次以上的巴士到达学校。我们可以无视JOI君换车的时间，换言之，为了换乘某个时刻从某个停靠点出发的巴士，只需要在该巴士的出发时间或之前到达停靠点就可以了。此外，多次在某个停靠点换乘也是可以的。<br>在这样的条件下，JOI君想知道自己应该何时从家中出发才能按时赶到学校。然而，学校每天开始上课的时间都不同。在某$Q$天里，每天到达$N$号站点的最晚时间都是已知的，JOI君想知道，他最晚何时到达$1$号站点才能赶上学校的授课。<br>现在给你巴士的运营信息，以及这$Q$天里每天到达$N$号站点的最晚时间，请你求出每天JOI君最晚何时到达1号站点。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行两个空格分隔的正整数$N$和$M$，表示IOI市内有$N$个巴士站点和$M$辆巴士。<br>接下来$M$行，第$i$行($1\leq i\leq M$)有四个空格分隔的整数$A_i$,$B_i$,$X_i$,$Y_i$($1\leq Ai\leq N,1\leq Bi\leq N,Ai≠Bi$)，表示第$i$辆巴士在时刻$X_i$从停靠点$A_i$出发，在时刻$Y_i$到达停靠点$B_i$。时刻从半夜$12$点开始计算，单位为毫秒。<br>接下来一行一个整数$Q$，含义如题目中所示<br>接下来$Q$行，第$i$行($1\leq i\leq Q$)有一个整数$L_i$，表示第$i$天最迟$L_i$时刻到达站点N<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出$Q$行，第$i$行($1\leq i\leq Q$)一个整数，表示JOI君第$i$天最迟到达$1$号站点的时刻。<br>如果无法在时限内到达，输出<code>-1</code>。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5 6<br>1 2 10 25<br>1 2 12 30<br>2 5 26 50<br>1 5 5 20<br>1 4 30 40<br>4 5 50 70<br>4<br>10<br>30<br>60<br>100</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>-1<br>5<br>10<br>30</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>$2\leq N\leq 100000$<br>$1\leq M\leq 300000$<br>$0\leq Xi\lt Yi\lt 86400000$($=24*60*60*1000$)($1\leq i\leq M$)<br>$1\leq Q\leq 100000$<br>$0\leq Li\lt 86400000$($1\leq i\leq Q$)</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>不知道怎么说。。答案显然是分段的<br>比如样例中：<br>$$<br>ans=\begin{cases}<br>-1,&amp;0≤ans&lt;20\\<br>5,&amp;20≤ans&lt;50\\<br>10,&amp;50≤ans&lt;70\\<br>30,&amp;70≤ans&lt;\infty\end{cases}<br>$$<br>所以离线是必然的<br>然后还是瞎搞一下。。<br>f[i]表示到达第i个点的最迟出发时间。。。<br>g[i]表示能赶上第i辆车的最迟出发时间、、、<br>然后两个互相更新，把所有终点为n的车的g[i]都统计出来，就能完美的解决了<br><del>（Sublime对markdown的高亮有点萎啊）</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 300020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>, f=<span class="number">1</span>;<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch = getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x = x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch = getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);</div><div class="line">	<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">writeln</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>), x=-x;</div><div class="line">	write(x); <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> edge&#123;</div><div class="line">	<span class="keyword">int</span> x, y, st, ed;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> st &lt; b.st;</div><div class="line">	&#125;</div><div class="line">&#125;e[M];</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> x &lt; b.x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> x &gt; b.x;</div><div class="line">	&#125;</div><div class="line">&#125;ks[M], a[N];</div><div class="line"><span class="keyword">struct</span> My_Priority_Queue&#123;</div><div class="line">	node val[<span class="number">400010</span>];</div><div class="line">	<span class="keyword">int</span> size;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">		<span class="keyword">while</span>(pos&gt;<span class="number">1</span>&amp;&amp;val[pos]&lt;val[pos&gt;&gt;<span class="number">1</span>])</div><div class="line">			swap(val[pos], val[pos&gt;&gt;<span class="number">1</span>]),pos&gt;&gt;=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">		<span class="keyword">int</span> p = pos;</div><div class="line">		<span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">if</span>((pos&lt;&lt;<span class="number">1</span>)&lt;=size&amp;&amp;val[pos&lt;&lt;<span class="number">1</span>]&lt;val[p])p=pos&lt;&lt;<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>((pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>)&lt;=size&amp;&amp;val[pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&lt;val[p])p=pos&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(pos==p)<span class="keyword">return</span>; swap(val[pos], val[p]); pos=p;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(node d)</span></span>&#123;</div><div class="line">		val[++size]=d;</div><div class="line">		up(size);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">		swap(val[<span class="number">1</span>], val[size--]);</div><div class="line">		down(<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="function">node <span class="title">top</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> val[<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> !size;</div><div class="line">	&#125;</div><div class="line">&#125;sw;</div><div class="line"><span class="keyword">int</span> f[N], g[M], ans[N], n, m, cnt;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">// freopen("school.in", "r", stdin);</span></div><div class="line">	<span class="comment">// freopen("school.out", "w", stdout);</span></div><div class="line">	n = read(); m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		e[i].x = read(); e[i].y = read();</div><div class="line">		e[i].st = read(); e[i].ed = read();</div><div class="line">	&#125;</div><div class="line">	sort(e+<span class="number">1</span>, e+m+<span class="number">1</span>);</div><div class="line">	<span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f); f[<span class="number">1</span>]=<span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">while</span>(!sw.empty() &amp;&amp; sw.top().x&lt;=e[i].st)&#123;</div><div class="line">			node t = sw.top(); sw.pop();</div><div class="line">			f[e[t.y].y]=max(f[e[t.y].y], g[t.y]);</div><div class="line">		&#125;</div><div class="line">		g[i]=min(e[i].st, f[e[i].x]);</div><div class="line">		sw.push((node)&#123;e[i].ed, i&#125;);</div><div class="line">		<span class="keyword">if</span>(e[i].y == n)&#123;</div><div class="line">			ks[++cnt].x = e[i].ed;</div><div class="line">			ks[cnt].y = g[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	sort(ks+<span class="number">1</span>, ks+cnt+<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> T = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</div><div class="line">		a[i] = (node)&#123;read(), i&#125;;</div><div class="line">	sort(a+<span class="number">1</span>, a+T+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, now = <span class="number">-1</span>, j = <span class="number">1</span>; i &lt;= T; i++)&#123;</div><div class="line">		<span class="keyword">for</span>(; j &lt;= cnt &amp;&amp; ks[j].x &lt;= a[i].x; j++)</div><div class="line">			now = max(now, ks[j].y);</div><div class="line">		ans[a[i].y] = now;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</div><div class="line">		writeln(ans[i]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 毒瘤题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4240: 有趣的家庭菜园]]></title>
      <url>/2017/04/12/BZOJ-4240-%E6%9C%89%E8%B6%A3%E7%9A%84%E5%AE%B6%E5%BA%AD%E8%8F%9C%E5%9B%AD/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>对家庭菜园有兴趣的JOI君每年在自家的田地中种植一种叫做IOI草的植物。JOI君的田地沿东西方向被划分为N个区域，由西到东标号为1~N。IOI草一共有$N$株，每个区域种植着一株。在第i个区域种植的IOI草，在春天的时候高度会生长至hi，此后便不再生长。<br>为了观察春天的样子而出行的JOI君注意到了IOI草的配置与预定的不太一样。IOI草是一种非常依靠阳光的植物，如果某个区域的IOI草的东侧和西侧都有比它高的IOI草存在，那么这株IOI草就会在夏天之前枯萎。换句话说，为了不让任何一株IOI草枯萎，需要满足以下条件：<br>对于任意$2\leq i\leq N-1$，以下两个条件至少满足一个：</p>
<ol>
<li>对于任意$1\leq j\leq i-1$，$h_j\leq h_i$</li>
<li>对于任意$i+1\leq j\leq N$，$h_k\leq h_i$</li>
</ol>
<p>IOI草是非常昂贵的，为了不让IOI草枯萎，JOI君需要调换IOI草的顺序。IOI草非常非常的高大且纤细的植物，因此JOI君每次只能交换相邻两株IOI草。也就是说，JOI君每次需要选择一个整数$i$($1\leq i\leq N-1$)，然后交换第$i$株IOI草和第$i+1$株IOI草。随着夏天临近，IOI草枯萎的可能性越来越大，因此JOI君想知道让所有IOI草都不会枯萎的最少操作次数。<br>现在给出田地的区域数，以及每株IOI草的高度，请你求出让所有IOI草的不会枯萎的最少操作次数。<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个正整数$N$，代表田地被分为了$N$个区域。<br>接下来$N$行，第$i$行($1\leq i\leq N$)一个整数$h_i$，表示第$i$株植物在春天时的高度</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行一个整数，表示最少需要的操作次数</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>6<br>2<br>8<br>4<br>5<br>3<br>6</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>3</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>最终的高度序列为 2 4 5 8 6 3，共需要操作三次。<br>$3\leq N\leq 3*10^5$<br>$1\leq hi\leq 10^9$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>摸你赛题（全班80%只有10分。。<br>反正题面就是要你找一个让序列成为单峰的最小移动步数</p>
<h2 id="错误的思想："><a href="#错误的思想：" class="headerlink" title="错误的思想："></a>错误的思想：</h2><p>预处理出[1-i]成为上升序列的最小移动步数和[i-n]成为下降序列的最小移动步数<br>然后枚举一下分界线统计一下就好了（然而只有10分）</p>
<h2 id="正解："><a href="#正解：" class="headerlink" title="正解："></a>正解：</h2><p>预处理出每个点往左移的最小步数和往右移的最小步数<br>然后枚举每一个点，考虑他往左移好还是往右移好（其实就是求左边有几个比他大的和右边有几个比他大的，这个用树状数组和离散化瞎搞一下就好了，左右取min）<br>再全部加起来就是答案了</p>
<p><del>我有同学树状数组写成九条可怜的了，还拿了90分。。</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 300020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line">ll a[N], x[N], y[N], b[N], v[N], n, ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)v[x]++;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">ask</span><span class="params">(ll x)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(;x;x-=x&amp;-x)ans+=v[x];</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">// freopen("flower.in", "r", stdin);</span></div><div class="line">	<span class="comment">// freopen("flower.out", "w", stdout);</span></div><div class="line">	n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		b[i] = a[i] = read();</div><div class="line">	sort(b+<span class="number">1</span>, b+n+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		a[i] = lower_bound(b+<span class="number">1</span>, b+n+<span class="number">1</span>, a[i])-b;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		x[i] = i-ask(a[i])<span class="number">-1</span>;</div><div class="line">		add(a[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">memset</span>(v, <span class="number">0</span>, <span class="keyword">sizeof</span> v);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; i--)&#123;</div><div class="line">		y[i] = n-i-ask(a[i]);</div><div class="line">		add(a[i]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</div><div class="line">		ans += min(x[i], y[i]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4236: JOIOJI]]></title>
      <url>/2017/04/12/BZOJ-4236-JOIOJI/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>JOIOJI桑是JOI君的叔叔。“JOIOJI”这个名字是由“J、O、I”三个字母各两个构成的。<br>最近，JOIOJI桑有了一个孩子。JOIOJI桑想让自己孩子的名字和自己一样由“J、O、I”三个字母构成，并且想让“J、O、I”三个字母的出现次数恰好相同。<br>JOIOJI桑家有一份祖传的卷轴，上面写着一首长诗，长度为N，由“J、O、I”三个字母组成。JOIOJIさん想用诗中最长的满足要求的连续子串作为孩子的名字。<br>现在JOIOJI桑将这首长诗交给了你，请你求出诗中最长的、包含同样数目的“J、O、I”三个字母的连续子串。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个正整数$N$，代表这首长诗的长度<br>接下来一行一个长度为$N$的字符串$S$，表示这首长诗，保证每个字符都是“J、O、I”三个字母中的一个<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出一行一个正整数，代表最长的包含等数量“J、O、I”三个字母的最长连续子串的长度。如果不存在这样的子串，输出$0$</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>10<br>JOIIJOJOOI</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>6</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>选择“IIJOJO”这个子串，长度为6，包含“J、O、I”三个字母各2个，这是最长的满足要求的子串。<br>$1\leq N\leq 2*10^5$</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>听说可以用hash过。。<br>我这里直接用map水了2333</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int, int&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mk make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, J, O, I, ans;</div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"><span class="built_in">map</span>&lt;pii, <span class="keyword">int</span>&gt; mp;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">// freopen("name.in", "r", stdin);</span></div><div class="line">	<span class="comment">// freopen("name.out", "w", stdout);</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(s[i] == <span class="string">'J'</span>) J++;</div><div class="line">		<span class="keyword">if</span>(s[i] == <span class="string">'O'</span>) O++;</div><div class="line">		<span class="keyword">if</span>(s[i] == <span class="string">'I'</span>) I++;</div><div class="line">		pii tmp = mk(J-O, O-I);</div><div class="line">		<span class="keyword">if</span>(!mp[tmp]) mp[tmp] = i;</div><div class="line">		<span class="keyword">else</span> ans = max(ans, i-mp[tmp]);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(J==O&amp;&amp;O==I) ans = n;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2693: jzptab & BZOJ 2154: Crash的数字表格]]></title>
      <url>/2017/04/11/BZOJ-2693-jzptab-BZOJ-2154-Crash%E7%9A%84%E6%95%B0%E5%AD%97%E8%A1%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>都是要你求<br>$$\sum_{i=1}^{n} \sum_{j=1}^{m} lcm(i, j)$$</p>
<h1 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h1><p>4 5</p>
<h1 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h1><p>122</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>不会做+看题解+公式恐惧症、、、<br>下面是某爬虫网站抄来的，也不知道作者是谁、、先orz一波</p>
<p>下面均设n&lt;=m<br>$$\sum_{i=1}^{n} \sum_{j=1}^{m} lcm(i, j) = \sum_{i=1}^{n} \sum_{j=1}^{m} \frac{ij}{(i,j)}$$<br><a id="more"></a><br>然后我们要想枚举$d=(i,j)$，那么就要确定$ij$怎么取，显然我们只需要先除去$i$和$j$的$d$，也就是$(i/d,j/d)=1$就行了，那么设<br>$$F(x, y) = \sum_{i=1}^{x} \sum_{j=1}^{y} ij[(i,j)=1]$$<br>那么原式变成<br>$$\sum_{d=1}^{n} \frac{d^2 F(\lfloor \frac{n}{d} \rfloor, \lfloor \frac{m}{d} \rfloor)}{d} = \sum_{d=1}^{n} d F(\lfloor \frac{n}{d} \rfloor, \lfloor \frac{m}{d} \rfloor)$$<br>考虑求$F(x,y)$<br>$$<br>\begin{align}<br>F(x, y) &amp; = \sum_{i=1}^{x} \sum_{j=1}^{y} ij[(i,j)=1] \\<br>&amp; = \sum_{i=1}^{x} \sum_{j=1}^{y} ij \sum_{d|(i,j)} \mu (d) \\<br>&amp; = \sum_{d=1}^{x} \mu (d) \sum_{d|i}^{x} i \sum_{d|j}^{y} j \\<br>&amp; = \sum_{d=1}^{x} \mu (d) d^2 \sum_{i=1}^{\lfloor \frac{x}{d} \rfloor} \sum_{j=1}^{\lfloor \frac{y}{d} \rfloor} 1 \\<br>&amp; = \sum_{d=1}^{x} \mu (d) d^2 \frac{\lfloor \frac{x}{d} \rfloor (\lfloor \frac{x}{d} \rfloor +1)}{2} \frac{\lfloor \frac{y}{d} \rfloor (\lfloor \frac{y}{d} \rfloor +1)}{2} \\<br>\end{align}<br>$$<br>带回原式得<br>$$<br>\begin{align}<br>&amp; \sum_{d=1}^{n} d F(\lfloor \frac{n}{d} \rfloor, \lfloor \frac{m}{d} \rfloor) \\<br>= &amp; \sum_{d=1}^{n} d \sum_{i=1}^{\lfloor \frac{n}{d} \rfloor} \mu (i) i^2 \frac{\lfloor \frac{\lfloor \frac{n}{d} \rfloor}{i} \rfloor (\lfloor \frac{\lfloor \frac{n}{d} \rfloor}{i} \rfloor +1)}{2} \frac{\lfloor \frac{\lfloor \frac{m}{d} \rfloor}{i} \rfloor (\lfloor \frac{\lfloor \frac{m}{d} \rfloor}{i} \rfloor +1)}{2} \\<br>= &amp; \sum_{d=1}^{n} d \sum_{i=1}^{\lfloor \frac{n}{d} \rfloor} \mu (i) i^2 \frac{\lfloor \frac{n}{di} \rfloor (\lfloor \frac{n}{di} \rfloor +1)}{2} \frac{\lfloor \frac{m}{di} \rfloor (\lfloor \frac{m}{di} \rfloor +1)}{2} \\<br>\end{align}<br>$$<br>现在已经可以$O(\sqrt n \sqrt n) = O(n)$单次查询了，可以完成那道数字表格了<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 20101009</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll mu[N], pri[N], s[N], cnt;</div><div class="line"><span class="keyword">bool</span> mark[N];</div><div class="line">ll ans, x, y;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(ll a)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(a&gt;<span class="number">9</span>)write(a/<span class="number">10</span>);</div><div class="line">	<span class="built_in">putchar</span>(a%<span class="number">10</span>+<span class="string">'0'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> (a*(a+<span class="number">1</span>)/<span class="number">2</span>)%zyy*(b*(b+<span class="number">1</span>)/<span class="number">2</span>%zyy)%zyy;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>, last; i &lt;= min(a, b); i = last+<span class="number">1</span>)&#123;</div><div class="line">		last = min(a/(a/i), b/(b/i));</div><div class="line">		ans = (ans+(s[last]-s[i<span class="number">-1</span>])*sum(a/i, b/i)%zyy)%zyy;</div><div class="line">		<span class="comment">// printf("ans  = %d\n", ans);</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</div><div class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">2</span>; i &lt;= min(x, y); i++)&#123;</div><div class="line">		<span class="keyword">if</span>(!mark[i])pri[++cnt]=i,mu[i]=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(ll j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i*pri[j] &lt;= min(x, y); j++)&#123;</div><div class="line">			mark[pri[j]*i] = <span class="number">1</span>, mu[pri[j]*i] = -mu[i];</div><div class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>)&#123;mu[pri[j]*i] = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= min(x, y); i++)</div><div class="line">		s[i] = (s[i<span class="number">-1</span>]+i*i*mu[i]%zyy)%zyy;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>, last; i &lt;= min(x, y); i = last+<span class="number">1</span>)&#123;</div><div class="line">		last = min(x/(x/i), y/(y/i));</div><div class="line">		ans = (ans+(i+last)*(last-i+<span class="number">1</span>)/<span class="number">2</span>%zyy*f(x/i, y/i)%zyy)%zyy;</div><div class="line">		<span class="comment">// printf("ans2 = %d\n", ans);</span></div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;(ans+zyy)%zyy&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是交到第一题还是TLE，我们继续化简<br>令$T = di$，则$i|T,d = T/i$，换掉指标，得<br>$$<br>\begin{align}<br>&amp; \sum_{d=1}^{n} d \sum_{i=1}^{\lfloor \frac{n}{d} \rfloor} \mu (i) i^2 \frac{\lfloor \frac{n}{di} \rfloor (\lfloor \frac{n}{di} \rfloor +1)}{2} \frac{\lfloor \frac{m}{di} \rfloor (\lfloor \frac{m}{di} \rfloor +1)}{2} \\<br>= &amp;<br>\sum_{T=1}^{n} \frac{\lfloor \frac{n}{T} \rfloor (\lfloor \frac{n}{T} \rfloor +1)}{2} \frac{\lfloor \frac{m}{T} \rfloor (\lfloor \frac{m}{T} \rfloor +1)}{2} \sum_{i|T} \frac{T}{i} \mu (i) i^2 \\<br>= &amp; \sum_{T=1}^{n} \frac{\lfloor \frac{n}{T} \rfloor (\lfloor \frac{n}{T} \rfloor +1)}{2} \frac{\lfloor \frac{m}{T} \rfloor (\lfloor \frac{m}{T} \rfloor +1)}{2} T \sum_{i|T} \mu (i) i \\<br>\end{align}<br>$$<br>设$g(T)=T \sum_{i|T} \mu (i) i$，我们再设$f(T)=\sum_{i|T} \mu (i) i$那么$g(T)=Tf(T)$，考虑求$f(T)$<br>在线性筛中，外层为$k$，内层为$p_y$，所以求$f(kp_y)=\sum_{i|T} \mu(i) i$</p>
<p>当$p_y|k$时<br>当$i$取的数的因子中不包含新加入的$p_y$时，答案就是$f(k)$<br>当$i$取包含新加入的因子$p_y$时，由于此时$p_y$指数已经&gt;=2，所以$\mu (i)=0$，因此贡献为0<br>综上，当$p_y|k$时，答案为$f(k)$</p>
<p>当$p_y∤k$时<br>当$i$取的数的因子中不包含新加入的$p_y$时，同上，答案是$f(k)$<br>当$i$取的数的因子包含新加入的$p_y$时，由于指数为1，所以我们考虑$i=ap_y$，原式变为<br>$$\begin{align}<br>&amp; \sum_{i|T} \mu(i) i \\<br>= &amp; \sum_{ap_y|kp_y} \mu (ap_y) ap_y \\<br>= &amp; p_y \sum_{a|k} \mu (a) \mu(p_y) a \\<br>= &amp; -p_y \sum_{a|k} \mu(a) a \\<br>= &amp; -p_y f(k) \\<br>\end{align}$$<br>综上，当$p_y∤k$时，答案为$(1−p_y)f(k)$<br>然后线性筛随便搞搞即可，最后答案就是<br>$$\sum_{T=1}^{n} \frac{\lfloor \frac{n}{T} \rfloor (\lfloor \frac{n}{T} \rfloor +1)}{2} \frac{\lfloor \frac{m}{T} \rfloor (\lfloor \frac{m}{T} \rfloor +1)}{2} g(T)$$<br>$$F(x,y)= \sum_{i=1}^{x} \sum_{j=1}^{y} ij[(i,j)=1] = \sum_{i=1}^{x} \sum_{j=1}^{y} ij \sum_{d|(i,j)} \mu (d)$$</p>
<p>接着第一题也可以做了（小心被卡常数！<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 100000009</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> mu[N], pri[N], cnt;</div><div class="line">ll s[N];</div><div class="line"><span class="keyword">bool</span> mark[N];</div><div class="line">ll x, y;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> (a*(a+<span class="number">1</span>)/<span class="number">2</span>%zyy)*(b*(b+<span class="number">1</span>)/<span class="number">2</span>%zyy)%zyy;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll a, ll b)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>, last; i &lt;= a; i = last+<span class="number">1</span>)&#123;</div><div class="line">		last = min(a/(a/i), b/(b/i));</div><div class="line">		ans = (ans+(s[last]-s[i<span class="number">-1</span>]+zyy)%zyy*sum(a/i, b/i)%zyy)%zyy;</div><div class="line">		<span class="comment">// printf("ans  = %d\n", ans);</span></div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	mu[<span class="number">1</span>] = s[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(!mark[i])pri[++cnt]=i,mu[i]=<span class="number">-1</span>,s[i]=<span class="number">1</span>-i;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; i*pri[j] &lt; N; j++)&#123;</div><div class="line">			mark[pri[j]*i] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>)&#123;mu[pri[j]*i] = <span class="number">0</span>; s[i*pri[j]]=s[i]; <span class="keyword">break</span>;&#125;</div><div class="line">			s[i*pri[j]] = (s[i]*s[pri[j]])%zyy; mu[pri[j]*i] = -mu[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</div><div class="line">		s[i] = (s[i<span class="number">-1</span>]+i*s[i]%zyy)%zyy;</div><div class="line">	<span class="keyword">int</span> T = read();</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		x = read(); y = read();</div><div class="line">		<span class="keyword">if</span>(x &gt; y) swap(x, y);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (f(x, y)+zyy)%zyy);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>做完感觉人已经完全傻掉了<br>调了半个小时才知道BZOJ和cin cout有仇<br><img src="https://swwind.github.io/img/haipa.png"></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4766: 文艺计算姬]]></title>
      <url>/2017/04/10/BZOJ-4766-%E6%96%87%E8%89%BA%E8%AE%A1%E7%AE%97%E5%A7%AC/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>“奋战三星期，造台计算机”。小W响应号召，花了三星期造了台文艺计算姬。文艺计算姬比普通计算机有更多的艺术细胞。普通计算机能计算一个带标号完全图的生成树个数，而文艺计算姬能计算一个带标号完全二分图的生成树个数。更具体地，给定一个一边点数为$n$，另一边点数为$m$，共有$n*m$条边的带标号完全二分图$K_{n,m}$，计算姬能快速算出其生成树个数。小W不知道计算姬算的对不对，你能帮助他吗？</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>仅一行三个整数$n,m,p$，表示给出的完全二分图$K_{n,m}$<br>$1\leq n,m,p\leq 10^18$</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>仅一行一个整数，表示完全二分图$K_{n,m}$的生成树个数，答案需要模$p$。<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2 3 7</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>5</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><a href="http://www.cnblogs.com/neighthorn/p/6568410.html" target="_blank" rel="external">orz NeighThorn</a><br>答案其实就是$m^{n-1}*n^{m-1}$…<br>此外还要用到<strong>快速乘</strong>。？？一个长得和快速幂有点像的东西，可以防止乘法溢出。。<br>为毛他不开<code>long long</code>也能过得去啊(ノ=Д=)ノ┻━┻</p>
<p>4.13:我靠，他有<code>#define int long long</code>啊(ノ=Д=)ノ┻━┻</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll n, m, p;</div><div class="line"><span class="function">ll <span class="title">mul</span><span class="params">(ll x, ll y)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(y)&#123;</div><div class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans = (ans+x)%p;</div><div class="line">		x = (x&lt;&lt;<span class="number">1</span>)%p; y &gt;&gt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll x, ll y)</span></span>&#123;</div><div class="line">	ll ans = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(y)&#123;</div><div class="line">		<span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans = mul(ans, x);</div><div class="line">		x = mul(x, x); y &gt;&gt;= <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; mul(f(n, m<span class="number">-1</span>), f(m, n<span class="number">-1</span>)) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2002: [Hnoi2010]Bounce 弹飞绵羊]]></title>
      <url>/2017/04/10/BZOJ-2002-Hnoi2010-Bounce-%E5%BC%B9%E9%A3%9E%E7%BB%B5%E7%BE%8A/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>某天，Lostmonkey发明了一种超级弹力装置，为了在他的绵羊朋友面前显摆，他邀请小绵羊一起玩个游戏。游戏一开始，Lostmonkey在地上沿着一条直线摆上$n$个装置，每个装置设定初始弹力系数$k_i$，当绵羊达到第$i$个装置时，它会往后弹$k_i$步，达到第$i+k_i$个装置，若不存在第$i+k_i$个装置，则绵羊被弹飞。绵羊想知道当它从第$i$个装置起步时，被弹几次后会被弹飞。为了使得游戏更有趣，Lostmonkey可以修改某个弹力装置的弹力系数，任何时候弹力系数均为正整数。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包含一个整数$n$，表示地上有$n$个装置，装置的编号从$0$到$n-1$,接下来一行有$n$个正整数，依次为那$n$个装置的初始弹力系数。第三行有一个正整数$m$，接下来$m$行每行至少有两个数$i$、$j$，若$i=1$，你要输出从$j$出发被弹几次后被弹飞，若$i=2$则还会再输入一个正整数$k$，表示第$j$个弹力装置的系数被修改成$k$。<br>对于$20\%$的数据$n,m\leq 10000$。<br>对于$100\%$的数据$n\leq 200000,m\leq 100000$。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每个$i=1$的情况，你都要输出一个需要的步数，占一行。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4<br>1 2 1 1<br>3<br>1 1<br>2 1 1<br>1 1</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2<br>3</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>这题有两种做法。。但我只会分块。。LCT太恶心了，看了一个晚上就是看不懂他在干什么。。没事rever个毛线啊（听说是为了保证复杂度。。）<br>分块的话，直接一个块一个块跳。。具体我就不说了（<del>别问我怎么这么像hzwer的</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, st[N], pt[N], a[N], l[<span class="number">1020</span>], pos[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> block = <span class="built_in">sqrt</span>(n = read());</div><div class="line">	<span class="keyword">int</span> cnt = n/block;</div><div class="line">	<span class="keyword">if</span>(n%block) cnt++;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		a[i] = read();</div><div class="line">		pos[i] = (i<span class="number">-1</span>)/block+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</div><div class="line">		l[i] = (i<span class="number">-1</span>)*block+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; i--)</div><div class="line">		<span class="keyword">if</span>(i+a[i]&gt;n) st[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pos[i]==pos[i+a[i]])</div><div class="line">			st[i] = st[i+a[i]]+<span class="number">1</span>, pt[i] = pt[i+a[i]];</div><div class="line">		<span class="keyword">else</span> st[i] = <span class="number">1</span>, pt[i] = i+a[i];</div><div class="line">	<span class="keyword">int</span> m = read();</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="keyword">int</span> op = read(), x = read()+<span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">while</span>(x)&#123;</div><div class="line">				y += st[x];</div><div class="line">				x = pt[x];</div><div class="line">			&#125;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, y);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			a[x] = read();</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= l[pos[x]]; i--)</div><div class="line">				<span class="keyword">if</span>(pos[i]==pos[i+a[i]])</div><div class="line">					st[i] = st[i+a[i]]+<span class="number">1</span>, pt[i] = pt[i+a[i]];</div><div class="line">				<span class="keyword">else</span> st[i] = <span class="number">1</span>, pt[i] = i+a[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="LCT做法-4-14-Update"><a href="#LCT做法-4-14-Update" class="headerlink" title="LCT做法 (4.14 Update)"></a>LCT做法 (4.14 Update)</h1><p>学过了才发现不过如此<br>跑的比分块慢多了<br><del>别问我怎么还是很像hzwer的</del><br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> c[N][<span class="number">2</span>], fa[N], rev[N], st[N], sz[N], nxt[N];</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> c[fa[x]][<span class="number">0</span>] != x &amp;&amp; c[fa[x]][<span class="number">1</span>] != x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!rev[x])<span class="keyword">return</span>;</div><div class="line">	rev[x] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">	rev[c[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</div><div class="line">	swap(c[x][<span class="number">0</span>], c[x][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	sz[x] = sz[c[x][<span class="number">0</span>]]+sz[c[x][<span class="number">1</span>]]+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">	<span class="keyword">int</span> r = c[y][<span class="number">0</span>] == x, l = r^<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(!isroot(y)) c[z][c[z][<span class="number">0</span>]!=y] = x;</div><div class="line">	fa[x] = z; fa[y] = x; fa[c[x][r]] = y;</div><div class="line">	c[y][l] = c[x][r]; c[x][r] = y;</div><div class="line">	push_up(y); push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> top = <span class="number">0</span>; st[++top]=x;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = x; !isroot(i); i=fa[i])</div><div class="line">		st[++top] = fa[i];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = top; i; i--)</div><div class="line">		push_down(st[i]);</div><div class="line">	<span class="keyword">while</span>(!isroot(x))&#123;</div><div class="line">		<span class="keyword">int</span> y = fa[x], z = fa[y];</div><div class="line">		<span class="keyword">if</span>(!isroot(y))<span class="keyword">if</span>(c[y][<span class="number">0</span>]==x^c[z][<span class="number">0</span>]==y)rotate(x);</div><div class="line">		<span class="keyword">else</span> rotate(y);</div><div class="line">		rotate(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(x)&#123;</div><div class="line">		splay(x);</div><div class="line">		c[x][<span class="number">1</span>] = t;</div><div class="line">		t = x; x = fa[x];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x);splay(x);</div><div class="line">	rev[x]^=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x);</div><div class="line">	fa[x] = y;</div><div class="line">	splay(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	rever(x); access(y); splay(y);</div><div class="line">	c[y][<span class="number">0</span>] = fa[x] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	access(x); splay(x);</div><div class="line">	<span class="keyword">int</span> y = x;</div><div class="line">	<span class="keyword">while</span>(c[y][<span class="number">0</span>])y=c[y][<span class="number">0</span>];</div><div class="line">	<span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x; i &lt;= n; i++)&#123;</div><div class="line">		nxt[i] = (x=read())+i;</div><div class="line">		sz[i] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(nxt[i] &gt; n) nxt[i] = n+<span class="number">1</span>;</div><div class="line">		fa[i] = nxt[i];</div><div class="line">	&#125;</div><div class="line">	sz[n+<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> m = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(read()==<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">int</span> x = read()+<span class="number">1</span>;</div><div class="line">			rever(n+<span class="number">1</span>); access(x); splay(x);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz[c[x][<span class="number">0</span>]]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">int</span> x = read()+<span class="number">1</span>, y = read();</div><div class="line">			<span class="keyword">int</span> t = min(x+y, n+<span class="number">1</span>);</div><div class="line">			cut(x, nxt[x]); link(x, nxt[x]=t);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> LCT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3744: Gty的妹子序列]]></title>
      <url>/2017/04/07/BZOJ-3744-Gty%E7%9A%84%E5%A6%B9%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>我早已习惯你不在身边，<br>人间四月天 寂寞断了弦。<br>回望身后蓝天，<br>跟再见说再见……<br>某天,蒟蒻Autumn发现了从 Gty的妹子树(bzoj3720) 上掉落下来了许多妹子,他发现<br>她们排成了一个序列,每个妹子有一个美丽度。<br>Bakser神犇与他打算研究一下这个妹子序列,于是Bakser神犇问道:”你知道区间<br>[l,r]中妹子们美丽度的逆序对数吗?”<br>蒟蒻Autumn只会离线乱搞啊……但是Bakser神犇说道:”强制在线。”<br>请你帮助一下Autumn吧。<br>给定一个正整数序列a,对于每次询问,输出$a_l,…,a_r$中的逆序对数,强制在线。、<br><a id="more"></a></p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行包括一个整数$n$($1\leq n\leq 50000$),表示数列a中的元素数。<br>第二行包括$n$个整数$a_1,…,a_n$($a_i\gt 0$,保证$a_i$在int内)。<br>接下来一行包括一个整数$m$($1\leq m\leq 50000$),表示询问的个数。<br>接下来m行,每行包括$2$个整数$l$、$r$($1\leq l\leq r\leq n$),表示询问al…ar中的逆序<br>对数(若$a_i\gt a_j$且$i\lt j$,则为一个逆序对)。<br>$l$,$r$要分别异或上一次询问的答案(<code>lastans</code>),最开始时<code>lastans=0</code>。<br>保证涉及的所有数在int内。</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对每个询问,单独输出一行,表示al…ar中的逆序对数。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4<br>1 4 2 3<br>1<br>2 4</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>2</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>分块即可。（布吉岛的自己百度<br>就系把长度为 N 的序列分成 sqrt(N) 块啊，把这些块里的逆序对个数都预处理出来。<br>然后询问时多粗来的暴力求就好了嘛。。<br>问我怎么预处理？也是暴力啊、、<br>11784ms（把 i++ 都改成 ++i 会变慢。。。）</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&gt;<span class="string">'9'</span>||ch&lt;<span class="string">'0'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&lt;=<span class="string">'9'</span>&amp;&amp;ch&gt;=<span class="string">'0'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m, a[N], b[N], val[N];</div><div class="line"><span class="keyword">int</span> pos[N], st[N], rst[<span class="number">250</span>][N], btb[<span class="number">250</span>][<span class="number">250</span>];</div><div class="line"><span class="comment">// 树状数组</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)++val[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(;x;x-=x&amp;-x)ans+=val[x];</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span> val);</div><div class="line">	<span class="keyword">if</span>(pos[l]==pos[r])&#123;</div><div class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(;l&lt;=r;--r)</div><div class="line">			ans += ask(a[r]<span class="number">-1</span>), add(a[r]);</div><div class="line">		<span class="keyword">return</span> ans;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ans = btb[pos[l]+<span class="number">1</span>][pos[r]<span class="number">-1</span>], cnt = st[pos[r]]-st[pos[l]+<span class="number">1</span>];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = st[pos[l]+<span class="number">1</span>]<span class="number">-1</span>; l &lt;= i; --i)&#123;</div><div class="line">		ans += ask(a[i]<span class="number">-1</span>)+rst[pos[r]<span class="number">-1</span>][a[i]<span class="number">-1</span>]-rst[pos[l]][a[i]<span class="number">-1</span>];</div><div class="line">		add(a[i]); ++cnt;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = st[pos[r]]; i &lt;= r; i++)&#123;</div><div class="line">		ans += cnt-ask(a[i])-rst[pos[r]<span class="number">-1</span>][a[i]]+rst[pos[l]][a[i]];</div><div class="line">		add(a[i]); ++cnt;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		a[i] = b[i] = read();</div><div class="line">	sort(b+<span class="number">1</span>, b+n+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		a[i] = lower_bound(b+<span class="number">1</span>, b+n+<span class="number">1</span>, a[i])-b;</div><div class="line">	<span class="keyword">int</span> size = <span class="built_in">sqrt</span>(n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		pos[i] = (i<span class="number">-1</span>)/size+<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> block = pos[n];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= block; i++)</div><div class="line">		st[i] = size*(i<span class="number">-1</span>)+<span class="number">1</span>;</div><div class="line">	st[block+<span class="number">1</span>] = n+<span class="number">1</span>;</div><div class="line">	<span class="comment">// 偶就系要酱紫压行，你来咬偶啊</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>; i &lt;= block;</div><div class="line">			i++, cnt1=cnt2=<span class="number">0</span>, <span class="built_in">memcpy</span>(rst[i], rst[i<span class="number">-1</span>], <span class="keyword">sizeof</span> rst[i]),</div><div class="line">			<span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="keyword">sizeof</span> val))</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= block; j++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = st[j]; k &lt; st[j+<span class="number">1</span>]; k++)&#123;</div><div class="line">				btb[i][j] = (cnt1 += cnt2-ask(a[k]));</div><div class="line">				add(a[k]); ++cnt2, ++rst[j][a[k]];</div><div class="line">			&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= block; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= n; j++)</div><div class="line">			rst[i][j] += rst[i][j<span class="number">-1</span>];</div><div class="line">	<span class="keyword">int</span> m = read(), lastans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="keyword">int</span> l=read()^lastans, r=read()^lastans;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lastans = work(l, r));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3674: 可持久化并查集加强版]]></title>
      <url>/2017/04/06/BZOJ-3674-%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%8A%A0%E5%BC%BA%E7%89%88/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>自从zkysb出了可持久化并查集后……<br>hzwer:乱写能AC，暴力踩标程<br>KuribohG：我不路径压缩就过了！<br>ndsf：暴力就可以轻松虐！<br>zky:……</p>
<p>n个集合 m个操作<br>操作：<br><code>1 a b</code> 合并$a,b$所在集合<br><code>2 k</code> 回到第$k$次操作之后的状态(查询算作操作)<br><code>3 a b</code> 询问$a,b$是否属于同一集合，是则输出$1$否则输出$0$<br>请注意本题采用强制在线,所给的$a$，$b$，$k$均经过加密,加密方法为<code>x = x xor lastans</code>，<code>lastans</code>的初始值为0<br>$0\lt n,m\leq 2*10^5$<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>5 6<br>1 1 2<br>3 1 2<br>2 1<br>3 0 3<br>2 1<br>3 1 2</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1<br>0<br>1</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><del>C++的rope真好用</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/rope&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</div><div class="line">rope&lt;<span class="keyword">int</span>&gt; *rp[<span class="number">200010</span>]; <span class="comment">// 指针快qwq，把指针改成数组就RE了这又是为什么、、</span></div><div class="line"><span class="keyword">int</span> n, m, a[<span class="number">200100</span>], f, x, y, lastans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> fa = rp[i] -&gt; at(x);</div><div class="line">	<span class="keyword">if</span>(fa==x) <span class="keyword">return</span> x;</div><div class="line">	<span class="keyword">int</span> f = find(i, fa);</div><div class="line">	<span class="keyword">if</span>(f==fa) <span class="keyword">return</span> f;</div><div class="line">	rp[i] -&gt; replace(x, f);</div><div class="line">	<span class="keyword">return</span> f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		a[i] = i;</div><div class="line">	rp[<span class="number">0</span>] = <span class="keyword">new</span> rope&lt;<span class="keyword">int</span>&gt;(a, a+n+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)&#123;</div><div class="line">		rp[i] = <span class="keyword">new</span> rope&lt;<span class="keyword">int</span>&gt;(*rp[i<span class="number">-1</span>]);</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;f);</div><div class="line">		<span class="keyword">if</span>(f == <span class="number">1</span>)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">			x^=lastans, y^=lastans;</div><div class="line">			x = find(i,x);</div><div class="line">			y = find(i,y);</div><div class="line">			<span class="keyword">if</span>(x != y)</div><div class="line">				rp[i] -&gt; replace(y, x);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(f == <span class="number">2</span>)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); x^=lastans;</div><div class="line">			rp[i] = rp[x];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">			x^=lastans, y^=lastans;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lastans=find(i,x)==find(i,y));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3110: [Zjoi2013]K大数查询]]></title>
      <url>/2017/04/06/BZOJ-3110-Zjoi2013-K%E5%A4%A7%E6%95%B0%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>有$N$个位置，$M$个操作。操作有两种，每次操作如果是<code>1 a b c</code>的形式表示在第$a$个位置到第$b$个位置，每个位置加入一个数$c$<br>如果是<code>2 a b c</code>形式，表示询问从第$a$个位置到第$b$个位置，第$c$大的数是多少。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行$N$，$M$<br>接下来$M$行，每行形如<code>1 a b c</code>或<code>2 a b c</code></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>输出每个询问的结果<br><a id="more"></a></p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>2 5<br>1 1 2 1<br>1 1 2 2<br>2 1 1 2<br>2 1 1 1<br>2 1 2 3</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>1<br>2<br>1</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p>【样例说明】</p>
<ul>
<li>第一个操作 后位置 1 的数只有 1 ， 位置 2 的数也只有 1 。</li>
<li>第二个操作 后位置 1 的数有 1 、 2 ，位置 2 的数也有 1 、 2 。</li>
<li>第三次询问 位置 1 到位置 1 第 2 大的数是 1 。</li>
<li>第四次询问 位置 1 到位置 1 第 1 大的数是 2 。</li>
<li>第五次询问 位置 1 到位置 2 第 3 大的数是 1 。‍</li>
</ul>
<p>N,M&lt;=50000,a&lt;=b&lt;=N<br>1操作中abs(c)&lt;=N<br>2操作中c&lt;=Maxlongint</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>线段树套线段树，就是题目有些拗口。。。<br>因为有负数，所以在加的时候要加上一个 n 、询问的时候减去一个 n。<br>然后就可以了。过几天再打一遍，以免自己忘记和加深理解。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 20000020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> sz, rt[<span class="number">1000010</span>], ls[N], rs[N], tag[N], sum[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!ls[x]) ls[x] = ++sz;</div><div class="line">	<span class="keyword">if</span>(!rs[x]) rs[x] = ++sz;</div><div class="line">	<span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(tag[x])&#123;</div><div class="line">		tag[ls[x]] += tag[x];</div><div class="line">		sum[ls[x]] += tag[x]*(mid-L+<span class="number">1</span>);</div><div class="line">		tag[rs[x]] += tag[x];</div><div class="line">		sum[rs[x]] += tag[x]*(R-mid);</div><div class="line">		tag[x] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 把l-r的区间都加上1</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!x) x = ++sz;</div><div class="line">	<span class="keyword">if</span>(L==l&amp;&amp;R==r)&#123;</div><div class="line">		sum[x] += R-L+<span class="number">1</span>;</div><div class="line">		tag[x]++;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	pushdown(x, L, R);</div><div class="line">	<span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r&lt;=mid) insert(ls[x], L, mid, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) insert(rs[x], mid+<span class="number">1</span>, R, l, r);</div><div class="line">	<span class="keyword">else</span> insert(ls[x], L, mid, l, mid), insert(rs[x], mid+<span class="number">1</span>, R, mid+<span class="number">1</span>, r);</div><div class="line">	sum[x] = sum[ls[x]]+sum[rs[x]];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 询问l-r区间的和</span></div><div class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(L==l &amp;&amp; R==r) <span class="keyword">return</span> sum[x];</div><div class="line">	pushdown(x, L, R);</div><div class="line">	<span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r&lt;=mid) <span class="keyword">return</span> ask(ls[x], L, mid, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid) <span class="keyword">return</span> ask(rs[x], mid+<span class="number">1</span>, R, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> ask(ls[x], L, mid, l, mid)+ask(rs[x], mid+<span class="number">1</span>, R, mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">	insert(rt[x], <span class="number">1</span>, n, l, r);</div><div class="line">	<span class="keyword">if</span>(L==R) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(val&lt;=mid) insert(x&lt;&lt;<span class="number">1</span>, L, mid, l, r, val);</div><div class="line">	<span class="keyword">else</span> insert(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, R, l, r, val);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, ll k)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(L==R) <span class="keyword">return</span> L;</div><div class="line">	<span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</div><div class="line">	ll lefts = ask(rt[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>], <span class="number">1</span>, n, l, r);</div><div class="line">	<span class="keyword">if</span>(k&gt;lefts) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>, L, mid, l, r, k-lefts);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, R, l, r, k);</div><div class="line">&#125;</div><div class="line">ll K;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, t, l, r, num; i &lt;= m; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;t, &amp;l, &amp;r);</div><div class="line">		<span class="keyword">if</span>(t==<span class="number">1</span>)&#123;<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);insert(<span class="number">1</span>, <span class="number">0</span>, n&lt;&lt;<span class="number">1</span>, l, r, num+n);&#125;</div><div class="line">		<span class="keyword">else</span>&#123;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;K);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ask(<span class="number">1</span>, <span class="number">0</span>, n&lt;&lt;<span class="number">1</span>, l, r, K)-n);&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[POJ 2104 K-th Number]]></title>
      <url>/2017/04/06/POJ-2104-K-th-Number/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>要你求区间k小值</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">n m</div><div class="line">长度为 n 的原数列</div><div class="line">l1 r1 k1</div><div class="line">l2 r2 k2</div><div class="line">l3 r3 k3</div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>每行一个答案<br><a id="more"></a></p>
<h1 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h1><p>7 3<br>1 5 2 6 3 7 4<br>2 5 3<br>4 4 1<br>1 7 3</p>
<h1 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h1><p>5<br>6<br>3</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>主席树模板题。<br>一个点一个点加入，rt[x]就表示[1-x]的区间。<br>因为主席树是可以相减的，所以sz[r]-sz[l-1]就是[l-r]这个区间。<br>然后瞎搞一波就好了。<br>其实主席树就是线段树的升级版，就是每次增加操作时只更新有改变的节点，所以都是$log(n)$的。<br>最后还要离散化一下。<br><del>别问我怎么和hzwer的一模一样</del></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 真是日了POJ，连&lt;bits/stdc++.h&gt;都不支持</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000020</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 100020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> ls[N], rs[N], sz[N], lk[N], rk[N]; <span class="comment">// lk和rk是储存边界的</span></div><div class="line"><span class="keyword">int</span> a[M], b[M], rt[M], cnt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> k = ++cnt;</div><div class="line">	lk[k] = l, rk[k] = r;</div><div class="line">	<span class="keyword">if</span>(l == r) <span class="keyword">return</span> k;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	ls[k] = build(l, mid);</div><div class="line">	rs[k] = build(mid+<span class="number">1</span>, r);</div><div class="line">	<span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> pos)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> k = ++cnt;</div><div class="line">	ls[k] = ls[fa], rs[k] = rs[fa];</div><div class="line">	lk[k] = lk[fa], rk[k] = rk[fa];</div><div class="line">	sz[k] = sz[fa]+<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(lk[k] == rk[k]) <span class="keyword">return</span> k;</div><div class="line">	<span class="keyword">int</span> mid = lk[k] + rk[k] &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(mid &gt;= pos) ls[k] = insert(ls[fa], pos);</div><div class="line">	<span class="keyword">else</span> rs[k] = insert(rs[fa], pos);</div><div class="line">	<span class="keyword">return</span> k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(ls[x] == rs[x]) <span class="keyword">return</span> b[lk[x]];</div><div class="line">	<span class="keyword">int</span> cmp = sz[ls[x]]-sz[ls[fa]];</div><div class="line">	<span class="keyword">if</span>(cmp &gt;= k) <span class="keyword">return</span> ask(ls[fa], ls[x], k);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> ask(rs[fa], rs[x], k-cmp);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n=read(), m=read();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		a[i] = b[i] = read();</div><div class="line">	sort(b+<span class="number">1</span>, b+n+<span class="number">1</span>);</div><div class="line">	rt[<span class="number">0</span>] = build(<span class="number">1</span>, n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		rt[i] = insert(rt[i<span class="number">-1</span>], lower_bound(b+<span class="number">1</span>, b+n+<span class="number">1</span>, a[i])-b);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,x,y,z; i &lt;= m; i++)&#123;</div><div class="line">		x=read(); y=read(); z=read();</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ask(rt[x<span class="number">-1</span>], rt[y], z));</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1925: [Sdoi2010]地精部落]]></title>
      <url>/2017/04/05/BZOJ-1925-Sdoi2010-%E5%9C%B0%E7%B2%BE%E9%83%A8%E8%90%BD/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>传说很久以前，大地上居住着一种神秘的生物：地精。 地精喜欢住在连绵不绝的山脉中。具体地说，一座长度为 N 的山脉 H可分 为从左到右的 N 段，每段有一个独一无二的高度 Hi，其中Hi是1到N 之间的正 整数。 如果一段山脉比所有与它相邻的山脉都高，则这段山脉是一个山峰。位于边 缘的山脉只有一段相邻的山脉，其他都有两段（即左边和右边）。 类似地，如果一段山脉比所有它相邻的山脉都低，则这段山脉是一个山谷。 地精们有一个共同的爱好——饮酒，酒馆可以设立在山谷之中。地精的酒馆 不论白天黑夜总是人声鼎沸，地精美酒的香味可以飘到方圆数里的地方。 地精还是一种非常警觉的生物，他们在每座山峰上都可以设立瞭望台，并轮 流担当瞭望工作，以确保在第一时间得知外敌的入侵。 地精们希望这N 段山脉每段都可以修建瞭望台或酒馆的其中之一，只有满足 这个条件的整座山脉才可能有地精居住。 现在你希望知道，长度为N 的可能有地精居住的山脉有多少种。两座山脉A 和B不同当且仅当存在一个 i，使得 Ai≠Bi。由于这个数目可能很大，你只对它 除以P的余数感兴趣。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>仅含一行，两个正整数 N, P。<br><a id="more"></a></p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>仅含一行，一个非负整数，表示你所求的答案对P取余 之后的结果。</p>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>4 7</p>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>3</p>
<h1 id="HINT"><a href="#HINT" class="headerlink" title="HINT"></a>HINT</h1><p><img src="http://www.lydsy.com/JudgeOnline/images/1925.jpg"><br>对于 20%的数据，满足 N≤10；<br>对于 40%的数据，满足 N≤18；<br>对于 70%的数据，满足 N≤550；<br>对于 100%的数据，满足 3≤N≤4200，P≤109。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>dp+滚动数组。<br>然后就愉快的AC了一道水题。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, p, f[<span class="number">2</span>][<span class="number">5000</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;p);</div><div class="line">	f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, k=<span class="number">0</span>; i &lt;= n; i++,k^=<span class="number">1</span>)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</div><div class="line">			f[k][j] = (f[k][j<span class="number">-1</span>]+f[!k][i-j])%p;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (f[n&amp;<span class="number">1</span>][n]&lt;&lt;<span class="number">1</span>)%p);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1714 B君的游戏]]></title>
      <url>/2017/04/01/51nod-1714-B%E5%90%9B%E7%9A%84%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>B君和L君要玩一个游戏。刚开始有n个正整数ai。双方轮流操作。每次操作，选一个正整数x，将其移除，再添加7个数字$x_1,x_2,…,x_7$。要求对于$x_i$，满足$0\leq x_i\lt x$且$x&amp;x_i=x_i$。注意$0$不能被选取，所以这个游戏一定会结束，而谁无法操作谁就失败。B君根据自己的经验，认为先手胜率高一点，所以B君是先手。B君想知道自己是否必胜。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个整数n ($1 \leq n \leq 100000$)<br>以下n行n个数ai ($0 \leq ai \lt 2^64$)</p>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>如果先手必胜，输出”B”，否则输出”L”。<br><a id="more"></a></p>
<h1 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h1><p>4<br>1<br>2<br>3<br>4</p>
<h1 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h1><p>B</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>考虑到二进制上1的个数相同的数在这个游戏中本质上其实是相同的。统计数组b[k]表示二进制上有k个1的数字个数。当所有的b[k]均为偶数的时候，就是先手必败的局面。先手一次最多可以把八个奇数改为八个偶数，如果先手面对的局面有九个或者九的倍数个奇数，那么先手必败，否则后手必败。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, b[<span class="number">70</span>], tot, ans;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++, tot = <span class="number">0</span>)&#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; x;</div><div class="line">		<span class="keyword">for</span>(;x;x-=x&amp;-x)++tot;</div><div class="line">		++b[tot];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">70</span>; i++)ans+=b[i]&amp;<span class="number">1</span>;</div><div class="line">	<span class="built_in">puts</span>(ans%<span class="number">9</span>?<span class="string">"B"</span>:<span class="string">"L"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[洛谷P2734 游戏 A Game]]></title>
      <url>/2017/04/01/%E6%B4%9B%E8%B0%B7P2734-%E6%B8%B8%E6%88%8F-A-Game/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>有如下一个双人游戏:N(2 &lt;= N &lt;= 100)个正整数的序列放在一个游戏平台上，游戏由玩家1开始，两人轮流从序列的任意一端取一个数，取数后该数字被去掉并累加到本玩家的得分中，当数取尽时，游戏结束。以最终得分多者为胜。<br>现在要你编一个执行最优策略的程序，最优策略就是使玩家在与最好的对手对弈时，能得到的在当前情况下最大的可能的总分的策略。你的程序要始终为第二位玩家执行最优策略。</p>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><ul>
<li>第一行: 正整数N, 表示序列中正整数的个数。</li>
<li>第二行至末尾: 用空格分隔的N个正整数（大小为1-200）。</li>
</ul>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>只有一行，用空格分隔的两个整数: 依次为玩家一和玩家二最终的得分。</p>
<h1 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h1><p>6<br>4 7 2 9 5 2<br><a id="more"></a></p>
<h1 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h1><p>18 11</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><del>博弈论</del>（废话）<br>用f[i][j]表示区间[i,j]中的数全部取完时先手的得分，s[i][j]表示区间[i,j]内所有数的和。</p>
<p align="center"><strong>f[i][j]=max(s[i][j]-f[i+1][j],s[i][j]-f[i][j-1])</strong></p>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">250</span>], s[<span class="number">250</span>][<span class="number">250</span>], n, f[<span class="number">250</span>][<span class="number">250</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++)</div><div class="line">			s[i][j] = s[i][j<span class="number">-1</span>]+a[j];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; i--)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			f[i][j] = max(s[i][j]-f[i+<span class="number">1</span>][j], s[i][j]-f[i][j<span class="number">-1</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d"</span>, f[<span class="number">1</span>][n], s[<span class="number">1</span>][n]-f[<span class="number">1</span>][n]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Java编的小游戏——SW（弃坑）]]></title>
      <url>/2017/03/29/%E7%94%A8Java%E7%BC%96%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F%E2%80%94%E2%80%94%E2%80%94SW%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这就是一个坑啊。。。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>其实这个就是个渣渣作品，要就自己拿去吧<br>我东西都放在<a href="http://oierbbs.com/forum.php?mod=viewthread&tid=233" target="_blank" rel="external">oierbbs</a>上</p>
<blockquote>
<p>以下内容都是17w13a的版本</p>
</blockquote>
<h1 id="预览图"><a href="#预览图" class="headerlink" title="预览图"></a>预览图</h1><p>博客里放不下，所以自己去oierbbs上看去。</p>
<h1 id="玩法说明"><a href="#玩法说明" class="headerlink" title="玩法说明"></a>玩法说明</h1><p>PVP/跑酷<br>碰到刺就会死，掉到最下面也会死<br>每条命三格血，被子弹打到一次掉1血<br>血没了就死了（<del>废话</del><br>材质像普通石头方块，但最上面是绿色的是重生点方块，当玩家踩在上面时就会重设重生点<br><a id="more"></a></p>
<h1 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h1><p>P1: WASD移动，SPACE攻击<br>P2: 方向键移动，数字键 1 攻击</p>
<h1 id="文件结构说明"><a href="#文件结构说明" class="headerlink" title="文件结构说明"></a>文件结构说明</h1><p>/img - 保存贴图和地图文件（.map）<br>　　stone0-13.png - 各个方块对应的贴图<br>　　sky.png - 背景图片（可自行修改，585*585像素）</p>
<h1 id="地图编辑器"><a href="#地图编辑器" class="headerlink" title="地图编辑器"></a>地图编辑器</h1><p>按o打开，左键能使方块ID+1，右键使方块ID-1。<br>非空气方块和刺方块都是可以站人的</p>
<h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>最开始调颜色的时候可以修改透明度。。甚至还能改个全透明的皮肤。。<br>自带的PVP地图强行被作者贴上了logo。。</p>
<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>以后更新的时候再写吧。。</p>
]]></content>
      
        <categories>
            
            <category> 颓废 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作品发布 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3041: 水叮当的舞步]]></title>
      <url>/2017/03/29/BZOJ-3041-%E6%B0%B4%E5%8F%AE%E5%BD%93%E7%9A%84%E8%88%9E%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>水叮当得到了一块五颜六色的格子形地毯作为生日礼物，更加特别的是，地毯上格子的颜色还能随着踩踏而改变。<br>为了讨好她的偶像虹猫，水叮当决定在地毯上跳一支轻盈的舞来卖萌~~~<br>地毯上的格子有N行N列，每个格子用一个0~5之间的数字代表它的颜色。<br>水叮当可以随意选择一个0~5之间的颜色，然后轻轻地跳动一步，左上角的格子所在的联通块里的所有格子就会变成她选择的那种颜色。这里连通定义为：两个格子有公共边，并且颜色相同。<br>由于水叮当是施展轻功来跳舞的，为了不消耗过多的真气，她想知道最少要多少步才能把所有格子的颜色变成一样的。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>每个测试点包含多组数据。<br>每组数据的第一行是一个整数N，表示地摊上的格子有N行N列。<br>接下来一个N*N的矩阵，矩阵中的每个数都在0~5之间，描述了每个格子的颜色。<br>N=0代表输入的结束。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每组数据，输出一个整数，表示最少步数。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>2<br>0 0<br>0 0<br>3<br>0 1 2<br>1 1 2<br>2 2 1<br>0</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>0<br>3</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>启发式搜索+迭代加深搜索<br>一开始只用启发式搜索妥妥的TLE<br>后来因为一处for循环的初值赋错了调了两小时= =（<del>往事不堪回首</del><br>每次枚举左上角改成什么颜色，如果改了和没改一样，就continue。<br>期望步数就是除左上角的色块之外，其余色块的种类数<br>然后就AC了2333<img src="/img/huaji.png"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">4</span>]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">int</span> b[<span class="number">4</span>]=&#123;<span class="number">1</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> n, nn, mp[<span class="number">10</span>][<span class="number">10</span>], vis[<span class="number">10</span>][<span class="number">10</span>], ans,flag=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> x &amp;&amp; x &lt;= n;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	vis[x][y] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</div><div class="line">		<span class="keyword">if</span>(ok(x+a[i])&amp;&amp;ok(y+b[i])&amp;&amp;mp[x+a[i]][y+b[i]]==mp[x][y]&amp;&amp;!vis[x+a[i]][y+b[i]])</div><div class="line">			findfs(x+a[i], y+b[i]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			sum+=vis[i][j];</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">	findfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">	<span class="keyword">return</span> count();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);findfs(<span class="number">1</span>,<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>,a[<span class="number">6</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			<span class="keyword">if</span>(!vis[i][j])a[mp[i][j]]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) sum+=a[i];</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">int</span> h)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> g=get();</div><div class="line">	<span class="keyword">if</span>(!g)flag=<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(dep+g&gt;h||flag)<span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> mmp[<span class="number">10</span>][<span class="number">10</span>], re=mp[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">	<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">	<span class="keyword">int</span> sz = size();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			mmp[i][j] = vis[i][j];</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</div><div class="line">		<span class="keyword">if</span>(i==re)<span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</div><div class="line">				<span class="keyword">if</span>(mmp[j][k])mp[j][k]=i;</div><div class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">		<span class="keyword">if</span>(size()==sz)<span class="keyword">continue</span>;</div><div class="line">		dfs(dep+<span class="number">1</span>, h);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">			<span class="keyword">if</span>(mmp[i][j])mp[i][j] = re;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF&amp;&amp;(ans=n*n))&#123;</div><div class="line">		flag=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">				<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mp[i][j]);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= ans&amp;&amp;!flag; i++)&#123;</div><div class="line">			dfs(<span class="number">0</span>, i);</div><div class="line">			<span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 迭代加深搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 2824: [AHOI2012]铁盘整理]]></title>
      <url>/2017/03/28/BZOJ-2824-AHOI2012-%E9%93%81%E7%9B%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>在训练中，一些臂力训练器材是少不了的，小龙在练习的时候发现举重器械上的铁盘放置的非常混乱，并没有按照从轻到重的顺序摆放，这样非常不利于循序渐进的锻炼。他打算利用一个非常省力气的办法来整理这些铁盘，即每次都拿起最上面的若干个圆盘并利用器械的力量上下翻转，这样翻转若干次以后，铁盘将会按照从小到大的顺序排列好。那么你能不能帮小龙确定，最少翻转几次就可以使铁盘按从小到大排序呢？例如：下面的铁盘经过如图2.1所示的以下几个步骤的翻转后变为从小到大排列。<br><img src="http://www.lydsy.com/JudgeOnline/upload/201305/1(7).jpg"></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>共两行，第一行为铁盘个数N（1≤N≤50）。第二行为N个不同的正整数（中间用空格分开），分别为从上到下的铁盘的半径   R（1≤R≤100）</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个正整数，表示使铁盘按从小到大有序需要的最少翻转次数。<br><a id="more"></a></p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>5<br>2 4 3 5 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>5</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>就是启发式搜索啦，每次判断一下当前状态能到目标状态的预计操作次数（代码中是get()），如果预计操作次数大于当前的最优解，那就return。<br>然后就可以过啦qwq</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> id, val;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node &amp;b) <span class="keyword">const</span> &#123;</div><div class="line">		<span class="keyword">return</span> val &lt; b.val;</div><div class="line">	&#125;</div><div class="line">&#125;a[<span class="number">60</span>];</div><div class="line"><span class="keyword">int</span> n, pos[<span class="number">60</span>], ans = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>, pos[i]);<span class="built_in">puts</span>(<span class="string">""</span>);&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="keyword">if</span>(pos[i]!=i)<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</div><div class="line">		sum+=<span class="built_in">abs</span>(pos[i]-pos[i<span class="number">-1</span>])!=<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(l &lt; r) swap(pos[l++], pos[r--]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(check()) <span class="keyword">return</span> ans = min(ans, dep);</div><div class="line">	<span class="keyword">if</span>(dep+get()&gt;ans) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">		rev(<span class="number">1</span>, i);</div><div class="line">		dfs(dep+<span class="number">1</span>);</div><div class="line">		rev(<span class="number">1</span>, i);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[a[i].id=i].val);</div><div class="line">	sort(a+<span class="number">1</span>, a+n+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pos[a[i].id] = i;</div><div class="line">	ans = n&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</div><div class="line">	dfs(<span class="number">1</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans<span class="number">-1</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 启发式搜索 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3632: 外太空旅行]]></title>
      <url>/2017/03/28/BZOJ-3632-%E5%A4%96%E5%A4%AA%E7%A9%BA%E6%97%85%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>在人类的触角伸向银河系的边缘之际，普通人上太空旅行已经变得稀松平常了。某理科试验班有n个人，现在班主任要从中选出尽量多的人去参加一次太空旅行活动。<br>可是n名同学并不是和平相处的。有的人，比如小A和小B整天狼狈为奸，是好朋友；但还有的人，比如杜鲁门和赫鲁晓夫就水火不相容。这n名同学，由于是理科生，都非常的理性，所以“朋友的朋友就是朋友”和“敌人的朋友就是敌人”这两句话对这些同学无效。换句话说，有可能小A和小B是朋友，小B和小C是朋友，但是小A和小C两人势如水火。<br>任意两个人之间要不就是敌人，要不就是朋友。<br>因为在太空船上发生人员斗殴事件是很恶劣也很危险的，因此选出来参加旅行活动的同学必须互相之间都是朋友。你的任务就是确定最多可以选多少人参加旅行。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个整数n(1&lt;=n&lt;=50)。所有的同学按照1~n编号。<br>接下来若干行，每行两个用空格隔开的整数a, b(1&lt;=a,b&lt;=n)，表示a和b是朋友。<br>注意：如果一个数对(x,y)（或者(y,x)）没有在文件中出现，那么编号为x和y的两个同学就是敌人。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>仅仅一个数，即最多可以选多少人参加活动。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>4<br>1 2<br>2 3<br>3 1<br>1 4</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>3</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>传说有一种随机的算法叫蒙特卡罗、、<br>就是随机一下查找顺序，然后找一下再统计一下就行了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, x, y, mp[<span class="number">60</span>][<span class="number">60</span>], vis[<span class="number">60</span>], a[<span class="number">60</span>];</div><div class="line"><span class="keyword">int</span> sum, ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); srand(<span class="number">2333</span>);</div><div class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y) != EOF &amp;&amp; x &amp;&amp; y)</div><div class="line">		mp[x][y] = mp[y][x] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">10000</span>; ++k, ans = <span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">			swap(a[i], a[rand()%i+<span class="number">1</span>]); <span class="comment">// 随机一下查找的顺序</span></div><div class="line">		<span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</div><div class="line">			<span class="keyword">if</span>(!vis[i])&#123;</div><div class="line">				++ans;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= n; ++j)</div><div class="line">					<span class="keyword">if</span>(!mp[a[i]][a[j]])</div><div class="line">						vis[j] = <span class="number">1</span>; <span class="comment">// 把所有统计紧答案的人的敌人都筛去</span></div><div class="line">			&#125;</div><div class="line">		sum = max(sum, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 蒙特卡罗 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MI作品鉴赏]]></title>
      <url>/2017/03/28/MI%E4%BD%9C%E5%93%81%E9%89%B4%E8%B5%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mine-Imator其实是个好东西<img src="/img/huaji.png"><br>我会把我大部分的作品发布到这个帖子里<img src="/img/huaji.png"><br>其实都是些搞事情的图片，没有什么可以欣赏的<img src="/img/huaji.png"><br>不多说了自己看吧<img src="/img/haipa.png"><br><a id="more"></a></p>
<h2 id="2017-3-27"><a href="#2017-3-27" class="headerlink" title="2017.3.27"></a>2017.3.27</h2><p>这图是来调戏同学的2333<br><img src="/img/MI1.png"></p>
<h2 id="2017-3-28"><a href="#2017-3-28" class="headerlink" title="2017.3.28"></a>2017.3.28</h2><p>这图是用来调戏同学和oierbbs的管理的2333<br><img src="/img/OhNO3.png"></p>
]]></content>
      
        <categories>
            
            <category> 颓废 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 作品发布 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1656: [Usaco2006 Jan] The Grove 树木]]></title>
      <url>/2017/03/28/BZOJ-1656-Usaco2006-Jan-The-Grove-%E6%A0%91%E6%9C%A8/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>The pasture contains a small, contiguous grove of trees that has no ‘holes’ in the middle of the it. Bessie wonders: how far is it to walk around that grove and get back to my starting position? She’s just sure there is a way to do it by going from her start location to successive locations by walking horizontally, vertically, or diagonally and counting each move as a single step. Just looking at it, she doesn’t think you could pass ‘through’ the grove on a tricky diagonal. Your job is to calculate the minimum number of steps she must take. Happily, Bessie lives on a simple world where the pasture is represented by a grid with R rows and C columns (1 &lt;= R &lt;= 50, 1 &lt;= C &lt;= 50). Here’s a typical example where ‘.’ is pasture (which Bessie may traverse), ‘X’ is the grove of trees, ‘*‘ represents Bessie’s start and end position, and ‘+’ marks one shortest path she can walk to circumnavigate the grove (i.e., the answer): …+… ..+X+.. .+XXX+. ..+XXX+ ..+X..+ …+++* The path shown is not the only possible shortest path; Bessie might have taken a diagonal step from her start position and achieved a similar length solution. Bessie is happy that she’s starting ‘outside’ the grove instead of in a sort of ‘harbor’ that could complicate finding the best path.<br>牧场里有一片树林，林子里没有坑。<br>贝茜很想知道，最少需要多少步能围绕树林走一圈，最后回到起点。她能上下左右走，也能走对角线格子。牧场被分成R行C列(1≤R≤50，1≤C≤50)。下面是一张样例的地图，其中“．”表示贝茜可以走的空地，  “X”表示树林，  “*”表示起点．而贝茜走的最近的路已经特别地用“+”表示出来。<br><a id="more"></a><br><img src="http://www.lydsy.com/JudgeOnline/upload/201401/11(5).jpg"><br>题目保证，最短的路径一定可以找到。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><ul>
<li>Line 1: Two space-separated integers: R and C</li>
<li>Lines 2..R+1: Line i+1 describes row i with C characters (with no spaces between them).</li>
</ul>
<p>第1行输入R和C，接下来R行C列表示一张地图．地图中的符号如题干所述．</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><ul>
<li>Line 1: The single line contains a single integer which is the smallest number of steps required to circumnavigate the grove.<br>输出最少的步数．</li>
</ul>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>6 7<br>…….<br>…X…<br>..XXX..<br>…XXX.<br>…X…<br>……*</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>13</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以随机选一棵树，向下画一条射线，然后在bfs的时候强制不越过该射线，最后统计一下射线左右的值即可。<br>一遍过2333、、、</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, mp[<span class="number">60</span>][<span class="number">60</span>], sx, sy;</div><div class="line"><span class="keyword">int</span> a[<span class="number">8</span>]=&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">int</span> b[<span class="number">8</span>]=&#123;<span class="number">1</span>, <span class="number">1</span>,<span class="number">-1</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>,<span class="number">-1</span>&#125;;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	node()&#123;&#125;</div><div class="line">	node(<span class="keyword">int</span> a, <span class="keyword">int</span> b):x(a),y(b)&#123;&#125;</div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">queue</span>&lt;node&gt; q;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">char</span> ch = getchar();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++, ch=getchar())</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">			mp[i][j] = getchar();</div><div class="line">			<span class="keyword">if</span>(mp[i][j] == <span class="string">'.'</span>) mp[i][j] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">'X'</span>) mp[i][j] = <span class="number">-1</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">'*'</span>) mp[sx=i][sy=j] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">int</span> x = rand()%n+<span class="number">1</span>, y = rand()%m+<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span>(mp[x][y]!=<span class="number">-1</span>)</div><div class="line">		x = rand()%n+<span class="number">1</span>, y = rand()%m+<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> yy = y*<span class="number">2</span>+<span class="number">1</span>;</div><div class="line">	q.push(node(sx, sy));</div><div class="line">	<span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">		node t = q.front(); q.pop();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</div><div class="line">			<span class="keyword">if</span>(t.x+a[i] &amp;&amp; t.x+a[i]&lt;=n &amp;&amp; t.y+b[i] &amp;&amp; t.y+b[i]&lt;=m</div><div class="line">					&amp;&amp; mp[t.x+a[i]][t.y+b[i]]==<span class="number">0</span> &amp;&amp; (t.y*<span class="number">2</span>+b[i]!=yy || t.x&gt;x))&#123;</div><div class="line">				mp[t.x+a[i]][t.y+b[i]] = mp[t.x][t.y]+<span class="number">1</span>;</div><div class="line">				q.push(node(t.x+a[i], t.y+b[i]));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>&lt;&lt;<span class="number">30</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = x; i; i--) <span class="keyword">if</span>(mp[i][y]&gt;<span class="number">0</span>)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">-1</span>; j &lt; <span class="number">2</span>; j++)</div><div class="line">			<span class="keyword">if</span>(mp[i+j][y+<span class="number">1</span>]&gt;<span class="number">0</span>) ans = min(ans, mp[i][y]+mp[i+j][y+<span class="number">1</span>]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans+<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> bfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1037: [ZJOI2008]生日聚会Party]]></title>
      <url>/2017/03/27/BZOJ-1037-ZJOI2008-%E7%94%9F%E6%97%A5%E8%81%9A%E4%BC%9AParty/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>今天是hidadz小朋友的生日，她邀请了许多朋友来参加她的生日party。 hidadz带着朋友们来到花园中，打算坐成一排玩游戏。为了游戏不至于无聊，就座的方案应满足如下条件：对于任意连续的一段，男孩与女孩的数目之差不超过k。很快，小朋友便找到了一种方案坐了下来开始游戏。hidadz的好朋友Susie发现，这样的就座方案其实是很多的，所以大家很快就找到了一种，那么到底有多少种呢？热爱数学的hidadz和她的朋友们开始思考这个问题…… 假设参加party的人中共有n个男孩与m个女孩，你是否能解答Susie和hidadz的疑问呢？由于这个数目可能很多，他们只想知道这个数目除以12345678的余数。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>仅包含一行共3个整数，分别为男孩数目n，女孩数目m，常数k。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>应包含一行，为题中要求的答案。</p>
<h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><p>1 2 1</p>
<h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><p>1</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>dp: f[i][j][x][y]表示搜到第i个人，前面共有j个男的，男的比女的多x或女的比男的多y个的方案数<br>转移还是很好写的2333</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 12345678</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, k;</div><div class="line"><span class="keyword">int</span> f[<span class="number">320</span>][<span class="number">155</span>][<span class="number">22</span>][<span class="number">22</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n+m; ++i) <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j)</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x) <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y)</div><div class="line">	<span class="keyword">if</span>(f[i][j][x][y])&#123;</div><div class="line">		<span class="keyword">if</span>(x &lt; k &amp;&amp; j &lt; n)</div><div class="line">			(f[i+<span class="number">1</span>][j+<span class="number">1</span>][x+<span class="number">1</span>][max(y<span class="number">-1</span>, <span class="number">0</span>)] += f[i][j][x][y]) %= zyy;</div><div class="line">		<span class="keyword">if</span>(y &lt; k &amp;&amp; i-j &lt; m)</div><div class="line">			(f[i+<span class="number">1</span>][j][max(x<span class="number">-1</span>, <span class="number">0</span>)][y+<span class="number">1</span>] += f[i][j][x][y]) %= zyy;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= k; ++x)</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= k; ++y)</div><div class="line">		(ans += f[n+m][i][x][y]) %= zyy;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 4173: 数学]]></title>
      <url>/2017/03/27/BZOJ-4173-%E6%95%B0%E5%AD%A6/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>设S(n, m)为满足m mod k + n mod k &gt;= k的所有整数k组成的集合，例如S(7, 9) = {2, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16}，PRIME最近又了解了一下各种函数于是在上面捣鼓起了欧拉函数φ，他的目标是求出φ(n)*φ(m)*∑<sub>k∈S(n, m)</sub>φ(k) mod 998244353。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>5 6</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>240</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><a href="http://blog.csdn.net/popoqqq/article/details/46820313" target="_blank" rel="external">orz PoPoQQQ神犇</a><br>知道要你求φ(n)*φ(m)*n*m就简单了2333<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> zyy 998244353</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function">ll <span class="title">phi</span><span class="params">(ll x)</span></span>&#123; <span class="comment">// 求单个欧拉函数</span></div><div class="line">	ll temp = x;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">2</span>; i*i &lt;= x; ++i)</div><div class="line">		<span class="keyword">if</span>(!(x%i))&#123;</div><div class="line">			temp/=i; temp*=i<span class="number">-1</span>;</div><div class="line">			<span class="keyword">while</span>(!(x%i)) x /= i;</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">if</span>(x != <span class="number">1</span>)&#123;temp/=x; temp*=x<span class="number">-1</span>;&#125;</div><div class="line">	<span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line">ll n, m;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, phi(n)%zyy*(phi(m)%zyy)%zyy*(n%zyy)%zyy*(m%zyy)%zyy);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教程: 用Sublime Text 3编译和运行C++程序]]></title>
      <url>/2017/03/24/%E6%95%99%E7%A8%8B-%E7%94%A8Sublime-Text-3%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8CC-%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>咳咳，如果你dev用惯了，看他不爽，想换个IDE，那么推荐用Sublime Text这款软件。由于服务器在国外，所以下载可能会有点慢，所以提供一个百度网盘链接：<a href="http://pan.baidu.com/s/1i5tDUFb" target="_blank" rel="external">jvgp</a>。链接挂了跟我说。</p>
<h2 id="安装编译器"><a href="#安装编译器" class="headerlink" title="安装编译器"></a>安装编译器</h2><p>把 安装目录/mingwXX/bin/的路径加到环境变量里。<br>然后打开控制台输入<code>g++ --version</code>看看是否正常。</p>
<h2 id="添加Build-System"><a href="#添加Build-System" class="headerlink" title="添加Build System"></a>添加Build System</h2><p>打开Sublime Text，点击Tools -&gt; Build System -&gt; New Build System…，再把下面的东西复制进去<a id="more"></a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"cmd"</span>: [<span class="string">"g++"</span>, <span class="string">"$&#123;file&#125;"</span>, <span class="string">"-o"</span>, <span class="string">"$&#123;file_path&#125;/$&#123;file_base_name&#125;"</span>, <span class="string">"-O2"</span>, <span class="string">"-std=c++11"</span>],</div><div class="line">	<span class="attr">"file_regex"</span>: <span class="string">"^(..[^:]*):([0-9]+):?([0-9]+)?:?(.*)$"</span>,</div><div class="line">	<span class="attr">"working_dir"</span>: <span class="string">"$&#123;file_path&#125;"</span>,</div><div class="line">	<span class="attr">"encoding"</span>: <span class="string">"utf-8"</span>,</div><div class="line">	<span class="attr">"selector"</span>: <span class="string">"source.c++"</span>,</div><div class="line">	<span class="attr">"variants"</span>:</div><div class="line">	[</div><div class="line">		&#123;</div><div class="line">			<span class="attr">"name"</span>: <span class="string">"Run"</span>,</div><div class="line">			<span class="attr">"cmd"</span>: [<span class="string">"cmd"</span>, <span class="string">"/C"</span>, <span class="string">"start"</span>, <span class="string">"cmd"</span>, <span class="string">"/c"</span>, <span class="string">"$&#123;file_path&#125;/$&#123;file_base_name&#125;.exe &amp;pause"</span>]</div><div class="line">		&#125;</div><div class="line">	]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着保存为cpp.sublime-build，再点击Tools -&gt; Build System -&gt; CPP就完成啦。</p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p><code>Ctrl+Shift+B</code>打开菜单，选择cpp是编译，选择cpp-Run是运行（自带pause）<br><code>Ctrl+B</code>重复上一操作</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>貌似这个编辑器还可以安装各种强大的插件。。具体可以另找教程。</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1854: [Scoi2010]游戏]]></title>
      <url>/2017/03/24/BZOJ-1854-Scoi2010-%E6%B8%B8%E6%88%8F/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>lxhgww最近迷上了一款游戏，在游戏里，他拥有很多的装备，每种装备都有2个属性，这些属性的值用[1,10000]之间的数表示。当他使用某种装备时，他只能使用该装备的某一个属性。并且每种装备最多只能使用一次。 游戏进行到最后，lxhgww遇到了终极boss，这个终极boss很奇怪，攻击他的装备所使用的属性值必须从1开始连续递增地攻击，才能对boss产生伤害。也就是说一开始的时候，lxhgww只能使用某个属性值为1的装备攻击boss，然后只能使用某个属性值为2的装备攻击boss，然后只能使用某个属性值为3的装备攻击boss……以此类推。 现在lxhgww想知道他最多能连续攻击boss多少次？</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入的第一行是一个整数N，表示lxhgww拥有N种装备接下来N行，是对这N种装备的描述，每行2个数字，表示第i种装备的2个属性值</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出一行，包括1个数字，表示lxhgww最多能连续攻击的次数。<br><a id="more"></a></p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>3<br>1 2<br>3 2<br>4 5</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>2</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>震惊！这题竟然可以用并查集AC！<br>具体请看<a href="http://hzwer.com/2950.html" target="_blank" rel="external">hzwer的解释</a>！！</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> vis[<span class="number">1000010</span>], ans, n, x, y, fa[<span class="number">1000010</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> x == fa[x] ? x : fa[x] = find(fa[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>; ++i) fa[i] = i;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</div><div class="line">		x = find(x), y = find(y);</div><div class="line">		<span class="keyword">if</span>(x == y) vis[x] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">if</span>(x &gt; y) swap(x, y);</div><div class="line">			vis[x] = <span class="number">1</span>;</div><div class="line">			fa[x] = y;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>; i++) <span class="comment">// 可能可以用上所有装备所以要到n+1</span></div><div class="line">		<span class="keyword">if</span>(!vis[i]) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i<span class="number">-1</span>)&amp;<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3038: 上帝造题的七分钟2]]></title>
      <url>/2017/03/17/BZOJ-3038-%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F2/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>XLk觉得《上帝造题的七分钟》不太过瘾，于是有了第二部。<br>“第一分钟，X说，要有数列，于是便给定了一个正整数数列。<br>第二分钟，L说，要能修改，于是便有了对一段数中每个数都开平方(下取整)的操作。<br>第三分钟，k说，要能查询，于是便有了求一段数的和的操作。<br>第四分钟，彩虹喵说，要是noip难度，于是便有了数据范围。<br>第五分钟，诗人说，要有韵律，于是便有了时间限制和内存限制。<br>第六分钟，和雪说，要省点事，于是便有了保证运算过程中及最终结果均不超过64位有符号整数类型的表示范围的限制。<br>第七分钟，这道题终于造完了，然而，造题的神牛们再也不想写这道题的程序了。”<br>——《上帝造题的七分钟·第二部》<br>所以这个神圣的任务就交给你了。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行一个整数n，代表数列中数的个数。<br>第二行n个正整数，表示初始状态下数列中的数。<br>第三行一个整数m，表示有m次操作。<br>接下来m行每行三个整数k,l,r，k=0表示给[l,r]中的每个数开平方(下取整)，k=1表示询问[l,r]中各个数的和。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于询问操作，每行输出一个回答。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>10<br>1 2 3 4 5 6 7 8 9 10<br>5<br>0 1 10<br>1 1 10<br>1 1 5<br>0 5 8<br>1 4 8</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>19<br>7<br>6</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>线段树开根，还是很水的<br>其实如果一个数是0或1，那么开不开根就没有区别<br>所以操作时如果一个区间的和为0或1，直接return就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100050</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> n, m, x, y, z;</div><div class="line"><span class="keyword">int</span> ls[N&lt;&lt;<span class="number">2</span>], rs[N&lt;&lt;<span class="number">2</span>], lazy[N&lt;&lt;<span class="number">2</span>];</div><div class="line">ll a[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	a[x] = a[x&lt;&lt;<span class="number">1</span>] + a[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">	lazy[x] = lazy[x&lt;&lt;<span class="number">1</span>] &amp; lazy[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	ls[x] = l, rs[x] = r;</div><div class="line">	<span class="keyword">if</span>(l == r)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[x]);</div><div class="line">		<span class="keyword">if</span>(a[x] == <span class="number">1</span> || a[x] == <span class="number">0</span>) lazy[x] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>, l, mid);</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">	push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(ls[x] == l &amp;&amp; rs[x] == r) <span class="keyword">return</span> a[x];</div><div class="line">	<span class="keyword">int</span> mid = ls[x] + rs[x] &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>, l, mid) + ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sqrt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(lazy[x]) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(ls[x] == rs[x])&#123;</div><div class="line">		a[x] = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(a[x]);</div><div class="line">		<span class="keyword">if</span>(a[x] == <span class="number">1</span> || a[x] == <span class="number">0</span>) lazy[x] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = ls[x] + rs[x] &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) Sqrt(x&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid) Sqrt(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">else</span> Sqrt(x&lt;&lt;<span class="number">1</span>, l, mid), Sqrt(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">	push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">	<span class="keyword">while</span>(m-- &amp;&amp; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z) != EOF)&#123;</div><div class="line">		<span class="keyword">if</span>(y &gt; z) swap(y, z);</div><div class="line">		<span class="keyword">if</span>(x == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ask(<span class="number">1</span>, y, z));</div><div class="line">		<span class="keyword">else</span> Sqrt(<span class="number">1</span>, y, z);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1452: [JSOI2009]Count]]></title>
      <url>/2017/03/16/BZOJ-1452-JSOI2009-Count/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>一个 n*m 的方格，初始时每个格子有一个整数权值。接下来有 2 种操作：</p>
<ul>
<li>改变一个格子的权值；</li>
<li>求一个子矩阵中某种特定权值出现的个数。</li>
</ul>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行有两个数 N，M。<br>接下来 N 行，每行 M 个数，第 i+1 行第 j 个数表示格子(i, j)的初始权值。<br>接下来输入一个整数 Q。<br>之后 Q 行，每行描述一个操作。<br>操作1：“1 x y c”（不含双引号）。表示将格子(x, y)飞权值改成 c(1 ≤ x ≤ n, 1 ≤ y ≤ m, 1 ≤ c ≤ 100)。<br>操作2：“2 x1 x2 y1 y2 c”（不含双引号，x1 ≤ x2, y1 ≤ y2）。表示询问所有满足格子颜色为c，且 x1 ≤ x ≤ x2, y1 ≤ y ≤ y2 的格子(x, y)的个数。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>对于每个操作2，按照在输入中出现的顺序，一次输出一行一个整数表示所求得的个数。<br><a id="more"></a></p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>3 3<br>1 2 3<br>3 2 1<br>2 1 3<br>3<br>2 1 2 1 2 1<br>1 2 3 2<br>2 2 3 2 3 2</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>1<br>2</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>二位树状数组。。。<br>也就多了一层for循环的事情。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> t[<span class="number">105</span>][<span class="number">305</span>][<span class="number">305</span>], n, m, mp[<span class="number">305</span>][<span class="number">305</span>], q;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i)<span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=m;j+=j&amp;-j)t[c][i][j]+=val;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i-=i&amp;-i)<span class="keyword">for</span>(<span class="keyword">int</span> j=y;j;j-=j&amp;-j)ans+=t[c][i][j];</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;mp[i][j]);</div><div class="line">			add(mp[i][j], i, j, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</div><div class="line">	<span class="keyword">while</span>(q--)&#123;</div><div class="line">		<span class="keyword">int</span> op, x1, x2, y1, y2, c;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x1, &amp;y1, &amp;c);</div><div class="line">			add(mp[x1][y1], x1, y1, <span class="number">-1</span>);</div><div class="line">			mp[x1][y1] = c;</div><div class="line">			add(c, x1, y1, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;x1, &amp;x2, &amp;y1, &amp;y2, &amp;c);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, get(c, x2, y2) + get(c, x1<span class="number">-1</span>, y1<span class="number">-1</span>)</div><div class="line">				- get(c, x1<span class="number">-1</span>, y2) - get(c, x2, y1<span class="number">-1</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1022: [SHOI2008]小约翰的游戏John]]></title>
      <url>/2017/03/16/BZOJ-1022-SHOI2008-%E5%B0%8F%E7%BA%A6%E7%BF%B0%E7%9A%84%E6%B8%B8%E6%88%8FJohn/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>小约翰经常和他的哥哥玩一个非常有趣的游戏：桌子上有n堆石子，小约翰和他的哥哥轮流取石子，每个人取的时候，可以随意选择一堆石子，在这堆石子中取走任意多的石子，但不能一粒石子也不取，我们规定取到最后一粒石子的人算输。小约翰相当固执，他坚持认为先取的人有很大的优势，所以他总是先取石子，而他的哥哥就聪明多了，他从来没有在游戏中犯过错误。小约翰一怒之前请你来做他的参谋。自然，你应该先写一个程序，预测一下谁将获得游戏的胜利。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>本题的输入由多组数据组成第一行包括一个整数T，表示输入总共有T组数据（T≤500）。每组数据的第一行包括一个整数N（N≤50），表示共有N堆石子，接下来有N个不超过5000的整数，分别表示每堆石子的数目。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>每组数据的输出占一行，每行输出一个单词。如果约翰能赢得比赛，则输出“John”，否则输出“Brother”，请注意单词的大小写。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>2<br>3<br>3 5 1<br>1<br>1</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>John<br>Brother</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>博弈论水题，，，<br>要换成二进制观察和处理。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> T;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		<span class="keyword">int</span> n, x, sum = <span class="number">0</span>, flag = <span class="number">1</span>;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">		<span class="keyword">while</span>(n--)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">			<span class="keyword">if</span>(x^<span class="number">1</span>) flag = <span class="number">0</span>;</div><div class="line">			sum ^= x;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(flag) sum = !sum;</div><div class="line">		<span class="built_in">puts</span>(sum ? <span class="string">"John"</span> : <span class="string">"Brother"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1954: Pku3764 The xor-longest Path]]></title>
      <url>/2017/03/16/BZOJ-1954-Pku3764-The-xor-longest-Path/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给定一棵n个点的带权树，求树上最长的异或和路径。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>4<br>1 2 3<br>2 3 4<br>2 4 6</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>7<br><a id="more"></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>可以注意到 a -&gt; b 的异或和 = a -&gt; root 的异或和 ^ b -&gt; root 的异或和。所以用 Trie 保存所有点到根节点的异或和，再枚举每一个异或和，在Trie上尽量找与他每一位都相反的就行了（如果存在）。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100020</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> to, next, v;</div><div class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> head[N], cnt, val[N], bin[<span class="number">31</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">	e[++cnt].to = y; e[cnt].next = head[x]; head[x] = cnt; e[cnt].v = z;</div><div class="line">	e[++cnt].to = x; e[cnt].next = head[y]; head[y] = cnt; e[cnt].v = z;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = head[x]; i; i = e[i].next)&#123;</div><div class="line">		<span class="keyword">if</span>(e[i].to == fa) <span class="keyword">continue</span>;</div><div class="line">		val[e[i].to] = e[i].v ^ val[x];</div><div class="line">		dfs(e[i].to, x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> ch[N*<span class="number">30</span>][<span class="number">2</span>], sz;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> rt = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>, k = (x&amp;bin[<span class="number">30</span>])&gt;<span class="number">0</span>; i &gt;= <span class="number">0</span>; k = (x&amp;bin[--i])&gt;<span class="number">0</span>)</div><div class="line">		<span class="keyword">if</span>(!ch[rt][k]) rt = ch[rt][k] = ++sz;</div><div class="line">		<span class="keyword">else</span> rt = ch[rt][k];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> rt = <span class="number">0</span>, sum = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>, k = (x&amp;bin[<span class="number">30</span>])&gt;<span class="number">0</span>; i &gt;= <span class="number">0</span>; k = (x&amp;bin[--i])&gt;<span class="number">0</span>)</div><div class="line">		<span class="keyword">if</span>(ch[rt][!k]) rt = ch[rt][!k], sum += bin[i];</div><div class="line">		<span class="keyword">else</span> rt = ch[rt][k];</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> n, x, y, z;</div><div class="line">	bin[<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) bin[i] = bin[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;x, &amp;y, &amp;z);</div><div class="line">		add(x, y, z);</div><div class="line">	&#125;</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>); <span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ins(val[i]);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ans = max(ans, ask(val[i]));</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hdu 2222 Keywords Search]]></title>
      <url>/2017/03/16/hdu-2222-Keywords-Search/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给你一堆子串，要你求在母串里找有多少个子串出现过，多组数据。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>1<br>5<br>she<br>he<br>say<br>shr<br>her<br>yasherhs</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>3<br><a id="more"></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>AC自动机。。。<br>不明白网上一堆人为毛要用指针动态开点<br>听说这样跑得快？<br>但我还是打了非指针型的O(n<sup>2</sup>)，指针的太复杂回头再研究<br><del>照抄hzwer的竟然还调了一个上午</del></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> ch[<span class="number">60</span>];</div><div class="line"><span class="keyword">char</span> key[<span class="number">1000020</span>];</div><div class="line"><span class="keyword">int</span> T, n, sz, ans;</div><div class="line"><span class="keyword">int</span> son[<span class="number">1000020</span>][<span class="number">26</span>], mark[<span class="number">1000020</span>], fail[<span class="number">1000020</span>], q[<span class="number">1000020</span>], vis[<span class="number">1000020</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); ans = <span class="number">0</span>; sz = <span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) son[<span class="number">0</span>][i] = <span class="number">1</span>;</div><div class="line">		<span class="comment">// 建Trie</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%s"</span>, ch);</div><div class="line">			<span class="keyword">int</span> len = <span class="built_in">strlen</span>(ch), rt = <span class="number">1</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, k = ch[<span class="number">0</span>]-<span class="string">'a'</span>; j &lt; len; k = ch[++j]-<span class="string">'a'</span>)</div><div class="line">				<span class="keyword">if</span>(!son[rt][k]) rt = son[rt][k] = ++sz;</div><div class="line">				<span class="keyword">else</span> rt = son[rt][k];</div><div class="line">			mark[rt]++;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">// 求fail</span></div><div class="line">		<span class="keyword">int</span> h = <span class="number">1</span>, t = <span class="number">0</span>, now;</div><div class="line">		q[<span class="number">0</span>] = <span class="number">1</span>; fail[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(t &lt; h)&#123;</div><div class="line">			now = q[t++];</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</div><div class="line">				<span class="keyword">if</span>(!son[now][i]) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">int</span> tmp = fail[now];</div><div class="line">				<span class="keyword">while</span>(!son[tmp][i]) tmp = fail[tmp];</div><div class="line">				fail[son[now][i]] = son[tmp][i];</div><div class="line">				q[h++] = son[now][i];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, key);</div><div class="line">		<span class="comment">// 求解</span></div><div class="line">		<span class="keyword">int</span> rt = <span class="number">1</span>, len = <span class="built_in">strlen</span>(key);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = key[<span class="number">0</span>]-<span class="string">'a'</span>; i &lt; len; k = key[++i]-<span class="string">'a'</span>)&#123;</div><div class="line">			vis[rt] = <span class="number">1</span>;</div><div class="line">			<span class="keyword">while</span>(!son[rt][k]) rt = fail[rt];</div><div class="line">			rt = son[rt][k];</div><div class="line">			<span class="keyword">if</span>(!vis[rt])</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = rt; j; j = fail[j])</div><div class="line">					ans += mark[j],</div><div class="line">					mark[j] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">		<span class="comment">// 听说这样比memset快、、、</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; i++)&#123;</div><div class="line">			fail[i] = mark[i] = vis[i] = <span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++)</div><div class="line">				son[i][j] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3.15摸你赛 前缀！]]></title>
      <url>/2017/03/15/3-15%E6%91%B8%E4%BD%A0%E8%B5%9B-%E5%89%8D%E7%BC%80%EF%BC%81/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>定义$f_0(x)=A_x,f_n(x)=\sum_{i=1}^{x-1}{f_{n-1}(i)}$，给出长度为 $N$ 的数组 $A$（从 $1~N$ 编号）和 $Q$ 个操作。<br>操作有两种：</p>
<ul>
<li><code>Add i j</code> 表示将 $A_i$的值加上 $j$（$j \leq P$）；</li>
<li><code>Query i j</code> 表示询问 $f_i(j)$的值（$i \leq M$），由于答案可能会很大，给我 <code>mod P</code> 后的答案即可，$P = 1,000,000,007$。</li>
</ul>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行为三个正整数 $N$、$M$、$Q$。<br>第二行为 $N$ 个非负整数，表示 $A$ 数组。<br>接下来 $Q$ 行，每行表示一个操作，<code>Add i j</code> 或 <code>Query i j</code>。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出有多行，每行表示 $f_i(j)$ mod $p$。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>4 4 4<br>1 1 1 1<br>Query 0 4<br>Query 4 3<br>Add 1 1<br>Query 3 2</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>1<br>15<br>7</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>其实是杨辉三角、、、不知你看不看得出来<br>其实就可以输入一个1 0 0 0 0…的数列，跑暴力看看就看出来了<br>看出来了就简单了哈（然而我还是爆蛋了，各种int溢出= =）</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> File(s) \</span></div><div class="line">	freopen(s<span class="meta-string">".in"</span>, <span class="meta-string">"r"</span>, stdin), \</div><div class="line">	freopen(s<span class="meta-string">".out"</span>, <span class="meta-string">"w"</span>, stdout)</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 4005</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll a[N], n, m, q, x, y, f[N][N];</div><div class="line"><span class="keyword">char</span> op[<span class="number">50</span>];</div><div class="line"><span class="function">ll <span class="title">get</span><span class="params">(ll i, ll j)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!i) <span class="keyword">return</span> a[j];</div><div class="line">	ll ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(ll x = j; x&gt;=<span class="number">1</span>; x--)</div><div class="line">		(ans += (ll)f[i][x<span class="number">-1</span>]*a[j-x+<span class="number">1</span>]) %= <span class="number">1000000007</span>;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	File(<span class="string">"b"</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>, &amp;n, &amp;m, &amp;q);</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; n ;i++)</div><div class="line">		f[<span class="number">1</span>][i] = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">2</span>; i &lt;= m; i++)</div><div class="line">	<span class="keyword">for</span>(ll j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">	f[i][j] = (f[i<span class="number">-1</span>][j]+f[i][j<span class="number">-1</span>])%<span class="number">1000000007</span>;</div><div class="line">	<span class="keyword">for</span>(ll i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, a+i);</div><div class="line">	<span class="keyword">while</span>(q--&amp;&amp;<span class="built_in">scanf</span>(<span class="string">"%s%I64d%I64d"</span>, op, &amp;x, &amp;y) != EOF) <span class="comment">// 强势压行</span></div><div class="line">		<span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'A'</span>) (a[x] += y)%=<span class="number">1000000007</span>;</div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, get(x, y));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 瞎搞 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3.15摸你赛 前缀？]]></title>
      <url>/2017/03/15/3-15%E6%91%B8%E4%BD%A0%E8%B5%9B-%E5%89%8D%E7%BC%80%EF%BC%9F/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>题面太长，大意是要你求一个n(1&lt;=n&lt;=400)位的3进制数字，要求该数字所有的前缀中，2的数量都大于等于1的数量，1的数量都大于等于0的数量，求满足要求的方案数，对1,000,000,007取模。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>3</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>4</p>
<h2 id="Sample-Explanation"><a href="#Sample-Explanation" class="headerlink" title="Sample Explanation"></a>Sample Explanation</h2><p>这 4 个字符串分别为“221”、“212”、“210”、“222”。<br><a id="more"></a></p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>dp<br>f[i][j]表示现在有i个2，j个1<br>用滚动数组递推求解</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> File(s) \</span></div><div class="line">	freopen(s<span class="meta-string">".in"</span>, <span class="meta-string">"r"</span>, stdin), \</div><div class="line">	freopen(s<span class="meta-string">".out"</span>, <span class="meta-string">"w"</span>, stdout)</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">405</span>][<span class="number">405</span>], n;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	File(<span class="string">"a"</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="keyword">int</span> k = n&amp;<span class="number">1</span>; f[!k][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 第一位只能取2</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= n; k ^= <span class="number">1</span>, x++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= x; i++)</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i &amp;&amp; i+j&lt;=x; j++)&#123;</div><div class="line">				f[k][i][j] = <span class="number">0</span>;</div><div class="line">				(f[k][i][j] += f[!k][i<span class="number">-1</span>][j]) %= mod; <span class="comment">// 这一位取2</span></div><div class="line">				<span class="keyword">if</span>(j) (f[k][i][j] += f[!k][i][j<span class="number">-1</span>]) %= mod; <span class="comment">// 这一位取1</span></div><div class="line">				<span class="keyword">if</span>(x-i-j &lt;= j) (f[k][i][j] += f[!k][i][j]) %= mod; <span class="comment">// 这一位取0</span></div><div class="line">			&#125;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i &amp;&amp; i+j &lt;= n; j++)</div><div class="line">			(ans += f[!k][i][j]) %= mod; <span class="comment">// 统计答案</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1526分配笔名]]></title>
      <url>/2017/03/14/51nod-1526%E5%88%86%E9%85%8D%E7%AC%94%E5%90%8D/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>班里有n个同学。老师为他们选了n个笔名。现在要把这些笔名分配给每一个同学，每一个同学分配到一个笔名，每一个笔名必须分配给某个同学。现在定义笔名和真名之间的相关度是他们之间的最长公共前缀。设笔名为a，真名为b，则他们之间的相关度为lcp(a,b)。那么我们就可以得到匹配的质量是每一个同学笔名和真名之间相关度的和。现在要求分配笔名，使得匹配质量最大。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>单组测试数据。<br>第一行有一个整数n (1≤n≤100000)，表示班级中同学的数目。<br>接下来n行，表示每一个同学的真名，每一个名字是非空串，且由小写字母组成。<br>名字可能重复。<br>最后n行是老师已经安排好的笔名。每一个笔名是一个非空串，且由小写字母组成。<br>笔名可能重复。<br>输入的字符总数目不超过 800000。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出最大的匹配质量。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>5<br>gennady<br>galya<br>boris<br>bill<br>toshik<br>bilbo<br>torin<br>gendalf<br>smaug<br>galadriel</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>11</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>裸的Trie…<br>把每个真名在Trie上所经过的路径的标记全部+1，读入笔名的时候搜下去，如果有标记就 标记-1, ans++<br><del>怎么证我不知道，反正A了</del></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> key[<span class="number">800020</span>];</div><div class="line"><span class="keyword">int</span> n, ch[<span class="number">800020</span>][<span class="number">26</span>], val[<span class="number">800020</span>], cnt, ans, l;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</div><div class="line">		gets(key+<span class="number">1</span>);</div><div class="line">		l = <span class="built_in">strlen</span>(key+<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>, rt = <span class="number">0</span>; j &lt;= l; ++j)&#123;</div><div class="line">			<span class="keyword">if</span>(!ch[rt][key[j]-<span class="string">'a'</span>])</div><div class="line">				ch[rt][key[j]-<span class="string">'a'</span>] = ++cnt;</div><div class="line">			rt = ch[rt][key[j]-<span class="string">'a'</span>];</div><div class="line">			++val[rt];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</div><div class="line">		gets(key+<span class="number">1</span>);</div><div class="line">		l = <span class="built_in">strlen</span>(key+<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">1</span>, rt = <span class="number">0</span>; j &lt;= l; ++j)&#123;</div><div class="line">			<span class="keyword">if</span>(!ch[rt][key[j]-<span class="string">'a'</span>]) <span class="keyword">break</span>;</div><div class="line">			rt = ch[rt][key[j]-<span class="string">'a'</span>];</div><div class="line">			<span class="keyword">if</span>(val[rt]) ++ans, --val[rt];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Trie </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codevs 1204 寻找子串位置]]></title>
      <url>/2017/03/14/codevs-1204-%E5%AF%BB%E6%89%BE%E5%AD%90%E4%B8%B2%E4%BD%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给出字符串a和字符串b，保证b是a的一个子串，请你输出b在a中第一次出现的位置。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>abcd bc</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>2</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>范围才100…暴力都能过吧= =<br>标算是KMP匹配，和暴力一样的0ms<br><a id="more"></a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> A[<span class="number">120</span>], B[<span class="number">120</span>];</div><div class="line"><span class="keyword">int</span> nxt[<span class="number">120</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, A+<span class="number">1</span>, B+<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> n = <span class="built_in">strlen</span>(A+<span class="number">1</span>), m = <span class="built_in">strlen</span>(B+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++)&#123;</div><div class="line">		<span class="keyword">while</span>(j &amp;&amp; B[j+<span class="number">1</span>] != B[i]) j = nxt[j];</div><div class="line">		<span class="keyword">if</span>(B[j+<span class="number">1</span>] == B[i]) j++; nxt[i] = j;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">while</span>(j &amp;&amp; A[i] != B[j+<span class="number">1</span>]) j = nxt[j];</div><div class="line">		<span class="keyword">if</span>(A[i] == B[j+<span class="number">1</span>]) j++;</div><div class="line">		<span class="keyword">if</span>(j == m) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i-m+<span class="number">1</span>)&amp;<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1355: [Baltic2009]Radio Transmission]]></title>
      <url>/2017/03/14/BZOJ-1355-Baltic2009-Radio-Transmission/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>给你一个字符串，它是由某个字符串不断自我连接形成的。 但是这个字符串是不确定的，现在只想知道它的最短长度是多少。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行给出字符串的长度,1 &lt; L ≤ 1,000,000. 第二行给出一个字符串，全由小写字母组成。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出最短的长度</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>8<br>cabcabca<br><a id="more"></a></p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>3</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>KMP。。。ans = n - next[n]。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">	Problem: 1355</div><div class="line">	User: SHENZHEBEI // 没权限哎╮(╯▽╰)╭</div><div class="line">	Language: C++</div><div class="line">	Result: Accepted</div><div class="line">	Time:24 ms</div><div class="line">	Memory:6172 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> B[<span class="number">1000050</span>];</div><div class="line"><span class="keyword">int</span> n, nxt[<span class="number">1000050</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, B+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="keyword">while</span>(j &amp;&amp; B[j+<span class="number">1</span>] != B[i]) j = nxt[j];</div><div class="line">		<span class="keyword">if</span>(B[j+<span class="number">1</span>] == B[i]) j++; nxt[i] = j;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, n-nxt[n]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 3670: [Noi2014]动物园]]></title>
      <url>/2017/03/14/BZOJ-3670-Noi2014-%E5%8A%A8%E7%89%A9%E5%9B%AD/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>近日，园长发现动物园中好吃懒做的动物越来越多了。例如企鹅，只会卖萌向游客要吃的。为了整治动物园的不良风气，让动物们凭自己的真才实学向游客要吃的，园长决定开设算法班，让动物们学习算法。<br>某天，园长给动物们讲解KMP算法。<br>园长：“对于一个字符串S，它的长度为L。我们可以在O(L)的时间内，求出一个名为next的数组。有谁预习了next数组的含义吗？”<br>熊猫：“对于字符串S的前i个字符构成的子串，既是它的后缀又是它的前缀的字符串中（它本身除外），最长的长度记作next[i]。”<br>园长：“非常好！那你能举个例子吗？”<br>熊猫：“例S为abcababc，则next[5]=2。因为S的前5个字符为abcab，ab既是它的后缀又是它的前缀，并且找不到一个更长的字符串满足这个性质。同理，还可得出next[1] = next[2] = next[3] = 0，next[4] = next[6] = 1，next[7] = 2，next[8] = 3。”<br>园长表扬了认真预习的熊猫同学。随后，他详细讲解了如何在O(L)的时间内求出next数组。<br>下课前，园长提出了一个问题：“KMP算法只能求出next数组。我现在希望求出一个更强大num数组一一对于字符串S的前i个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作num[i]。例如S为aaaaa，则num[4] = 2。这是因为S的前4个字符为aaaa，其中a和aa都满足性质‘既是后缀又是前缀’，同时保证这个后缀与这个前缀不重叠。而aaa虽然满足性质‘既是后缀又是前缀’，但遗憾的是这个后缀与这个前缀重叠了，所以不能计算在内。同理，num[1] = 0,num[2] = num[3] = 1,num[5] = 2。”<br>最后，园长给出了奖励条件，第一个做对的同学奖励巧克力一盒。听了这句话，睡了一节课的企鹅立刻就醒过来了！但企鹅并不会做这道题，于是向参观动物园的你寻求帮助。你能否帮助企鹅写一个程序求出num数组呢？<br>特别地，为了避免大量的输出，你不需要输出num[i]分别是多少，你只需要输出$\Pi_{i=1}^L{(num[i]+1)}$对1,000,000,007取模的结果即可。<br><a id="more"></a></p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第1行仅包含一个正整数n ，表示测试数据的组数。随后n行，每行描述一组测试数据。每组测试数据仅含有一个字符串S，S的定义详见题目描述。数据保证S中仅含小写字母。输入文件中不会包含多余的空行，行末不会存在多余的空格。</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>包含 n 行，每行描述一组测试数据的答案，答案的顺序应与输入数据的顺序保持一致。对于每组测试数据，仅需要输出一个整数，表示这组测试数据的答案对1,000,000,007 取模的结果。输出文件中不应包含多余的空行。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>3<br>aaaaa<br>ab<br>abcababc</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>36<br>1<br>32</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>裸的KMP，只是多了一个限制条件，要前缀和后缀不能重叠而已，所以当j &gt; i/2时，j = nxt[j]就好了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">	Problem: 3670</div><div class="line">	User: SW_Wind</div><div class="line">	Language: C++</div><div class="line">	Result: Accepted</div><div class="line">	Time:748 ms</div><div class="line">	Memory:10076 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1000050</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 1000000007</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> B[N]; ll ans;</div><div class="line"><span class="keyword">int</span> T, nxt[N], cnt[N];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">while</span>(T--)&#123;</div><div class="line">		ans = cnt[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, B+<span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> n = <span class="built_in">strlen</span>(B+<span class="number">1</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</div><div class="line">			<span class="keyword">while</span>(j &amp;&amp; B[i] != B[j+<span class="number">1</span>]) j = nxt[j];</div><div class="line">			<span class="keyword">if</span>(B[i] == B[j+<span class="number">1</span>]) j++; nxt[i] = j; cnt[i] = cnt[j]+<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123;</div><div class="line">			<span class="keyword">while</span>(j &amp;&amp; B[i] != B[j+<span class="number">1</span>]) j = nxt[j];</div><div class="line">			<span class="keyword">if</span>(B[i] == B[j+<span class="number">1</span>]) j++;</div><div class="line">			<span class="keyword">while</span>(j*<span class="number">2</span> &gt; i) j = nxt[j];</div><div class="line">			ans *= cnt[j] + <span class="number">1</span>;</div><div class="line">			ans %= MOD;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[51nod 1277 字符串中的最大值]]></title>
      <url>/2017/03/14/51nod-1277-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>一个字符串的前缀是指包含该字符第一个字母的连续子串，例如：abcd的所有前缀为a, ab, abc, abcd。<br>给出一个字符串S，求其所有前缀中，字符长度与出现次数的乘积的最大值。<br>例如：S = “abababa” 所有的前缀如下:</p>
<p>“a”, 长度与出现次数的乘积 1 * 4 = 4,<br>“ab”,长度与出现次数的乘积 2 * 3 = 6,<br>“aba”, 长度与出现次数的乘积 3 * 3 = 9,<br>“abab”, 长度与出现次数的乘积 4 * 2 = 8,<br>“ababa”, 长度与出现次数的乘积 5 * 2 = 10,<br>“ababab”, 长度与出现次数的乘积 6 * 1 = 6,<br>“abababa”, 长度与出现次数的乘积 7 * 1 = 7.</p>
<p>其中”ababa”出现了2次，二者的乘积为10，是所有前缀中最大的。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>abababa<br><a id="more"></a></p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>10</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>先线性求2-n的next数组（表示字符串[1, i]的最长非自身border的长度）<br>然后乘起来取max就行了<br>传说这玩意叫KMP</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100050</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">char</span> B[N];</div><div class="line">ll nxt[N], cnt[N], ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, B+<span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> n = <span class="built_in">strlen</span>(B+<span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; i++)&#123; <span class="comment">// 线性求next</span></div><div class="line">		<span class="keyword">while</span>(j &amp;&amp; B[i] != B[j+<span class="number">1</span>]) j = nxt[j];</div><div class="line">		<span class="keyword">if</span>(B[i] == B[j+<span class="number">1</span>]) j++; nxt[i] = j; cnt[j]++;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = n; i; i--)&#123; <span class="comment">// 求值</span></div><div class="line">		ans = max(ans, (ll)i*cnt[i]+i);</div><div class="line">		cnt[nxt[i]] += cnt[i];</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KMP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1756: Vijos1083 小白逛公园]]></title>
      <url>/2017/03/13/BZOJ-1756-Vijos1083-%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>小新经常陪小白去公园玩，也就是所谓的遛狗啦…在小新家附近有一条“公园路”，路的一边从南到北依次排着n个公园，小白早就看花了眼，自己也不清楚该去哪些公园玩了。一开始，小白就根据公园的风景给每个公园打了分-.-。小新为了省事，每次遛狗的时候都会事先规定一个范围，小白只可以选择第a个和第b个公园之间（包括a、b两个公园）选择连续的一些公园玩。小白当然希望选出的公园的分数总和尽量高咯。同时，由于一些公园的景观会有所改变，所以，小白的打分也可能会有一些变化。那么，就请你来帮小白选择公园吧。</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行，两个整数N和M，分别表示表示公园的数量和操作（遛狗或者改变打分）总数。 接下来N行，每行一个整数，依次给出小白 开始时对公园的打分。 接下来M行，每行三个整数。第一个整数K，1或2。K=1表示，小新要带小白出去玩，接下来的两个整数a和b给出了选择公园的范围（1≤a,b≤N）；K=2表示，小白改变了对某个公园的打分，接下来的两个整数p和s，表示小白对第p个公园的打分变成了s（1≤p≤N）。 其中，1≤N≤500 000，1≤M≤100 000，所有打分都是绝对值不超过1000的整数。<br><a id="more"></a></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>小白每出去玩一次，都对应输出一行，只包含一个整数，表示小白可以选出的公园得分和的最大值。</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>5 3<br>1 2 -3 4 5<br>1 2 3<br>2 2 -1<br>1 2 3</p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>2<br>-1</p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>线段树水题<br>题意是要你求区间最大子段和，支持单点修改<br>所以维护一下每一个节点 左起最大和 和 右起最大和 以及 区间最大子段和 即可</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">	Problem: 1756</div><div class="line">	User: SHENZHEBEI //我没权限号，用同学的号刷的</div><div class="line">	Language: C++</div><div class="line">	Result: Accepted</div><div class="line">	Time:2636 ms</div><div class="line">	Memory:48172 kb</div><div class="line">****************************************************************/</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 500050</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> mx, ls, rs, lmx, rmx, sum;</div><div class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>]; <span class="comment">//数组要开四倍大小</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">//跟新节点x</span></div><div class="line">	tr[x].sum = tr[x&lt;&lt;<span class="number">1</span>].sum+tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</div><div class="line">	tr[x].lmx = max(tr[x&lt;&lt;<span class="number">1</span>].lmx, tr[x&lt;&lt;<span class="number">1</span>].sum+tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmx);</div><div class="line">	tr[x].rmx = max(tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].rmx, tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+tr[x&lt;&lt;<span class="number">1</span>].rmx);</div><div class="line">	tr[x].mx = max(max(tr[x&lt;&lt;<span class="number">1</span>].mx, tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx), tr[x&lt;&lt;<span class="number">1</span>].rmx+tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lmx);</div><div class="line">&#125;</div><div class="line"><span class="function">node <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tr[x].ls == l &amp;&amp; tr[x].rs == r) <span class="keyword">return</span> tr[x];</div><div class="line">	<span class="keyword">int</span> mid = tr[x].ls + tr[x].rs &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">	node ls = ask(x&lt;&lt;<span class="number">1</span>, l, mid), rs = ask(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r), ans;</div><div class="line">	ans.mx = max(max(ls.mx, rs.mx), ls.rmx+rs.lmx);</div><div class="line">	ans.rmx = max(rs.rmx, rs.sum+ls.rmx);</div><div class="line">	ans.lmx = max(ls.lmx, ls.sum+rs.lmx);</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tr[x].ls==l&amp;&amp;tr[x].rs==tr[x].ls)&#123;</div><div class="line">		tr[x].sum=tr[x].lmx=tr[x].rmx=tr[x].mx=v;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = tr[x].ls + tr[x].rs &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(l &lt;= mid) add(x&lt;&lt;<span class="number">1</span>, l, v);</div><div class="line">	<span class="keyword">else</span> add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, v);</div><div class="line">	push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	tr[x].ls = l, tr[x].rs = r;</div><div class="line">	<span class="keyword">if</span>(l == r)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tr[x].mx);</div><div class="line">		tr[x].lmx=tr[x].rmx=tr[x].sum=tr[x].mx;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>, l, mid);</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">	push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> n, m, op, l, r;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</div><div class="line">	build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">	<span class="keyword">while</span>(m--)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;op, &amp;l, &amp;r);</div><div class="line">		<span class="keyword">if</span>(op == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ask(<span class="number">1</span>, min(l, r), max(l, r)).mx); <span class="comment">//这里有陷阱,mdzz RE了无数次</span></div><div class="line">		<span class="keyword">else</span> add(<span class="number">1</span>, l, r);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[线段树入门详解]]></title>
      <url>/2017/03/12/%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>线段树其实就是一个超级简单的数据结构。<br>就是把一个序列搞出若干个区间，在询问和修改时改一下区间就行了。<br>比方说某节点表示[1, n]的区间，那么该节点的左子树就表示[1, (n+1)/2]的区间，右子树就表示[(n+1)/2+1, n]的区间。<br>然后每个节点维护一下该区间内的目标对象（sum、max等）就行了，<br>这样可以在n<sup>2</sup>的时间内建树，在log(n)的时间内完成查询操作。<br>注意到线段树是颗二叉树，所以每个节点的左儿子可以表示为x*2(位运算简化为x&lt;&lt;1)，右儿子为x*2+1(x&lt;&lt;1|1)<br>注意在查询的时候如果要修改的刚好就是该节点的区间，<br>那么可以为这个节点打一个flag（俗称Lazy标记），而不必把他下面的节点全部更新（不然是O（n）的了）。</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>下面就是模板了，但是希望大家先不看模板打一遍，再与模板校对并优化<br>先是每个节点的结构体：<br><a id="more"></a></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> node&#123;</div><div class="line">	<span class="keyword">int</span> l, r, sum, mx, lazy; <span class="comment">// l, r: 左右边界，sum、mx: 最大值 lazy只是个标记</span></div><div class="line">&#125;tr[N&lt;&lt;<span class="number">2</span>]; <span class="comment">// 节点要开长度的四倍大小</span></div></pre></td></tr></table></figure>
<p>建树：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	tr[x].l = l, tr[x].r = r;</div><div class="line">	<span class="keyword">if</span>(l == r)&#123;</div><div class="line">		tr[x].sum = tr[x].mx = a[l];</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>, l, mid);</div><div class="line">	build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</div><div class="line">	push_up(x); <span class="comment">// 更新x的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是push_up的内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	tr[x].sum = tr[x&lt;&lt;<span class="number">1</span>].sum + tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum + a[x]; <span class="comment">// 更新sum</span></div><div class="line">	tr[x].mx = max(tr[x&lt;&lt;<span class="number">1</span>].mx, tr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].mx); <span class="comment">// 更新max</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着是查询：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">asksum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	push_down(x); <span class="comment">// 这步后来会讲到，下传标记</span></div><div class="line">	<span class="keyword">if</span>(tr[x].l == l &amp;&amp; tr[x].r == r) <span class="keyword">return</span> tr[x].sum;</div><div class="line">	<span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> asksum(x&lt;&lt;<span class="number">1</span>, l, r); <span class="comment">// 若果询问的区间明显在节点区间的左半边，那么去问节点的左子树</span></div><div class="line">	<span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> asksum(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r); <span class="comment">// 如果在右边就去问右子树</span></div><div class="line">	<span class="keyword">return</span> asksum(x&lt;&lt;<span class="number">1</span>, l, mid) + asksum(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r); <span class="comment">// 不然两个都要问</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">askmax</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123; <span class="comment">// 这个和上面一个基本一样</span></div><div class="line">	push_down(x);</div><div class="line">	<span class="keyword">if</span>(tr[x].l == l &amp;&amp; tr[x].r == r) <span class="keyword">return</span> tr[x].mx;</div><div class="line">	<span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) <span class="keyword">return</span> askmax(x&lt;&lt;<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">if</span>(l &gt; mid) <span class="keyword">return</span> askmax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r);</div><div class="line">	<span class="keyword">return</span> max(askmax(x&lt;&lt;<span class="number">1</span>, l, mid), askmax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后是区间加的操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(tr[x].l == l &amp;&amp; tr[x].r == r)&#123;</div><div class="line">		tr[x].lazy += val; <span class="comment">// 这标记就是说，他的儿子都要加这么多，但是懒得算下去了</span></div><div class="line">		tr[x].sum += val*(tr[x].r - tr[x].l + <span class="number">1</span>);</div><div class="line">		tr[x].mx += val;</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(r &lt;= mid) update(x&lt;&lt;<span class="number">1</span>, l, r, val);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l &gt; mid) update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, l, r, val);</div><div class="line">	<span class="keyword">else</span> update(x&lt;&lt;<span class="number">1</span>, l, mid, val), update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, val);</div><div class="line">	push_up(x); <span class="comment">// 更新x的值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后就是标记下传啦！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(!tr[x].lazy) <span class="keyword">return</span>; <span class="comment">// 没有标记就返回</span></div><div class="line">	<span class="keyword">if</span>(tr[x].l)&#123; <span class="comment">// 有左儿子</span></div><div class="line">		tr[tr[x].l].lazy += tr[x].lazy;</div><div class="line">		tr[tr[x].l].sum += tr[x].lazy*(tr[x].r - tr[x].l + <span class="number">1</span>);</div><div class="line">		tr[tr[x].l].mx += tr[x].lazy;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(tr[x].r)&#123; <span class="comment">// 有右儿子</span></div><div class="line">		tr[tr[x].r].lazy += tr[x].lazy;</div><div class="line">		tr[tr[x].r].sum += tr[x].lazy*(tr[x].r - tr[x].l + <span class="number">1</span>);</div><div class="line">		tr[tr[x].r].mx += tr[x].lazy;</div><div class="line">	&#125;</div><div class="line">	tr[x].lazy = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>看完了之后就有一大波水题在等着你！<br>就算看不懂照题解多打几遍慢慢就懂了的！<br>刷题才是王道！<br>GL&amp;HF</p>
]]></content>
      
        <categories>
            
            <category> 教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BZOJ 1008: [HNOI2008]越狱]]></title>
      <url>/2017/03/11/BZOJ-1008-HNOI2008-%E8%B6%8A%E7%8B%B1/</url>
      <content type="html"><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>监狱有连续编号为1…N的N个房间，每个房间关押一个犯人，有M种宗教，每个犯人可能信仰其中一种。如果相邻房间的犯人的宗教相同，就可能发生越狱，求有多少种状态可能发生越狱</p>
<h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>输入两个整数M，N.1&lt;=M&lt;=10^8,1&lt;=N&lt;=10^12</p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>可能越狱的状态数，模100003取余</p>
<h2 id="Simple-Input"><a href="#Simple-Input" class="headerlink" title="Simple Input"></a>Simple Input</h2><p>2 3<br><a id="more"></a></p>
<h2 id="Simple-Output"><a href="#Simple-Output" class="headerlink" title="Simple Output"></a>Simple Output</h2><p>6</p>
<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题还是有点简单的哎<br>其实就是求$m^n-m*(m-1)^{n-1}$<br>所以就是裸的快速幂了</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**************************************************************</span></div><div class="line">	Problem: 1008</div><div class="line">	User: SW_Wind</div><div class="line">	Language: C++</div><div class="line">	Result: Accepted</div><div class="line">	Time:0 ms</div><div class="line">	Memory:1288 kb</div><div class="line">****************************************************************/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD 100003</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">ll m, n;</div><div class="line"><span class="function">ll <span class="title">sqr</span><span class="params">(ll a)</span></span>&#123; <span class="comment">//求平方</span></div><div class="line">	<span class="keyword">return</span> a*a%MOD;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">mi</span><span class="params">(ll a, ll b)</span></span>&#123; <span class="comment">//这个就是快速幂啦！求a的b次方</span></div><div class="line">	<span class="keyword">if</span>(!b) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(b&amp;<span class="number">1</span>) <span class="keyword">return</span> sqr(mi(a, b&gt;&gt;<span class="number">1</span>))*a%MOD;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> sqr(mi(a, b&gt;&gt;<span class="number">1</span>));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="comment">//简洁的主函数</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;m, &amp;n);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld"</span>, (mi(m, n)-m*mi(m<span class="number">-1</span>, n<span class="number">-1</span>)%MOD+MOD)%MOD);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[[BZOJ1000]A+B problem]]></title>
      <url>/2017/03/10/BZOJ1000-A-B-problem/</url>
      <content type="html"><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><p>输入$A$和$B$，输出$A+B$的值。</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p><del>这题太难了，想了一个下午都想不出来我为什么要做这题</del><br>所以我是看题解才做出来的QAQ</p>
<p>C++版<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a, b; <span class="comment">//定义两个变量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;a, &amp;b); <span class="comment">//读入</span></div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>, a+b); <span class="comment">//输出</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>pascal版<br><figure class="highlight pascal"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> a, b:longint;</div><div class="line"><span class="keyword">begin</span></div><div class="line">	<span class="keyword">read</span>(a, b);</div><div class="line">	writeln(a+b);</div><div class="line"><span class="keyword">end</span>.</div></pre></td></tr></table></figure></p>
<p>java版<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">		Scanner scan = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">		<span class="keyword">int</span> a = scan.nextInt();</div><div class="line">		<span class="keyword">int</span> b = scan.nextInt();</div><div class="line">		System.out.println(a+b);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>python版<br><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> (int)(input())+(int)(input())</div></pre></td></tr></table></figure></p>
<p>c++ Splay版<br><figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> sz[N], rev[N], tag[N], sum[N], ch[N][<span class="number">2</span>], fa[N], val[N];</div><div class="line"><span class="keyword">int</span> n, m, rt, x;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	sz[x] = sz[ch[x][<span class="number">0</span>]] + sz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>;</div><div class="line">	sum[x] = sum[ch[x][<span class="number">1</span>]] + sum[ch[x][<span class="number">0</span>]] + val[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(rev[x])&#123;</div><div class="line">		swap(ch[x][<span class="number">0</span>], ch[x][<span class="number">1</span>]);</div><div class="line">		<span class="keyword">if</span>(ch[x][<span class="number">1</span>]) rev[ch[x][<span class="number">1</span>]] ^= <span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span>(ch[x][<span class="number">0</span>]) rev[ch[x][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">		rev[x] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(tag[x])&#123;</div><div class="line">		<span class="keyword">if</span>(ch[x][<span class="number">1</span>]) tag[ch[x][<span class="number">1</span>]] += tag[x], sum[ch[x][<span class="number">1</span>]] += tag[x];</div><div class="line">		<span class="keyword">if</span>(ch[x][<span class="number">0</span>]) tag[ch[x][<span class="number">0</span>]] += tag[x], sum[ch[x][<span class="number">0</span>]] += tag[x];</div><div class="line">		tag[x] = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[fa[x]];</div><div class="line">	<span class="keyword">int</span> kind = ch[y][<span class="number">1</span>] == x;</div><div class="line">	<span class="keyword">if</span>(y == k) k = x;</div><div class="line">	<span class="keyword">else</span> ch[z][ch[z][<span class="number">1</span>]==y] = x;</div><div class="line">	fa[x] = z; fa[y] = x; fa[ch[x][!kind]] = y;</div><div class="line">	ch[y][kind] = ch[x][!kind]; ch[x][!kind] = y;</div><div class="line">	push_up(y); push_up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;k)</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(x != k)&#123;</div><div class="line">		<span class="keyword">int</span> y = fa[x], z = fa[fa[x]];</div><div class="line">		<span class="keyword">if</span>(y != k) <span class="keyword">if</span>(ch[y][<span class="number">1</span>] == x ^ ch[z][<span class="number">1</span>] == y) rotate(x, k);</div><div class="line">		<span class="keyword">else</span> rotate(y, k);</div><div class="line">		rotate(x, k);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	push_down(x);</div><div class="line">	<span class="keyword">int</span> r = sz[ch[x][<span class="number">0</span>]]+<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(k == r) <span class="keyword">return</span> x;</div><div class="line">	<span class="keyword">if</span>(k &lt; r) <span class="keyword">return</span> kth(ch[x][<span class="number">0</span>], k);</div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> kth(ch[x][<span class="number">1</span>], k-r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> x = kth(rt, l), y = kth(rt, r+<span class="number">2</span>);</div><div class="line">	splay(x, rt); splay(y, ch[rt][<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">rever</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	split(l, r);</div><div class="line">	rev[ch[ch[rt][<span class="number">1</span>]][<span class="number">0</span>]] ^= <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span>&#123;</div><div class="line">	split(l, r);</div><div class="line">	tag[ch[ch[rt][<span class="number">1</span>]][<span class="number">0</span>]] += v;</div><div class="line">	val[ch[ch[rt][<span class="number">1</span>]][<span class="number">0</span>]] += v;</div><div class="line">	push_up(ch[ch[rt][<span class="number">1</span>]][<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> f)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(l == r)&#123;</div><div class="line">		fa[l] = f;</div><div class="line">		sz[l] = <span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> l;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">	ch[mid][<span class="number">0</span>] = build(l, mid<span class="number">-1</span>, mid);</div><div class="line">	ch[mid][<span class="number">1</span>] = build(mid+<span class="number">1</span>, r, mid);</div><div class="line">	fa[mid] = f;</div><div class="line">	push_up(mid);</div><div class="line">	<span class="keyword">return</span> mid;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">asksum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	split(l, r);</div><div class="line">	<span class="keyword">return</span> sum[ch[ch[rt][<span class="number">1</span>]][<span class="number">0</span>]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	n = <span class="number">2</span>;</div><div class="line">	rt = build(<span class="number">1</span>, n+<span class="number">2</span>, <span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</div><div class="line">		add(i, i, x);</div><div class="line">	&#125;</div><div class="line">	rever(<span class="number">1</span>, n);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, asksum(<span class="number">1</span>, n));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 题解 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
